<?php

namespace App\EofficeApp\Project\Entities;

use App\EofficeApp\Base\BaseEntity;
use App\EofficeApp\Base\Traits\SearchableTrait;
use App\EofficeApp\Project\NewServices\Managers\DataManager;
use App\EofficeApp\Project\NewServices\Managers\ProjectLogManager;
use App\EofficeApp\Project\NewServices\Managers\RolePermission\RoleManager;
use App\EofficeApp\Project\NewServices\ProjectService;
use Illuminate\Database\Eloquent\Model;
use DB;
use Illuminate\Support\Arr;
class ProjectBaseEntity extends BaseEntity {

    use SearchableTrait;
    public $function_page_configs;
    public $all_roles;
    protected $transitVariable = []; // save时的中转变量，用于记录一次生命周期的中间变量，在勾子函数间共用，用完清空

    public function toArray()
    {
        $data = parent::toArray(); // TODO: Change the autogenerated stub
        $this->function_page_configs && $data['function_page_configs'] = $this->function_page_configs;
        $this->all_roles && $data['all_roles'] = $this->all_roles;
        return $data;
    }

    // 目前只支持单个，多个等需要的时候兼容
    public function testRoleId($roleId)
    {
        if (!$this->all_roles) {
            return false;
        }
        if (is_array($roleId)) {
            return (bool) array_intersect($roleId, $this->all_roles);
        } else {
            return in_array($roleId, $this->all_roles);
        }
    }

    public function testRoleKey($roleKey)
    {
        $roleId = RoleManager::getRoleId($roleKey);
        return $this->testRoleId($roleId);
    }

    // 用来设置模型数据，可以不触发修改器
    // 一般用于获取数据发送给前端显示，设置值会产生其它数据原始值的联动修改，造成显示问题
    public function setAttributesWithOutFixed($key, $value)
    {
        $this->attributes[$key] = $value;
    }

    // 批量更新数据，二维数组，每个数据第一个key是主键id
    // $updateDate: 更新时间
    public static function updateBatch($multipleData = [], $updateDate = true)
    {
        $tableName = (new static())->getTable();

        if( $tableName && !empty($multipleData) ) {
            // column or fields to update
            $updateColumn = collect($multipleData)->collapse()->keys()->toArray();// 获取所有key
//            $updateColumn = array_keys($multipleData[0]);
            $referenceColumn = $updateColumn[0]; //e.g id
            unset($updateColumn[0]);
            $whereIn = [];

            $q = "UPDATE ".$tableName." SET ";
            foreach ( $updateColumn as $uColumn ) {
                $q .=  $uColumn." = CASE ";

                foreach( $multipleData as $data ) {
                    array_key_exists($uColumn, $data) && $q .= "WHEN ".$referenceColumn." = ".$data[$referenceColumn]." THEN '".$data[$uColumn]."' ";
                }
                $q .= "ELSE ".$uColumn." END, ";
            }
            foreach( $multipleData as $data ) {
                $whereIn[] = $data[$referenceColumn];
            }
            $q = rtrim($q, ", ")." WHERE ".$referenceColumn." IN (". implode(',', $whereIn) .")";

            DB::update(DB::raw($q));

            if ($updateDate) {
                $date = date('Y-m-d H:i:s');
                DB::table($tableName)->whereIn($referenceColumn, $whereIn)->update(['updated_at' => $date]);
            }

        } else {
            return false;
        }

    }

    // 获取下拉字段的多语言键值对
    public static function getSelectFieldKeyValue($key, $langModule)
    {
        $key = strtoupper($key);
        if (isset(static::$$key)) {
            $keyValue = static::$$key;
            foreach ($keyValue as $key => $langString) {
                $langString = "{$langModule}.{$langString}";
                $keyValue[$key] = trans($langString);
            }
            return $keyValue;
        }
        return [];
    }

    // 获取项目的类型表映射
    public static function getProjectTableMapping()
    {
        return [
            'project' => ProjectManagerEntity::class,
            'task' => ProjectTaskEntity::class,
            'document' => ProjectDocumentEntity::class,
            'question' => ProjectQuestionEntity::class,
            'document_dir' => ProjectDocumentDirEntity::class,
        ];
    }

    // 各表关联项目的字段
    public static function getRelationProjectField($type = null) {
        $relationFields = [
            'project' => 'manager_id',
            'document' => 'doc_project',
            'question' => 'question_project',
            'task' => 'task_project',
            'document_dir' => 'dir_project',
        ];
        return Arr::get($relationFields, $type, '');
    }

    // 通过模型对象或类名获取类型
    public static function getTypeByClass($class)
    {
        if ($class instanceof Model) {
            $class = get_class($class);
        }
        return array_extract(array_flip(self::getProjectTableMapping()), $class, '');
    }

    // 保存并生成日志 $type: project|task|question|document, 并更新project_role_user表数据，类型doc要替换为document
    public function mineSave($userId, $managerId, $action = 'modify', $saveLog = true, $updateRelation = true)
    {
        $type = Arr::get(array_flip(self::getProjectTableMapping()), static::class);
        $dirtyData = $this->getDirty();
        $logManager = null;
        $res = false;
        if ($action === 'modify' && $dirtyData) {
            if ($saveLog) {
                $editFunctionName = $type . 'EditLog';
                $logManager = ProjectLogManager::getIns($userId, $managerId);
                $logManager->$editFunctionName($this);
            }
            $res = $this->save();
        }

        if ($action === 'add') {
            $res = $this->save();
            // 添加日志要放在保存之后，否则没有id
            if ($saveLog) {
                $fieldPrefix = $type == 'document' ? 'doc' : $type;
                $addFunctionName = $type . 'AddLog';
                $nameField = $fieldPrefix . '_name';
                $logManager = ProjectLogManager::getIns($userId, $managerId);
                $logManager->$addFunctionName($this->getAttribute($nameField), $this->getKey());
            }
        }

        // Todo 强依赖dataManager类
        $managerState = DataManager::getIns()->getProject('manager_state');
        ProjectService::setFieldRoleRelation($dirtyData, $type, $this->getKey(), $managerId, $managerState);
        $updateRelation && ProjectService::updateRelation(); // 更新人员信息，放最后

        return $res;
    }

    // 重写，封装了勾子函数，如果后面升级了laravel7可以替换成官方的监听函数saved、saving等
    public function save(array $options = [])
    {
        // 保存前的勾子函数beforeSave
        if (method_exists($this, 'beforeSave')) {
            $this->beforeSave($this);
        }

        $res = parent::save($options); // TODO: Change the autogenerated stub

        // 保存后的勾子函数afterSave
        if (method_exists($this, 'afterSave')) {
            $this->afterSave($this);
        }
        $this->resetTransitVariable();
        return $res;
    }

    private function resetTransitVariable()
    {
        $this->transitVariable = [];
    }
}
