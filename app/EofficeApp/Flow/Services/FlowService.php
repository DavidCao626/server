<?php
namespace App\EofficeApp\Flow\Services;

use App\EofficeApp\Flow\Services\FlowBaseService;
use App\EofficeApp\Elastic\Services\MessageQueue\ElasticsearchProducer;
use App\Jobs\EmailJob;
use Cache;
use DB;
use Eoffice;
use Queue;
use Illuminate\Support\Facades\Redis;
use Schema;
use Lang;
use Illuminate\Support\Facades\Log;

/**
 * 流程service类，用来调用所需资源，满足流程controller的需求。函数和controller一一对应。
 * 其余的流程的服务，放在其他的服务类里。
 *
 * @author 丁鹏
 *
 * @since  2015-10-16 创建2
 */
class FlowService extends FlowBaseService
{
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 获取当前人员可以新建的流程;带查询;
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function flowNewIndexCreateList($data)
    {
        $data = $this->parseParams($data);
        $data["fixedFlowTypeInfo"] = $this->getFixedFlowTypeInfoByUserInfo($data);
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        // 查询
        if (isset($data["getType"]) && $data["getType"] == "table") {
            // 可以新建的流程，从flow_type表出发，用来处理search
            $newFlowTypeList = $this->response(app($this->flowTypeRepository), 'flowNewPermissionListTotalRepository', 'flowNewPermissionListRepository', $data);
            return $newFlowTypeList;
        } else {
            if (isset($data["search"]["fieldSearchValMobile"]) || (isset($data["getType"]) && $data["getType"] == "mobileSearch")) {
                $data["search"]["fieldSearchVal"] = $data["search"]["fieldSearchValMobile"];
            }
            // 可以新建的流程，从sort出发
            $data["returntype"] = "array";
            $newFlowSortList = $this->response(app($this->flowSortRepository), 'flowNewIndexCreateTotalRepository', 'flowNewIndexCreateListRepository', $data);
            $result = app($this->flowTypeRepository)->getAllowCreateFlowTypeNoSortData($data);
            if (count($result)) {
                $noSortFlowTypeData = [
                    'id' => 0,
                    'noorder' => 0,
                    'priv_scope' => 1,
                    'title' => trans('flow.unclassified'),
                    'updated_at' => null,
                    'flow_sort_has_many_flow_type' => $result,
                    'create_date' => null,
                    'created_at' => null,
                    'creator' => null,
                    'deleted_at' => null,
                ];
                $newFlowSortList['total'] += 1;
                array_push($newFlowSortList['list'], $noSortFlowTypeData);
            }
            return $newFlowSortList;
        }
    }


    /**
     * 从flow_process表出发，查当前用户可以新建的固定流程，传入后面的getlist里面去，避免速度慢的问题
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getFixedFlowTypeInfoByUserInfo($param)
    {
        $fixedFlowTypeParam = $param;
        $fixedFlowTypeParam['fields'][] = "flow_id";
        $fixedFlowTypeParam['returntype'] = "object";
        $fixedFlowTypeInfo = app($this->flowProcessRepository)->getFixedFlowTypeInfoByUserInfo($fixedFlowTypeParam);
        return $fixedFlowTypeInfo;
    }

    /**
     * 获取常用流程list
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function getFavoriteFlowList($data)
    {
        $data = $this->parseParams($data);
        $flowFavoriteList = [];
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        // 获取流程收藏
        $flowFavoriteList = app($this->flowFavoriteRepository)->getFlowFavoriteList(["search" => ["user_id" => [$data["user_id"]] ] ,'controlFlows' =>$data['controlFlows'] ]);
        if ($flowFavoriteList) {
            $flowFavoriteList = $flowFavoriteList->toArray();

            // 可以新建的流程，从flow_type表出发，用来处理没权限的流程
            $data["fixedFlowTypeInfo"] = $this->getFixedFlowTypeInfoByUserInfo($data);
            $newFlowTypeList = app($this->flowTypeRepository)->flowNewPermissionListRepository($data);
            $newListArray = $newFlowTypeList->pluck("flow_id")->toArray();

            // 将流程收藏里的没权限的删掉
            if (count($flowFavoriteList)) {
                foreach ($flowFavoriteList as $key => $value) {
                    if (!in_array($value["flow_id"], $newListArray)) { // 没有流程新建权限
                        // 数据表删除
                        $wheres = ["favorite_id" => [$value["favorite_id"]]];
                        app($this->flowFavoriteRepository)->deleteByWhere($wheres);
                        // 返回结果删除
                        unset($flowFavoriteList[$key]);
                    } else { // 有新建权限，则去flow_run表去查当前用户最新一条流程的创建时间，供前端展示使用
                        $flowFavoriteList[$key]["flow_favorite_has_many_flow_run"][0] = [];
                        // 查询最新一条流程的创建时间
                        $flowRunCreateTimeRes = app($this->flowRunRepository)->getFieldMaxValue('create_time', ['creator' => [$data['user_id']], 'flow_id' => [$value['flow_id']]]
                        );
                        if ($flowRunCreateTimeRes) {
                            $flowRunCreateTimeRes = date("Y-m-d H:i:s", strtotime($flowRunCreateTimeRes));
                            $flowFavoriteList[$key]["flow_favorite_has_many_flow_run"][0] = ['create_time' => $flowRunCreateTimeRes];
                        }
                    }
                }
            }
        }
        return $flowFavoriteList;
    }

    /**
     * 获取某个流程的当前用户创建的最新的20条流程，供历史数据导入;带查询
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function flowNewIndexCreateHistoryList($data)
    {
        return app($this->flowRunRepository)->flowNewIndexCreateHistoryListRepository($data);
    }

    /**
     * 【新建流程index】 流程收藏 新建收藏
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function addFlowFavorite($data)
    {
        // 先删除后插入，避免重复。
        $wheres = ["flow_id" => [$data["flow_id"]], "user_id" => [$data["user_id"]]];
        app($this->flowFavoriteRepository)->deleteByWhere($wheres);
        $flowFavoriteData = [
            "user_id" => $data["user_id"],
            "flow_id" => $data["flow_id"],
        ];
        return app($this->flowFavoriteRepository)->insertData($flowFavoriteData);
    }

    /**
     * 【新建流程index】 流程收藏 删除收藏
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function deleteFlowFavorite($data)
    {
        $wheres = ["flow_id" => [$data["flow_id"]], "user_id" => [$data["user_id"]]];
        app($this->flowFavoriteRepository)->deleteByWhere($wheres);
        return "1";
    }

    /**
     * 新建流程页面根据设置，展示流程基本信息
     *
     * 20160928，此函数改为 flowservice 内部调用，此函数的直属路由可以删掉。
     * 参数 flow_id user_id[当前用户id]
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function flowNewPageFlowRunInfo($data, $userInfo = [], $is_create_sunwork = false)
    {
        // 组织返回值
        $returnData = [];
        // 获取定义流程的所有相关信息;包括flow_type,flow_others,flow_process
        // 处理一下，只获取需要的信息
        $getFlowTypeInfoParams = ["flow_id" => $data["flow_id"]];
        if ($flowTypeAllObject = app($this->flowTypeRepository)->getFlowTypeInfoRepository($getFlowTypeInfoParams, ['flow_form_type', 'flow_sort', 'flow_process', 'flow_others'])) {
            $flowTypeAllInfo = $flowTypeAllObject->toArray();
            if (empty($flowTypeAllInfo['is_using'])) {
                // 流程已停用
                return ['code' => ['flow_stop', 'flow']];
            }
            $returnData['flowInfoForFlowNameRulse'] = [];
            $returnData['flowInfoForFlowNameRulse']['flow_id'] = $flowTypeAllInfo["flow_id"];
            $returnData['flowInfoForFlowNameRulse']['flow_name'] = $flowTypeAllInfo["flow_name"];
            $returnData['flowInfoForFlowNameRulse']['sub_show_main_process_title'] = $flowTypeAllInfo['sub_show_main_process_title'];
            $returnData['flowInfoForFlowNameRulse']['form_id'] = $flowTypeAllInfo['flow_type_has_one_flow_form_type']["form_id"];
            $returnData['flowInfoForFlowNameRulse']['form_name'] = $flowTypeAllInfo['flow_type_has_one_flow_form_type']["form_name"];
            $returnData['flowInfoForFlowNameRulse']['flow_type_name'] = $flowTypeAllInfo['flow_type_belongs_to_flow_sort'] ? $flowTypeAllInfo['flow_type_belongs_to_flow_sort']["title"]
            : trans('flow.unclassified');
            $returnData['flowInfoForFlowNameRulse']['flow_type_id'] = $flowTypeAllInfo['flow_type_belongs_to_flow_sort']["id"] ?? 0;
            $returnData['flowInfoForFlowNameRulse']['date'] = $this->getFlowNameRulesDateDatas();
            $flowType = $flowTypeAllInfo["flow_type"];
            $returnData["flow_type"] = $flowType;
            $returnData["flowType"] = $flowType;
            $returnData["formId"] = $flowTypeAllInfo["form_id"];
            $flowId = $flowTypeAllInfo["flow_id"];
            $returnData["openDebug"] = $flowTypeAllInfo["open_debug"];
            // 获取固定流程首节点的节点权限
            $headNodeId = 0;
            if ($flowType == "1") {
                $returnData["freeProcessStep"] = 0;
                if (count($flowTypeAllInfo["flow_type_has_many_flow_process"])) {
                    $flowDefineProcess = $flowTypeAllInfo["flow_type_has_many_flow_process"];
                    foreach ($flowDefineProcess as $processKey => $processValue) {
                        // 首节点
                        if ($processValue["head_node_toggle"] == "1") {
                            $headNodeId = $processValue["node_id"];
                            $returnData["node_id"] = $headNodeId;
                            $returnData["process_copy"] = $processValue['process_copy'] ?? 0;
                            $returnData["node_operation"] = app($this->flowRunService)->getFlowFormControlOperation(["formId" => $returnData["formId"], "node_id" => $headNodeId]);
                            $returnData["control_operation_condition"] = app($this->flowRunService)->getFlowFormControlOperationCondition(["formId" => $returnData["formId"], "node_id" => $headNodeId]);
                            $nodeInfo = app($this->flowProcessRepository)->getDetail($headNodeId);
                            $returnData["flowDataValidToggle"] = $nodeInfo->flow_data_valid_toggle ?? 0;
                            $returnData["pressAddHour"] = $nodeInfo->press_add_hour ?? 0;
                            $returnData["overtime_except_nonwork"] = $nodeInfo->overtime_except_nonwork ?? 0;
                            $returnData["processDescript"] = $nodeInfo->process_descript ?? '';
                            $returnData["trigger_all_son_flows"] = $nodeInfo->trigger_all_son_flows;
                            $returnData["end_workflow"] = $nodeInfo->end_workflow;
                            $returnData["sun_flow_toggle"] =$nodeInfo->sun_flow_toggle;
                        }
                    }
                }
            } else {
                $returnData["pressAddHour"] =  $flowTypeAllInfo['press_add_hour'];
                $returnData["overtime_except_nonwork"] =  $flowTypeAllInfo['overtime_except_nonwork'];
                $returnData["headNodeToggle"] = "1";
                $returnData["node_operation"] = app($this->flowRunService)->getFlowFormControlOperation(["formId" => $returnData["formId"], "flowId" => $flowId, "headNodeToggle" => $returnData["headNodeToggle"]]);
                $returnData["control_operation_condition"] = app($this->flowRunService)->getFlowFormControlOperationCondition(["formId" => $returnData["formId"], "flowId" => $flowId, "headNodeToggle" => $returnData["headNodeToggle"]]);
            }
            $submitWithoutDialog = "";
            // flow_others
            if ($flowTypeAllInfo["flow_type_has_one_flow_others"]) {
                $flowOthersInfo = $flowTypeAllInfo["flow_type_has_one_flow_others"];
                $submitWithoutDialog = $flowOthersInfo["submit_without_dialog"];
                // 统一处理返回flow_others设置
                $flowOthersSetting = app($this->flowParseService)->parseFlowOthersSetting($flowOthersInfo);
                $returnData = array_merge($returnData, $flowOthersSetting);
            } else {
                // 定义流程-其他设置数据错误，请联系系统管理员检查！
                return ['code' => ['define_worlflow_other_set_data_error', 'flow']];
            }
            $flowSubmitStatus = "host";
            $returnData["flowSubmitStatus"] = $flowSubmitStatus;
            // 取到主办人/经办人提交之后，判断不选人提交
            $submitWithoutDialogParam = [
                "flowType" => $flowType,
                "submitWithoutDialog" => $submitWithoutDialog,
                "flowSubmitStatus" => $flowSubmitStatus,
                "flowProcess" => $headNodeId,
                "runId" => "",
                "currentUser" => $data["user_id"],
                "processId" => "1",
                "flowId" => $data["flow_id"],
            ];
            // $submitWithoutDialogResult = $this->verifySubmitWithoutDialog($submitWithoutDialogParam);
            $submitWithoutDialogResult = [];
            $returnData["submitWithoutDialog"] = $submitWithoutDialogResult;
        } else {
            // 流程不存在
            return ['code' => ['0x030001', 'flow']];
        }

        // 如果传递了$data["user_id"]则可能是子流程，需要获取子流程指定创建人
        // 一般情况下是主流程，获取userinfo中的当前人即可
        $userName = isset($data["user_id"]) ? app($this->userService)->getUserName($data["user_id"]) : ($userInfo["user_name"] ?? app($this->userService)->getUserName($userInfo["user_id"]));
        // 查user_name
        if ( $userName) {
            // 不再返回流水号，流水号在前端发送创建流程请求的时候，再在后台创建
            $returnData['flow_name_rules'] = ($flowTypeAllInfo['flow_name_rules'] == '[]') ? '' : $flowTypeAllInfo['flow_name_rules'];
            $returnData['flow_name_rules_html'] = ($flowTypeAllInfo['flow_name_rules'] == '[]') ? '' : $flowTypeAllInfo['flow_name_rules_html'];
            $returnData['can_edit_flowname'] = isset($flowTypeAllInfo['can_edit_flowname']) ? $flowTypeAllInfo['can_edit_flowname'] : '';
            if ($returnData['flow_name_rules']) {
                // 子流程获取时 根据流程标题规则 返回预览标题
                if ($is_create_sunwork) {
                    $flowFormParseData = $this->getFlowFormParseData(['formId' => $flowTypeAllInfo["form_id"]], $userInfo);
                    if (isset($flowFormParseData['parseData']) && isset($flowFormParseData['parseFormStructure'])) {
                        $data['form_data'] = $flowFormParseData['parseData'];
                        $data['form_structure'] = $flowFormParseData['parseFormStructure'];
                    }
                    $returnData["flow_run_name"] = app($this->flowRunService)->flowNewPageGenerateFlowRunName($data);
                }
                //解析标题规则是否含有表单控件
                $hasFormData = [];
                $flowNameRulesInfo = json_decode($returnData['flow_name_rules'], true);
                foreach ($flowNameRulesInfo as $_rules) {
                    if ($_rules['type'] == 'formData') {
                        $hasFormData[] = $_rules['control_id'];
                    }
                }
                $returnData["flow_name_rules_has_form_data"] = $hasFormData;
                $returnData['flowInfoForFlowNameRulse']['user_name'] = $userName;
            }
            // 新建流程页面，过滤 node_operation
            $filterParam = [
                "filter_form" => "new",
                "form_id" => $returnData["formId"],
                "flow_type" => $returnData["flow_type"],
                "node_operation" => isset($returnData["node_operation"]) ? $returnData["node_operation"] : [],
                "data_template" => $data['data_template'] ?? "",
                "filter_from_extra" => $data['page_extra'] ?? '',
            ];
            $returnData["node_operation"] = $this->filterFlowNodeOperation($filterParam);
            return $returnData;
        }
        return ['code' => ['0x000003', 'common']];
    }

    /**
     * 新建流程页面，判断是否有委托
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function verifyFlowHaveAgent($param)
    {
        $creator = $param["user_id"];
        $flowId = $param["flow_id"];
        // 检查委托之后，插入步骤数据
        $haveAgent = app($this->flowRunService)->checkFlowHaveAgent(["flow_id" => $flowId, "user_id" => $creator], false);
        if ($haveAgent) {
            $haveAgentArray = explode("|", $haveAgent);
            $agentFlowId = $haveAgentArray[0];
            // 被委托人
            $agentUserId = $haveAgentArray[1];
            // 被委托人姓名
            $agentUserName = app($this->userService)->getUserName($agentUserId);
            $result = [];
            $result["agent_user_name"] = $agentUserName;
            $result["agent_id"] = $agentFlowId;
            $result["agent_user_id"] = $agentUserId;
            return $result;
        }
        return [];
    }

    /**
     * 新建流程页面，保存；带着流程名称，*-流水号-*，新建flow_run,flow_run_step,flow_run_process数据，返回run_id。
     *
     * @author 丁鹏
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function newPageSaveFlowInfo($data, $userInfo = [])
    {
        $process_time = null;
        $currentTime = date("Y-m-d H:i:s");
        if (isset($data["create_type"]) && $data["create_type"] == "sonFlow") {
            $createType = "sonFlow";
            unset($data["create_type"]);
        } else {
            $createType = "";
            $process_time = $currentTime;
        }
        // flow_process 验证
        $flowProcess = "";
        if ($flowTypeObject = app($this->flowTypeRepository)->getDetail($data["flow_id"], false, ['flow_type'])) {
            $flowType = $flowTypeObject->flow_type;
            $flowProcessType = 'common';
            if ($flowType == "1") {
                // flowProcess不从前端传入，创建只能从第一节点创建，查询第一节点node_id
                $flowProcessData = [
                    "flow_id" => $data["flow_id"],
                    "search" => ["head_node_toggle" => ["1"]],
                ];
                if ($flowProcessInfoObject = app($this->flowProcessRepository)->getFlowProcessList($flowProcessData)) {
                    if ($flowProcessInfoObject->count()) {
                        $flowProcessNodeInfo = $flowProcessInfoObject->first()->toArray();
                        $flowProcess = $flowProcessNodeInfo["node_id"];
                        $flowProcessType = $flowProcessNodeInfo["process_type"];
                    }
                }
            } else {
                $flowProcess = "1";
            }
        }
        if (!$flowProcess) {
            return ['code' => ['0x030024', 'flow']];
        }
        if (isset($data["flow_run_name"]) && isset($data["run_name_html"]) && empty($data["run_name_html"]) && empty($data["flow_run_name"]) ) {
            return ['code' => ['0x030162', 'flow']];
        }
        $creator = $data["creator"];
        if (!isset($data["flow_run_name"]) || !isset($data["run_name_html"]) || empty($data["flow_run_name"]) || empty($data["run_name_html"])) {
            return ['code' => ['0x030161', 'flow']];
        }
        $flowRunData = [
            "run_name" => $data["flow_run_name"],
            "run_name_html" => $data["run_name_html"],
            "run_name_rules" => isset($data["run_name_rules"]) ? $data["run_name_rules"] : '',
            "flow_id" => $data["flow_id"],
            // "run_seq"        => $data["flow_run_seq"],
            "create_time" => date("Y-m-d H:i:s"),
            "creator" => $creator,
            "current_step" => $flowProcess,
            "transact_time" => date("Y-m-d H:i:s"),
            "max_process_id" => "1",
            'max_flow_serial' => 1,
            "instancy_type" => $data["instancy_type"] ?? 0,
            "parent_id" => $data["parent_id"] ?? 0
        ];
        // 创建流程这里不从外面传入"run_seq"了
        // 新建的时候，调用flowRunService的函数生成run_seq
        $flowRunSeq = app($this->flowRunService)->flowNewPageGenerateFlowRunSeq(["flow_id" => $data["flow_id"], "user_id" => $creator]);
        if (gettype($flowRunSeq) == "array" && count($flowRunSeq["code"])) {
            // 流水号满了，报提示信息，这里需要改进
            return $flowRunSeq;
        }
        $flowRunData["run_seq"] = $flowRunSeq;
        $flowRunData["run_seq_strip_tags"] = strip_tags($flowRunSeq);
        // log流程标题保存日志记录
        $flowName = app($this->flowTypeRepository)->getDetail($data["flow_id"]);
        $flowName = $flowName->flow_name;
        // 创建流程
        $flowRunNewObject = app($this->flowRunRepository)->insertData($flowRunData);
        $runId = $flowRunNewObject->run_id;
        // 日志记录流程run_id和流程初始的流水号
        if ($flowRunSeq) {
            app($this->flowLogService)->addSystemLog($creator ,trans('flow.0x030030') .':' . $data["flow_run_name"] . ', '.trans('flow.0x030029').': ' . strip_tags($flowRunSeq) , "initFlowRunSeq"  , '' ,'' ,'' , 0 , '' , [] ,$data["flow_run_name"] );
            // add_system_log($logData);
        }
        if (!$runId) {
            return ['code' => ['0x000003', 'common']];
        } else {
            $todu_push_params = [];
            // 保存表单信息
            $saveData["form_data"] = $data["form_data"] ?? [];
            $saveData["run_id"] = $runId;
            $saveData["save_type"] = "create_flow";
            $saveData["run_seq"] = $flowRunSeq;
            $saveData["flow_process"] = $flowProcess;
            $saveData["process_id"] = "1";
            $saveData["formTemplateRuleInfo"] = $data["formTemplateRuleInfo"] ?? [];
            app($this->flowRunService)->saveFlowRunFormData($saveData, $userInfo);
            $flowRunProcessData = [
                "run_id" => $runId,
                "process_id" => "1",
                "user_id" => $creator,
                "process_flag" => "1",
                "flow_process" => $flowProcess,
                "flow_id" => $data["flow_id"],
                "process_time" => $process_time,
                "receive_time" => $currentTime,
                "process_type" => $flowProcessType,
                "free_process_step" => 0,
				"flow_serial" => 1,
                "user_run_type" => "1",
                "user_last_step_flag" => "1",
            ];
            $flowRunStepData = [
                "run_id" => $runId,
                "process_id" => "1",
                "user_id" => $creator,
                "flow_process" => $flowProcess,
                "user_run_type" => "1",
                "last_transact_time" => strtotime($currentTime),
                "flow_id" => $data["flow_id"],
                "process_time" => $process_time,
                "process_type" => $flowProcessType,
            ];
            $todu_push_params['receiveUser'] = $creator;
            // 如果选了保留在自己的待办事宜里，那就不委托
            $agentType = isset($data["agentType"]) ? $data["agentType"] : "";
            $haveAgent = "";
            if ($agentType == "1") {
                // 检查委托之后，插入步骤数据
                $haveAgent = app($this->flowRunService)->checkFlowHaveAgent(["flow_id" => $data["flow_id"], "user_id" => $creator], false);
            }
            if ($haveAgent) {
                $sendData = [];
                $haveAgentArray = explode("|", $haveAgent);
                $agentFlowId = $haveAgentArray[0];
                // 被委托人
                $agentUserId = $haveAgentArray[1];
                $flowRunProcessData["user_id"] = $agentUserId;
                $flowRunProcessData["by_agent_id"] = $creator;
                $flowRunProcessData["flow_agency_id"] = $agentFlowId;
                $flowRunProcessData["process_time"] = null;
                $flowRunStepData["user_id"] = $agentUserId;
                $flowRunStepData["process_time"] = null;
                $agentUserName = app($this->userService)->getUserName($agentUserId);
                $todu_push_params['receiveUser'] = $agentUserId;
            }
            $flowRunProcess = app($this->flowRunProcessRepository)->insertData($flowRunProcessData);
            app($this->flowRunStepRepository)->insertData($flowRunStepData);
            $todu_push_params['deliverUser'] = $creator;
            $todu_push_params['operationType'] = 'add';
            $todu_push_params['operationId'] = '9';
            $todu_push_params['flowId'] = $data['flow_id'];
            $todu_push_params['runId'] = $runId;
            $todu_push_params['processId'] = '1';
            $todu_push_params['flowRunProcessId'] = $flowRunProcess->flow_run_process_id;
            // 操作推送至集成中心
            app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);

            // 全站搜索消息队列更新数据
            $this->updateGlobalSearchDataByQueue($runId);
            if ($agentType == 1 && $haveAgent) {
                // 新建保存流程的时候也要记录流程委托链
                $agentParam = ['flow_id' => $data['flow_id'], 'user_id' => $creator];
                app($this->flowRunService)->recordFlowAgencyChain($flowRunProcess->toArray(), $agentParam);
                // 发送委托提醒
                $userName = app($this->userService)->getUserName($creator);
                $sendData['remindMark'] = 'flow-entrust';
                $sendData['toUser'] = $agentUserId;
                $sendData['contentParam'] = ['flowTitle' => $flowRunNewObject->run_name, 'userName' => $userName];
                $sendData['stateParams'] = ["flow_id" => intval($data['flow_id']), "run_id" => intval($runId), 'flow_run_process_id' => intval($flowRunProcess['flow_run_process_id'])];
                $sendData['module_type'] = app($this->flowTypeRepository)->getFlowSortByFlowId($data['flow_id']);
                Eoffice::sendMessage($sendData);
            }
            if ($haveAgent) {
                return ["run_id" => $runId, "process_id" => "1", "flow_process" => $flowProcess, "entrust_flag" => "1", "entrust_user_name" => $agentUserName, "run_name" => $flowRunData['run_name'],"flow_run_process_id" => $flowRunProcess['flow_run_process_id']];
            } else {
                return ["run_id" => $runId, "process_id" => "1", "flow_process" => $flowProcess, "run_name" => $flowRunData['run_name'],"flow_run_process_id" => $flowRunProcess['flow_run_process_id']];
            }

        }
    }

    /**
     * 使用消息队列更新全站搜索数据
     *
     * @param   string|int  $id
     */
    public function updateGlobalSearchDataByQueue($id)
    {
        try {
            ElasticsearchProducer::sendGlobalSearchFlowMessage($id);
        } catch (\Exception $exception) {
            Log::error($exception->getMessage());
        }
    }

    /**
     * 流程办理页面 获取流程主体部分所需所有数据，分办理页面/新建页面/查看页面
     *
     * 参数 page run_id flow_id currentUser
     *
     * @author dingpeng
     *
     * @since  2015-10-16 创建
     *
     * @return array    流程数据
     */
    public function getFlowHandlePageMainData($param, $userOwnInfo)
    {
        if (isset($param["page"])) {
            $page = $param["page"];
        } else {
            return [];
        }
        $param['currentUser'] = $userOwnInfo["user_id"] ?? '';
        $flowId = $param["flow_id"];
        $currentUser = $param["currentUser"];
        $currentUserName = isset($param["user_name"]) ? $param["user_name"] : '';
        $runId = isset($param["run_id"]) ? $param["run_id"] : "";
        $flowRunProcessId = $param["flow_run_process_id"] ?? '';
        $pageExtra = $param['page_extra'] ?? ''; // 新建页面导入历史流程、导入表单模板场景调用
		$stepId = isset($param["step_id"]) ? $param["step_id"] : '';
		$stepInfo = app($this->flowRunProcessRepository)->getFlowRunStepInfo($flowRunProcessId);
        if ($stepInfo) {
            $stepInfo = $stepInfo->toArray();
        }else {
            $stepInfo = [];
        }
		if (!empty($flowRunProcessId) && !empty($stepInfo) && ($currentUser != $stepInfo['user_id']) && empty($param['monitorSubmit'])) {
            $stepInfo = [];
		}
		$param['step_info'] = $stepInfo;
        // 标识，流程查询调用这函数的时候，传 getDataType ，此时，不执行流程查看。
        $getDataType = $param["getDataType"] ?? "";
        if (!empty($runId)) {
            $getFlowRunParams = ["user_id" => $currentUser, "user_name" => $currentUserName, 'getType' => 'simple'];
            $flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, $getFlowRunParams);
            if (empty($flowRunInfo)) {
                return ['code' => ['0x000006', 'common']];
            }
            $param['flow_run_info'] = $flowRunInfo;
        }
        // 新建、办理或查看的时候，需要判断权限
        if ($page == "handle" || $page == "view" || $page == "new") {
            // ip控制印证
            $controlFlows = app($this->ipRulesService)->accessFlowControl();
            if (in_array($flowId, $controlFlows)) {
                return ['code' => ['0x000006', 'common']];
            }
            if ($page == "new") {
                // 通过URL直接打开的新建流程页面需要判断权限，不然没有新建权限的也可以新建流程并保存，在自定义菜单链接到某流程的新建有此问题
                // 如果是新建页面，要验证新建流程菜单[id:2]的权限
                if (!app($this->flowPermissionService)->verifyUserMenuPermission("2",$userOwnInfo,$param)) {
                    // 模板数据设置不限制权限
                    if (empty($param['data_template'])) {
                        return ['code' => ['0x000006', 'common']];
                    }
                }
            }
            // 如果是办理页面验证，要验证待办菜单[id:3]的权限
            if ($page == "handle") {
                if (!app($this->flowPermissionService)->verifyUserMenuPermission("3,5,420",$userOwnInfo,$param)) {
                    return ['code' => ['0x000006', 'common']];
                }
            }
            // 如果是查看页面验证，要验证菜单的权限[3   待办事宜,4   流程监控,5   流程查询,33  委托记录,252 已办事宜,323 办结事宜,376 超时查询,377 抄送流程,420 我的请求]
            if ($page == "view") {
                if (!app($this->flowPermissionService)->verifyUserMenuPermission("3,4,5,33,252,323,376,377,420",$userOwnInfo,$param)) {
                    return ['code' => ['0x000006', 'common']];
                }
            }
            $permissionValue = "";
            $permissionData = [];
            if ($page == "new") {
                // 处理新建的情况下，当前人员身份的验证
                $permissionValue = app($this->flowRunService)->flowCreatePermissionValidation(["flow_id" => $flowId, "user_info" => $userOwnInfo]);
            } else {
                // 处理有runid的情况下，办理人身份&权限的验证
                $permissionInfo = app($this->flowPermissionService)->flowRunPermissionValidation(["run_id" => $runId, "user_id" => $currentUser, "flow_id" => $flowId, "user_info" => $userOwnInfo, 'flow_run_info' => $flowRunInfo] , $param);
                $permissionValue = $permissionInfo["permissionNumber"];
                $permissionData = $permissionInfo["permissionData"];
            }
            if ($permissionValue == "" || $permissionValue == 0) {
                // 模板数据设置不限制权限
                if (empty($param['data_template'])) {
                    return ['code' => ['0x000006', 'common']];
                }
            }
        }
		$isConcurrentFlow = app($this->flowParseService)->isConcurrentFlow($flowId);
        // 返回数据
        $data = [];
        if ($page == "new") {
            $data = $this->flowNewPageFlowRunInfo(["flow_id" => $flowId, "user_id" => $currentUser, "user_name" => $currentUserName, "data_template" => ($param['data_template'] ?? ""), "page_extra" => $pageExtra], $userOwnInfo);
            if (isset($data['code'])) {
                return $data;
            }
        } else if ($page == "handle") {
            $data = $this->getFlowHandlePageFlowRunInfo($runId, ["user_id" => $currentUser, "user_name" => $currentUserName, 'flow_run_info' => $flowRunInfo, "step_info" => $stepInfo, "flow_run_process_id" => $flowRunProcessId],$isConcurrentFlow);
        } else if ($page == "view") {
            $data = $this->getFlowViewPageFlowRunInfo($runId, ["user_id" => $currentUser, 'flow_run_info' => $flowRunInfo, "step_info" => $stepInfo, "flow_run_process_id" => $flowRunProcessId], ["getDataType" => $getDataType]);
            // $searchManageUserParam = [
            //     'search' => [
            //         'flow_id' => [$flowId],
            //         'user_id' => [!empty($currentUser) ? $currentUser : $userOwnInfo['user_id']],
            //     ],
            // ];
            if ($currentUser != 'admin') {
                // 验证是否有监控删除权限
                $data['is_monitor_delete'] = 0;
                if (!empty($flowRunDetail) && isset($monitorRulesParams['monitor_rules']) && !empty($monitorRulesParams['monitor_rules'])) {
                    foreach ($monitorRulesParams['monitor_rules'] as $ruleKey => $ruleValue) {
                        if (isset($ruleValue['user_id']) && !empty($ruleValue['user_id'])
                            && ($ruleValue['user_id'] == 'all' || in_array($flowRunDetail->creator, $ruleValue['user_id']))) {
                            if (isset($ruleValue['allow_delete']) && $ruleValue['allow_delete'] == '1') {
                                $data['is_monitor_delete'] = 1;
                            }
                        }
                    }
                }
            } else {
                $data['is_monitor_delete'] = 1;
            }
            $data['run_id'] = $runId;
            $data['run_name'] = $data['runName'];
            $data['permissionValue'] = $permissionValue;
            $data['max_process_id'] = $data['maxProcessId'];
            $data['max_process_name'] = '';
            $data['flow_id'] = $flowId;
            // 用maxFlowSerial表示最大步骤
            $data['max_flow_serial'] = $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', ['run_id' => [$data['run_id']]]);
            $data['latest_steps'] = app($this->flowRunService)->getLatestSteps($data['flowType'], $runId, $maxFlowSerial);
            $data["flow_run_process_list"] = $flowRunProcessList = $data["flow_run_has_many_flow_run_process"];

            // 获取监控配置参数
            $monitorRules = [];
            $flowMonitorParams = $this->getMonitorParamsByUserInfo($userOwnInfo);
            if (isset($flowMonitorParams['monitor_rules']) && $flowMonitorParams['monitor_rules']) {
                $monitorRules = $flowMonitorParams['monitor_rules'];
            }
            // 获取整个流程的收回权限
            $takeBackRes = app($this->flowRunService)->checkFlowRunTakeBackAuthority($data, $userOwnInfo, $monitorRules);
            $data['canTakeBack'] = $takeBackRes['canTakeBack'];
            // 如果只有一个可以收回的节点，直接返回节点信息
            if ($data['canTakeBack'] == 1) {
                $data['process_info_to_take_back'] = $takeBackRes['processInfoToTakeBack'];
            }
            unset($data["flow_run_process_list"]);
            unset($data["flow_run_has_many_flow_run_process"]);
        } else if ($page == "submitFrame") {
            // 如果是监控提交
            if (isset($param["monitorSubmit"]) && $param["monitorSubmit"] == "monitor") {
                $data = $this->getFlowMonitorSubmitFrameFlowRunInfo($runId, $param, $stepInfo);
            } else {
                $data = $this->getFlowSubmitFrameFlowRunInfo($runId, ["user_id" => $currentUser,"step_info" => $stepInfo, "flow_run_process_id" => $flowRunProcessId]);
            }
        }
        $data['isConcurrentFlow'] = $isConcurrentFlow;
		// $data['step_info'] = $stepInfo;
        $nodeId = "";
        $flowType = isset($data["flowType"]) ? $data["flowType"] : "";
        // 验证完权限之后，判断&获取表单模板，传 $permissionValue ， $data
        // admin 不使用模板，看到的都是主表单-- && $currentUser != 'admin' --20180130-讨论后，不加这个功能
        if ($page == "handle" || $page == "view" || $page == "new") {
            // 处理步骤
            $processId = $data["processId"] ?? "";
            if ($permissionValue == "5") {
                // 抄送的时候，抄送发生的步骤，后面判断之后，要使用抄送发生的步骤-对应的节点-作为取模板的步骤
                $copyProcessId = isset($permissionData["process_id"]) ? $permissionData["process_id"] : "";
                $copyFlowProcess = "";
                if ($copyProcessId != $processId) {
                    // 解析节点
                    $permissionDataRunInfo = isset($permissionData["flow_copy_has_one_flow_run"]) ? $permissionData["flow_copy_has_one_flow_run"] : [];
                    $permissionDataRunStepInfo = isset($permissionDataRunInfo["flow_run_has_many_flow_run_step"]) ? $permissionDataRunInfo["flow_run_has_many_flow_run_step"] : [];
                    if (count($permissionDataRunStepInfo)) {
                        foreach ($permissionDataRunStepInfo as $key => $permissionDataRunStepInfoItem) {
                            if ($permissionDataRunStepInfoItem["process_id"] == $copyProcessId) {
                                $copyFlowProcess = $permissionDataRunStepInfoItem["flow_process"];
                                continue;
                            }
                        }
                    }
                }
            }
            if ($permissionValue == "5" && $copyProcessId && $copyFlowProcess) {
                $processId = $copyProcessId;
                $nodeId = $copyFlowProcess;
            } else {
                // 处理节点id
                if (isset($data["node_id"]) && $data["node_id"]) {
                    $nodeId = $data["node_id"];
                } else if (isset($data["flowProcess"]) && $data["flowProcess"]) {
                    $nodeId = $data["flowProcess"];
                }
            }
            $formTemplateParam = $param;
            $formTemplateParam["permissionValue"] = $permissionValue;
            $formTemplateParam["node_id"] = $nodeId;
            // 处理步骤id；办理/查看的时候步骤id都是传的这个。
            $formTemplateParam["process_id"] = $processId;
            $formTemplateParam["flowType"] = $flowType;
            // $formTemplateParam["data"]         = $data;
            //20190806 节点优化在templatetype为run时，先判断改节点有无开启节点表单模版，如果没有可以直接不进行查询模版表单
            if ($flowType == '1') {
                $nodeDetail = app($this->flowProcessRepository)->getDetail($nodeId);
                $formTemplateParam['node_info'] = $nodeDetail;
                $nodeDetail = $nodeDetail ? $nodeDetail->toArray() : [];
            }
            $data["formTemplateRuleInfo"] = $this->flowPageMainGetFormTemplateInfo($formTemplateParam);
            if ($flowType == '1' && $page == "handle" && isset($nodeDetail["flow_run_template_toggle"]) && $nodeDetail["flow_run_template_toggle"] == "0"){
                $data["formTemplateRuleInfo"]['run'] = '';
            }
        }
        // if($flowType == "2") {
        if (!isset($data["nodeId"])) {
            $data["nodeId"] = $nodeId;
        }
        // }
        // 流程查看页面，在获取到实际的流程节点之后，获取流程节点对应的字段控制，用来判断附件上传控件的按钮显示
        // 流程办理/新建页面，已经在各自的主函数里过滤了字段控制了
        if ($page == "view" && $nodeId) {
            $viewPageNodeOperation = [];
            if ($flowType == "2") {
                $headNodeToggle = $processId == "1" ? "1" : "0";
                $viewPageNodeOperation = app($this->flowRunService)->getFlowFormControlOperation(["formId" => $data["formId"], "flowId" => $flowId, "headNodeToggle" => $headNodeToggle]);
            } else {
                $viewPageNodeOperation = app($this->flowRunService)->getFlowFormControlOperation(["formId" => $data["formId"], "node_id" => $nodeId]);
            }
            // 查看流程页面，过滤 node_operation
            $filterParam = [
                "filter_form" => "view",
                "form_id" => $data["formId"],
                "flow_type" => $flowType,
                "hostFlag" => $data["hostFlag"] ?? "",
                "flowSubmitStatus" => isset($data["flowSubmitStatus"]) ? $data["flowSubmitStatus"] : "",
                "node_operation" => $viewPageNodeOperation,
            ];
            $data["node_operation"] = $this->filterFlowNodeOperation($filterParam);
            /**
             * 查看流程页面解析pageMain数据的时候，调用契约锁service的解析函数，解析此流程是否已经关联契约锁
             * 如果关联了契约锁设置，那么修改 node_operation ，让页面对应的附件控件出现签署等按钮
             */
            $data['flow_id'] = $flowId;
            $data = app($this->qiyuesuoService)->parseFlowRunRelationQysSetting($data);
        }
        $formTemplateRuleInfo = isset($formTemplateRuleInfo) ? $formTemplateRuleInfo : [];
        // 根据可能有的表单模板过滤 node_operation
        $nodeOperation = $data["node_operation"] ?? [];
        $formId = isset($data["formId"]) ? $data["formId"] : "";
        // 自由节点存在$nodeOperation为空 但实际有字段控制的情况
        if ($nodeOperation && $formId || (isset($data['freeProcessStep']) && $data['freeProcessStep'])) {
            $filterParam = [
                "controlOperation" => $nodeOperation,
                // "nodeId"           => $nodeId,
                "form_id" => $formId,
                "free_process_step" => $data["freeProcessStep"] ?? 0,
                "flowSubmitStatus" => isset($data["flowSubmitStatus"]) ? $data["flowSubmitStatus"] : "",
                "node_id" => $nodeId,
                "run_id" => $runId
            ];
            $data["node_operation"] = $this->filterFlowNodeRequiredControl($filterParam, $formTemplateRuleInfo);
        }
        if (isset($data['openDebug']) && $data['openDebug'] == 1 && $data['flowSubmitStatus'] == 'host' && $page != 'view' && isset($userOwnInfo['menus']['menu']))  {
                // 主办人时在调试模式下再验证有无流程定义菜单权限[57]，定义表单【201】
           if (count(array_intersect([57] , $userOwnInfo['menus']['menu'])) > 0  ) {
               $data['flowDefinePermission'] = app($this->flowPermissionService)->verifyFlowSettingPermission( $flowId ,$userOwnInfo);
           }
           if (count(array_intersect([201] , $userOwnInfo['menus']['menu'])) > 0  ) {
                $data['formDefinePermission'] = app($this->flowPermissionService)->verifyFormSettingPermission( $formId ,$userOwnInfo);
           }
           // 获取节点表单run信息
           if (isset($formTemplateRuleInfo['run']) && !empty($formTemplateRuleInfo['run'])) {
                $template = app($this->flowFormTemplateRuleRepository)->getDetail($formTemplateRuleInfo['run'] , false , ['template_id']);
                $data['template_id'] = isset($template->template_id) ? $template->template_id :'';
           }

        }
        return $data;
    }

    /**
     * 过滤节点的编辑权限
     * @param  [type] $filterParam [description]
     * @return [type]              [description]
     */
    public function filterFlowNodeOperation($filterParam)
    {
        $nodeOperation = $filterParam["node_operation"] ?? [];
        if (empty($nodeOperation)) {
            return $nodeOperation;
        }

        // 哪里调用的这个筛选，可选值 new handle view
        $filterForm = $filterParam["filter_form"] ?? "";
        $filterFromExtra = $filterParam["filter_from_extra"] ?? ""; // 新建页面导入历史流程、导入表单模板场景
        $formId = $filterParam["form_id"] ?? "";
        $flowType = $filterParam["flow_type"] ?? "";
        $hostFlag = $filterParam["hostFlag"] ?? "";
        $flowSubmitStatus = $filterParam["flowSubmitStatus"] ?? "";
        // 取表单控件id对应控件类型
        $formControlTypeInfo = app($this->flowRunService)->getFlowFormControlStructure(["form_id" => $formId]);
        $dataTemplate = $filterParam["data_template"] ?? "";

        foreach ($nodeOperation as $key => $operationItem) {
            $controlType = $formControlTypeInfo[$key] ?? "";
            if (($controlType == "upload" && strpos($key, 'DATA_') !== false) || ($controlType == "" && $key == "attachment")) {
                if ($flowType == "2") {
                    // 新建页面 自由流程，增加所有操作权限
                    if ($filterForm == "new") {
                        if (array_search("attachmentUpload", $operationItem) === false) {
                            array_push($operationItem, "attachmentUpload");
                        }
                        if (array_search("attachmentDelete", $operationItem) === false) {
                            array_push($operationItem, "attachmentDelete");
                        }
                        if (array_search("attachmentDownload", $operationItem) === false) {
                            array_push($operationItem, "attachmentDownload");
                        }
                        if (array_search("attachmentView", $operationItem) === false) {
                            array_push($operationItem, "attachmentView");
                        }
                        if (array_search("attachmentEdit", $operationItem) === false) {
                            array_push($operationItem, "attachmentEdit");
                        }
                    } else if ($filterForm == "handle" || $filterForm == "view") {
                        // 办理
                        // 1、自由流程，主办人，必填是设置的，其他的要全都有
                        // 2、自由流程，经办人，拥有的权限：下载 查看 ；没有的权限：上传 删除 编辑
                        // 查看页面
                        // 1、自由流程，主办人&经办人，拥有的权限：下载 查看 ；没有的权限：上传 删除 编辑
                        if ($flowSubmitStatus == "host" && $filterForm == "handle") {
                            // 主办人，必填是设置的，其他的要全都有
                            if (array_search("attachmentUpload", $operationItem) === false) {
                                array_push($operationItem, "attachmentUpload");
                            }
                            if (array_search("attachmentDelete", $operationItem) === false) {
                                array_push($operationItem, "attachmentDelete");
                            }
                            if (array_search("attachmentDownload", $operationItem) === false) {
                                array_push($operationItem, "attachmentDownload");
                            }
                            if (array_search("attachmentView", $operationItem) === false) {
                                array_push($operationItem, "attachmentView");
                            }
                            if (array_search("attachmentEdit", $operationItem) === false) {
                                array_push($operationItem, "attachmentEdit");
                            }
                        } else {
                            // 经办人，下载 查看 要有，上传 删除 编辑 要没有
                            if (array_search("attachmentDownload", $operationItem) === false) {
                                array_push($operationItem, "attachmentDownload");
                            }
                            if (array_search("attachmentView", $operationItem) === false) {
                                array_push($operationItem, "attachmentView");
                            }
                            if (array_search("attachmentUpload", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentUpload", $operationItem), 1);
                            }
                            if (array_search("attachmentDelete", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentDelete", $operationItem), 1);
                            }
                            if (array_search("attachmentEdit", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentEdit", $operationItem), 1);
                            }
                            if (array_search("required", $operationItem) !== false) {
                                array_splice($operationItem, array_search("required", $operationItem), 1);
                            }
                        }
                    }
                } else if ($flowType == "1") {
                    if ($filterForm == "new") {
                        // 新建页面，固定流程，按照设置来；附件如果未保存，可以删除（由附件控件自己控制）
                        // 新建页面导入历史流程、导入表单模板场景，附件仅保留查看权限
                        if (in_array($filterFromExtra, ['import_history', 'import_template'])) {
                            if (array_search("attachmentUpload", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentUpload", $operationItem), 1);
                            }
                            if (array_search("attachmentDownload", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentDownload", $operationItem), 1);
                            }
                            if (array_search("attachmentDelete", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentDelete", $operationItem), 1);
                            }
                            if (array_search("attachmentEdit", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentEdit", $operationItem), 1);
                            }
                            if (array_search("required", $operationItem) !== false) {
                                array_splice($operationItem, array_search("required", $operationItem), 1);
                            }
                        }
                    } else if ($filterForm == "handle") {
                        // 办理页面
                        // 3、固定流程，主办人，按照设置来；附件如果未保存，可以删除（由附件控件自己控制）。
                        // 4、固定流程，经办人，按照设置来；且排除权限：上传 删除 编辑 必填
                        if ($flowSubmitStatus == "host") {
                        } else {
                            if (array_search("attachmentUpload", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentUpload", $operationItem), 1);
                            }
                            if (array_search("attachmentDelete", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentDelete", $operationItem), 1);
                            }
                            if (array_search("attachmentEdit", $operationItem) !== false) {
                                array_splice($operationItem, array_search("attachmentEdit", $operationItem), 1);
                            }
                            if (array_search("required", $operationItem) !== false) {
                                array_splice($operationItem, array_search("required", $operationItem), 1);
                            }
                        }
                    } else if ($filterForm == "view") {
                        // 查看页面
                        // 固定流程，主办人&经办人，按照设置来；且排除权限： 上传 删除 编辑 必填
                        if (array_search("attachmentUpload", $operationItem) !== false) {
                            array_splice($operationItem, array_search("attachmentUpload", $operationItem), 1);
                        }
                        if (array_search("attachmentDelete", $operationItem) !== false) {
                            array_splice($operationItem, array_search("attachmentDelete", $operationItem), 1);
                        }
                        if (array_search("attachmentEdit", $operationItem) !== false) {
                            array_splice($operationItem, array_search("attachmentEdit", $operationItem), 1);
                        }
                        if (array_search("required", $operationItem) !== false) {
                            array_splice($operationItem, array_search("required", $operationItem), 1);
                        }
                    }
                }
            }
            // 20200831,zyx,对电子签章控件，在表单数据模板设置时处理成不能编辑状态
            if (
                ($controlType == "electronic-signature") &&
                ($filterForm == 'new') &&
                ($dataTemplate == "new")
            ) {
                $tempKey = array_search("edit", $operationItem);
                if ($tempKey !== false) {
                    unset($operationItem[$tempKey]);
                }
            }
            // 一级明细column的required权限需要过滤掉
            if ($controlType == "column") {
                $tempKey = array_search("required", $operationItem);
                if ($tempKey !== false) {
                    unset($operationItem[$tempKey]);
                }
            }
            // 新建页面，导入历史流程、导入表单模板场景，将所有控件的编辑权限去掉
            if (
                ($filterForm == 'new') &&
                in_array($filterFromExtra, ['import_history', 'import_template'])
            ) {
                $tempKey = array_search("edit", $operationItem);
                if ($tempKey !== false) {
                    unset($operationItem[$tempKey]);
                }
            }
            $operationItem = array_values($operationItem);
            $nodeOperation[$key] = $operationItem;
        }

        return $nodeOperation;
    }

    /**
     * 【流程办理页面】 获取流程办理页面的主体部分所需数据，办理模式
     * 传入user_id，当前用户必然是参与了此流程，才能进入办理页面
     *
     * @method getFlowHandlePageFlowRunInfo
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function getFlowHandlePageFlowRunInfo($runId, $data ,$isConcurrentFlow = null)
    {
        $currentUser = $data["user_id"];
        $data["getType"] = "simple";
        if ($flowRunInfoObject = $data['flow_run_info'] ?? app($this->flowRunRepository)->getFlowRunningInfo($runId, $data)) {
            $flowRunInfo = $flowRunInfoObject->toArray();
            $flowTypeObject = $flowRunInfoObject->FlowRunHasOneFlowType;
            // 组织数据
            $returnData = [];
            $returnData["runName"] = $flowRunInfo["run_name"];
            $returnData["runNameHtml"] = $flowRunInfo["run_name_html"];
            $returnData["runSeq"] = $flowRunInfo["run_seq"];
            $returnData["instancyType"] = $flowRunInfo["instancy_type"];
            $returnData["creator"] = $flowRunInfo["creator"];
            $returnData["create_time"] = $flowRunInfo["create_time"];
            $returnData["linkDoc"] = $flowRunInfo["link_doc"];
            $returnData["currentStep"] = $flowRunInfo["current_step"];
            $maxProcessId = $flowRunInfo["max_process_id"];
            $returnData["maxProcessId"] = $maxProcessId;
            $flowId = $flowRunInfo["flow_id"];
            $lastFlowRunProcessInfo = collect($flowRunInfo["flow_run_has_many_flow_run_process"])->last();
            // 最大步骤对应的节点
            $returnData["maxFlowProcess"] = app($this->flowRunProcessRepository)->getFieldValue('flow_process',['run_id'=>[$flowRunInfo["run_id"]],'process_id'=>[$flowRunInfo["max_process_id"]]]);
            $returnData['flowInfoForFlowNameRulse'] = [];
            $returnData['flowInfoForFlowNameRulse']['flow_id'] = $flowId;
            $returnData['flowInfoForFlowNameRulse']['flow_name'] = $flowRunInfo['flow_run_has_one_flow_type']["flow_name"];
            $returnData['flowInfoForFlowNameRulse']['form_id'] = $flowRunInfo['flow_run_has_one_flow_type']['flow_type_has_one_flow_form_type']["form_id"];
            $returnData['flowInfoForFlowNameRulse']['form_name'] = $flowRunInfo['flow_run_has_one_flow_type']['flow_type_has_one_flow_form_type']["form_name"];
            $returnData['flowInfoForFlowNameRulse']['flow_type_name'] = $flowRunInfo['flow_run_has_one_flow_type']['flow_type_belongs_to_flow_sort']['title'] ?? '';;
            $returnData['flowInfoForFlowNameRulse']['flow_type_id'] = $flowRunInfo['flow_run_has_one_flow_type']['flow_sort'];
            $returnData['flowInfoForFlowNameRulse']['date'] = $this->getFlowNameRulesDateDatas();
            $flow_run_has_many_flow_run_process = $flowRunInfo["flow_run_has_many_flow_run_process"];
            $currentUserJoinInfo = [];
            $currentUserAtMaxProcessInfo = [];
            $userHostFlagRecord = [];
            // 获取当前人员参与的此流程的信息
            foreach ($flow_run_has_many_flow_run_process as $value_process) {
                if ($value_process['user_run_type'] == '1') {
                    // 记录用户未提交状态里办理人身份，如果某节点上有主办人身份的未办理状态，以主办人身份办理
                    if (empty($userHostFlagRecord[$value_process['user_id'].'_'.$value_process['process_id']]) && ($value_process['transact_time'] == '0000-00-00 00:00:00' || $value_process['transact_time'] == null)) {
                        $userHostFlagRecord[$value_process['user_id'].'_'.$value_process['process_id']] = $value_process['host_flag'];
                    }
                    if ($data['flow_run_process_id'] == $value_process["flow_run_process_id"]) {
                        $currentUserJoinInfo = $value_process;
                    }
                    if ($value_process['user_id'] == $currentUser) {
                        if (empty($currentUserAtMaxProcessInfo['process_id'])) {
                            $currentUserAtMaxProcessInfo = $value_process;
                        } else if ($currentUserAtMaxProcessInfo['host_flag'] == '0') {
                            $currentUserAtMaxProcessInfo = $value_process;
                        }
                    }
                }
            }
            if (empty($currentUserJoinInfo)) {
                $currentUserJoinInfo = $currentUserAtMaxProcessInfo;
                $returnData['flow_run_process_id'] = $data['flow_run_process_id'] = $currentUserAtMaxProcessInfo['flow_run_process_id'] ?? 0;
            }
            if (count($currentUserJoinInfo)) {
                $currentUserJoinInfo['host_flag'] = $userHostFlagRecord[$currentUserJoinInfo['user_id'].'_'.$currentUserJoinInfo['process_id']] ?? 0;
                $processId = $currentUserJoinInfo["process_id"];
                $hostFlag = $currentUserJoinInfo["host_flag"];
                $flowProcess = $currentUserJoinInfo["flow_process"];
                $userRunType = $currentUserJoinInfo["user_run_type"];
                $originProcessId = $currentUserJoinInfo['origin_process_id'];
                $flowProcessInfo = $currentUserJoinInfo['flow_run_process_has_one_flow_process'];
                // 获取当前步骤
                // 序号
                $orderNo = app($this->flowRunService)->getTargetStepsOrderNo($currentUserJoinInfo['flow_serial'], $currentUserJoinInfo['branch_serial'], $currentUserJoinInfo['process_serial']);
                // if ($currentUserJoinInfo['process_type'] == 'free' && $currentUserJoinInfo['free_process_step']) {
                //     $returnData['current_steps'] = $orderNo . ': ' . app($this->flowRunService)->getFreeProcessName($currentUserJoinInfo['run_id'], $currentUserJoinInfo['flow_process'], $currentUserJoinInfo['free_process_step']);
                // } else {
                //     $returnData['current_steps'] = $orderNo . ': ' . $flowProcessInfo["process_name"];
                // }
                if ($flowTypeObject->flow_type == 1) {
                    if ($currentUserJoinInfo['process_type'] == 'free' && $currentUserJoinInfo['free_process_step']) {
                        $returnData['current_steps'] = $orderNo . ': ' . app($this->flowRunService)->getFreeProcessName($currentUserJoinInfo['run_id'], $currentUserJoinInfo['flow_process'], $currentUserJoinInfo['free_process_step']);
                    } else {
                        $returnData['current_steps'] = $orderNo . ': ' . $flowProcessInfo["process_name"];
                    }
                } else {
                    $returnData['current_steps'] = $orderNo;
                }

                $returnData["processId"] = $processId;
                $returnData["hostFlag"] = $hostFlag;
                $returnData["flowProcess"] = $flowProcess;
                $returnData['flowSerial'] = $currentUserJoinInfo["flow_serial"];
                if ($userRunType != "1") {
                    // 判断是否为自动提交
                    if ($currentUserJoinInfo['system_submit'] == 1 && $currentUserJoinInfo['host_flag'] == 0) {
                        return ['code' => ['0x030182', 'flow']];
                    }
                    if (!empty($currentUserJoinInfo['overhandle_time']) && $currentUserJoinInfo['overhandle_time'] != '0000-00-00 00:00:00') {
                         return ['code' => ['already_overtime_submit', 'flow']]; // 已被超时办理
                    }
                    // 此流程已经办理
                    return ['code' => ['0x030006', 'flow']];
                }
            } else {
                // 没有此流程的办理权限
                return ['code' => ['0x030022', 'flow']];
            }
            // 退回相关信息
            $returnData["isBack"] = '';
            // 可委托标识
            $returnData["entrustFlag"] = 1;
            // 记录第一步骤的主办人，用于判断删除权限，被委托的主办人也有删除权限
            $returnData["first_process_host_user"] = $flowRunInfo["creator"];
            // flowType
            $flowTypeInfo = $flowRunInfo["flow_run_has_one_flow_type"];
            $flowType = $flowTypeInfo["flow_type"];
            $returnData["flowType"] = $flowType;
			/*
            if (!empty($currentUserJoinInfo["by_agent_id"])) {
                // 办理人已经是被委托的人的不允许再委托
                $returnData["entrustFlag"] = 0;
            }
            $returnData["isBack"] = $currentUserJoinInfo["is_back"];
            $returnData["sendBackProcess"] = $currentUserJoinInfo["send_back_process"];
            $returnData["sendBackUser"] = $currentUserJoinInfo["send_back_user"];
            $returnData["sendBackProcessStep"] = $currentUserJoinInfo["send_back_free_step"];
            $hostFlag = $currentUserJoinInfo["host_flag"];

            if ($currentUserJoinInfo["process_id"] == '1' && $currentUserJoinInfo["host_flag"] == '1' && $currentUserJoinInfo["user_id"] != $flowRunInfo["creator"]) {
                $returnData["first_process_host_user"] = $currentUserJoinInfo["user_id"];
			*/
            foreach ($flow_run_has_many_flow_run_process as $value_process) {
                if ($processId == $value_process["process_id"] && $value_process["user_id"] == $currentUser && !empty($value_process["by_agent_id"])) {
                    // 办理人已经是被委托的人的不允许再委托
                    $returnData["entrustFlag"] = 0;
                }
                if (
                    $returnData["entrustFlag"] &&
                    ($processId == $value_process["process_id"]) &&
                    ($flowType == '1' && $value_process['flow_run_process_has_one_flow_process']['process_entrust'] == 2) // 节点设置不允许委托
                ) {
                    $returnData["entrustFlag"] = 0;
                }
                if ($value_process["process_id"] == $maxProcessId && $value_process["user_id"] == $currentUser) {
                    $returnData["isBack"] = $value_process["is_back"];
                    $returnData["sendBackProcess"] = $value_process["send_back_process"];
                    $returnData["sendBackUser"] = $value_process["send_back_user"];
                    $returnData["sendBackProcessStep"] = $value_process["send_back_free_step"];
                    $returnData["sendBackUserStatus"] = 1;
                    // 判断用户是否已经离职
                    if ($returnData["isBack"] == 1 ) {
                        // 如果是监控提交那此时获取的是监控人，而不是上一节点主办人
                        $monitor_user_id = app($this->flowRunProcessRepository)->entity->where('run_id' ,$runId )->where('process_id' ,$maxProcessId -1)->where('monitor_submit',$returnData["sendBackUser"])->where('host_flag' , 1)->pluck('user_id')->toArray();
                        if (!empty($monitor_user_id)) {
                            $notMonitorSendBackUser = $monitor_user_id[0];
                        } else {
                            $notMonitorSendBackUser =  $returnData["sendBackUser"];
                        }
                        $status =app($this->userSystemInfoRepository)->getDetail($notMonitorSendBackUser , false , ['user_status']);
                        if ($status) {
                           $returnData["sendBackUserStatus"] =  $status->user_status;
                        }
                    }
                }
                if ($value_process["process_id"] == '1' && $value_process["host_flag"] == '1' && $value_process["user_id"] != $flowRunInfo["creator"]) {
                    $returnData["first_process_host_user"] = $value_process["user_id"];
                }
            }

			if ($isConcurrentFlow){
				$hostFlag = $returnData["hostFlag"];
            }
            $returnData['isConcurrentFlow'] = $isConcurrentFlow;
            // 固定流程若可委托，获取节点设置继续判断可委托标识
            // if ($flowType == '1' && $returnData["entrustFlag"] == 1) {
            //     $flowRunHasManyFlowRunStep = $flowRunInfo['flow_run_has_many_flow_run_step'];
            //     foreach ($flowRunHasManyFlowRunStep as $flowRunStepValue) {
            //         $processEntrust = $flowRunStepValue['flow_run_process_has_one_flow_process']['process_entrust'] ?? null;
            //         if ($processId == $flowRunStepValue['process_id'] && $processEntrust == 2) {
            //             // 节点设置为了不允许委托
            //             $returnData["entrustFlag"] = 0;
            //         }
            //     }
            // }
            // node_id
            $returnData["canEditFlowno"] = $flowTypeInfo["can_edit_flowno"];
            $returnData["canEditFlowname"] = $flowTypeInfo["can_edit_flowname"];
            $returnData["flowNameRules"] = ($flowTypeInfo["flow_name_rules"] == '[]') ? '' : $flowTypeInfo["flow_name_rules"];
            $returnData["flowNameRulesHtml"] = ($flowTypeInfo["flow_name_rules"] == '[]') ? '' : $flowTypeInfo["flow_name_rules_html"];
            //解析标题规则是否含有表单控件
            $hasFormData = [];
            if (!empty($flowTypeInfo['flow_name_rules'])) {
                $flowNameRulesInfo = json_decode($flowTypeInfo['flow_name_rules'], true);
                foreach ($flowNameRulesInfo as $_rules) {
                    if ($_rules['type'] == 'formData') {
                        $hasFormData[] = $_rules['control_id'];
                    }
                }
            }
            $returnData["flow_name_rules_has_form_data"] = $hasFormData;
            $returnData["formId"] = $flowTypeInfo["form_id"];
            $returnData["openDebug"] = $flowTypeInfo["open_debug"];
            if ($flowType == "2") {
                $handleWay = $flowTypeInfo["handle_way"];
                $returnData["handleWay"] = $handleWay;
                $returnData["countersign"] = $flowTypeInfo["countersign"];
                $returnData["pressAddHour"] = $flowTypeInfo["press_add_hour"];
                $returnData["overtime_except_nonwork"] = $flowTypeInfo["overtime_except_nonwork"];
                if ($processId == "1") {
                    $returnData["headNodeToggle"] = "1";
                } else {
                    $returnData["headNodeToggle"] = "0";
                }
                $returnData["node_operation"] = app($this->flowRunService)->getFlowFormControlOperation(["formId" => $returnData["formId"], "flowId" => $flowId, "headNodeToggle" => $returnData["headNodeToggle"]]);
                $returnData["control_operation_condition"] = app($this->flowRunService)->getFlowFormControlOperationCondition(["formId" => $returnData["formId"], "flowId" => $flowId, "headNodeToggle" => $returnData["headNodeToggle"]]);
            } else if ($flowType == "1") {
                $flowProcessInfo = $currentUserJoinInfo["flow_run_process_has_one_flow_process"];
                if (count($flowProcessInfo)) {
                    $handleWay = $flowProcessInfo["process_transact_type"];
                    $returnData["handleWay"] = $handleWay;
                    $returnData["countersign"] = $flowProcessInfo["process_concourse"];
                    $returnData["nodeId"] = $flowProcessInfo["node_id"];
                    $returnData["flowOutmail"] = $flowProcessInfo["flow_outmail"];
                    $returnData["processForward"] = $flowProcessInfo["process_forward"];
                    $returnData["processCopy"] = $flowProcessInfo["process_copy"];
                    $returnData["endWorkflow"] = $flowProcessInfo["end_workflow"];
                    // 分支上的除了合并节点，其他节点暂不支持结束功能，即使节点设置了允许结束也不行
                    if (!empty($currentUserJoinInfo['branch_serial'] && empty($flowProcessInfo['merge'])) ) {
                        $returnData["endWorkflow"] = 0;
                    }
                    $returnData["headNodeToggle"] = $flowProcessInfo["head_node_toggle"];
                    $returnData["processDescript"] = $flowProcessInfo["process_descript"];
                    $returnData["flowDataValidToggle"] = $flowProcessInfo["flow_data_valid_toggle"] ?? 0;
                    $returnData["trigger_all_son_flows"] = $flowProcessInfo["trigger_all_son_flows"];
                    $returnData["sun_flow_toggle"] = $flowProcessInfo["sun_flow_toggle"];
                    // $nodeInfo = $this->getFlowNodeInfo($flowProcessInfo["node_id"]);
                    $returnData['trigger_son_flow_back'] = $flowProcessInfo['trigger_son_flow_back'] ?? 1;
                    $returnData["processType"] = $flowProcessInfo["process_type"];
                    $returnData["freeProcessStep"] = $returnData["processType"] == 'free' ? app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$flowProcess) : 0;
                    $returnData["freeProcessNextStep"] = $returnData["processType"] == 'free' ? app($this->flowRunService)->getMaxFreeNodeStep($runId,$flowProcess) : 0;
                    if ($returnData["freeProcessNextStep"] != 0) {
                        $returnData["freeProcessNextStep"] = $returnData["freeProcessStep"] +1;
                    }
                    $returnData["node_operation"] = [];
                    $returnData["node_operation"] = app($this->flowRunService)->getFlowFormControlOperation(["formId" => $returnData["formId"], "node_id" => $flowProcessInfo["node_id"]]);
                    $returnData["control_operation_condition"] = app($this->flowRunService)->getFlowFormControlOperationCondition(["formId" => $returnData["formId"], "node_id" => $flowProcessInfo["node_id"]]);
                    // 如果设置了必填，则重置必填信息
                    if(isset($flowProcessInfo['process_type']) && $flowProcessInfo['process_type'] == 'free') {
                        // 获取预设节点信息
                        $returnData["free_preset_info"] = app($this->flowProcessFreePresetRepository)->getList($flowProcess);
                        // 获取自由节点设置信息
                        $freeProcessInfo = $this->getFlowFreeNodeRunInfo($flowProcess, $runId);
                        $returnData["run_preset_process_list"] = $freeProcessInfo['list'];
                        $returnData["max_free_process"] = $freeProcessInfo['max_process_id'];
                        // 自由节点必填处理
                        if ($returnData["freeProcessStep"]) {
                            // 获取当前自由节点必填设置
                            $freeProcessInfo = $this->getFlowFreeNodeInfo($flowProcess);
                            $freeControlOperation = [];
                            if (isset($freeProcessInfo['can_set_required']) && $freeProcessInfo['can_set_required'] ==2) {
                                $freeProcessRunInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$flowProcess,$returnData["freeProcessStep"]);
                                if ($freeProcessRunInfo) {
                                    $requiredInfo = $freeProcessRunInfo->required_control_id;
                                    if ($requiredInfo) {
                                        // 以自由节点内部设置的必填信息为主，附加上字段控制内容
                                        $freeControlOperation = explode(',',$requiredInfo);
                                        foreach ($freeControlOperation as $controlId) {
                                            if (!isset($returnData["node_operation"][$controlId])) {
                                                $returnData["node_operation"][$controlId] = [];
                                            }

                                            if (!in_array('edit', $returnData["node_operation"][$controlId])) {
                                                array_push($returnData["node_operation"][$controlId], 'edit');
                                            }
                                            if (!in_array('required', $returnData["node_operation"][$controlId])) {
                                                array_push($returnData["node_operation"][$controlId], 'required');
                                            }
                                            if (!in_array('attachmentUpload', $returnData["node_operation"][$controlId])) {
                                                array_push($returnData["node_operation"][$controlId], 'attachmentUpload');
                                            }

                                            // 为明细父级增加编辑权限
                                            $explode_key = explode('_',$controlId);
                                            if(count($explode_key) == 3) {
                                                $parent_key = $explode_key[0].'_'.$explode_key[1];
                                                if (!isset($returnData["node_operation"][$parent_key])) {
                                                    $returnData["node_operation"][$parent_key] = [];
                                                }
                                                if (!in_array('edit', $returnData["node_operation"][$parent_key])) {
                                                    array_push($returnData["node_operation"][$parent_key], 'edit');
                                                }
                                            }

                                        }
                                    }

                                }
                            }
                        }
                    }
                    $returnData["pressAddHour"] = $flowProcessInfo["press_add_hour"];
                    $returnData["overtime_except_nonwork"] = $flowProcessInfo["overtime_except_nonwork"];
                    //不是首节点流程标题不可编辑
                    if ($flowProcessInfo["head_node_toggle"] != 1) {
                        $returnData["canEditFlowname"] = 0;
                    }
                } else {
                    // 定义流程数据错误，请联系系统管理员检查！
                    return ['code' => ['0x030023', 'flow']];
                }
                // 判断子流程是否办理完毕，进而判断父流程是否可以流转
                if ($processId > 1) {
                    $sonFlowEndParam = [
                        "run_id" => $runId,
                        "process_id" => $processId - 1,
						"flow_process" => $flowProcess
                    ];
                    $returnData["sonFlowUnfinished"] = app($this->flowRunService)->getUnfinishedSunflowList($sonFlowEndParam);
                }
            }
            // flow_others
            if ($flowTypeInfo["flow_type_has_one_flow_others"]) {
                $flowOthersInfo = $flowTypeInfo["flow_type_has_one_flow_others"];
                $submitWithoutDialog = $flowOthersInfo["submit_without_dialog"];
                // 统一处理返回flow_others设置
                $flowOthersSetting = app($this->flowParseService)->parseFlowOthersSetting($flowOthersInfo);
                $returnData = array_merge($returnData, $flowOthersSetting);
            } else {
                // 定义流程-其他设置数据错误，请联系系统管理员检查！
                return ['code' => ['define_worlflow_other_set_data_error', 'flow']];
            }
            // 混合条件，判断是主办人提交还是经办人提交；在需要的时候设置主办人
			$concurrentNodeId = 0;

			$concurrentNodeId = $currentUserJoinInfo['concurrent_node_id'];

            $statusParam = [
                "processId" => $processId,
                "maxProcessId" => $maxProcessId,
                "hostFlag" => $hostFlag,
                "handleWay" => $handleWay,
                "runId" => $runId,
            	"flowProcess" => $flowProcess,
            	"concurrentNodeId" => $concurrentNodeId,
				"userId" => $data["user_id"]
            ];
            $handleTypeInfo = $this->decideFlowSubmitStatus($statusParam);
            if ($handleTypeInfo && $handleTypeInfo["needSetHost"] == "true") {
                // 当前人员是最新步骤，且，当前流程没有主办人，且，是前三种办理方式；此时，需要设置主办人
                $setHostFlagParam = [
                    "user_id" => $currentUser,
                    "flow_process" => $flowProcess,
                    "process_id" => $processId,
                    "handle_way" => $handleWay,
                    "run_id" => $runId,
                ];
                $result = app($this->flowRunService)->setHostFlag($setHostFlagParam);
                if ($result == "1") {
                    // 当前人员被成功设置成主办人
                    $returnData["flowSubmitStatus"] = "host";
                    $returnData["hostFlag"] = "1";
                    $returnData["opFlagIsExistResult"] = "1";
                } else {
                    $returnData["flowSubmitStatus"] = "handle";
                    $returnData["hostFlag"] = "0";
                    $returnData["opFlagIsExistResult"] = "0";
                }
            } else {
                // 主办人已确定
                $returnData["flowSubmitStatus"] = $handleTypeInfo["handleType"];
                $returnData["opFlagIsExistResult"] = $handleTypeInfo["opFlagIsExistResult"];
            }
            // 取到主办人/经办人提交之后，判断不选人提交
            $submitWithoutDialogParam = [
                "flowType" => $flowType,
                "submitWithoutDialog" => $submitWithoutDialog,
                "flowSubmitStatus" => $returnData["flowSubmitStatus"],
                "flowProcess" => $flowProcess,
                "runId" => $runId,
                "currentUser" => $currentUser,
                "processId" => $processId,
                "flowId" => $flowRunInfo["flow_id"],
                // 用来判断第四种办理方式&会签的时候，不选人提交
                "handleWay" => $handleWay,
                "opFlagIsExistResult" => $returnData["opFlagIsExistResult"],
                "flow_run_info" => $data['flow_run_info'] ?? $flowRunInfoObject,
                "flow_type_info" => $flowTypeObject,
                "free_process_step" => $returnData["freeProcessStep"] ?? 0
            ];
            // $submitWithoutDialogResult = $this->verifySubmitWithoutDialog($submitWithoutDialogParam);
            $submitWithoutDialogResult = [];
            $returnData["submitWithoutDialog"] = $submitWithoutDialogResult;
            // 按照并发分支查看/办理时更新用户状态的逻辑，需要获取用户所在每个步骤节点的来源步骤
            $originProcessIdsArr = app($this->flowParseService)->getOriginProcessIdsWithUserId($flow_run_has_many_flow_run_process, $currentUser);
            // 查看/办理页面初始化的时候，当前人员接收流程
            $this->saveReceiveFlowRun($runId, ["user_id" => $currentUser, "process_id" => $processId , "flow_process" => $flowProcess, 'origin_process_id' => $originProcessId, "origin_process_id_arr" => $originProcessIdsArr]);
            // 查看/办理页面初始化的时候，记录最后查看时间
            $this->saveLastVisitdTime($runId, ["user_id" => $currentUser, "process_id" => $processId]);
            // 页面初始化的时候，处理被抄送人查看流程，标记查看时间
            $this->saveFlowCopyReceive($runId, $flowId, ["user_id" => $currentUser]);
            // 关联 $systemSecurityService 获取"工作流办理时流程表单自动保存频率"
            $autoSaveFrequency = app($this->flowSettingService)->getFlowSettingsParamValueByParamKey("form_refresh_frequency");
            $returnData["form_refresh_frequency"] = $autoSaveFrequency;
            // 获取公共附件
            $flowAttachments = app($this->attachmentService)->getAttachmentIdsByEntityId(['entity_table' => 'flow_run', 'entity_id' => ["run_id" => [$runId]]]);
            $returnData["attachments"] = $flowAttachments;
            // 取流程图需要的信息--设置办理人/记录查看时间后再获取流程图数据
            // $flowRunningInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId,[]);
            // $flowRunningInfo = $flowRunningInfo->toArray();
            // $returnData["flow_run_has_many_flow_copy"] = $flowRunningInfo["flow_run_has_many_flow_copy"];
            // 办理流程页面，过滤 node_operation
            $filterParam = [
                "filter_form" => "handle",
                "form_id" => $returnData["formId"],
                "flow_type" => $returnData["flowType"],
                "hostFlag" => $returnData["hostFlag"],
                "flowSubmitStatus" => $returnData["flowSubmitStatus"],
                "node_operation" => isset($returnData["node_operation"]) ? $returnData["node_operation"] : [],
            ];
            $returnData["node_operation"] = $this->filterFlowNodeOperation($filterParam);
            $returnData["run_id"] = $runId;
            $returnData["flow_id"] = $flowRunInfo["flow_id"];
            // 如果是自由节点 判断其所在位置，
            // 重置字段控制信息
            /**
             * 办理流程页面解析pageMain数据的时候，调用契约锁service的解析函数，解析此流程是否已经关联契约锁
             * 如果关联了契约锁设置，那么修改 node_operation ，让页面对应的附件控件出现签署等按钮
             */
            $returnData = app($this->qiyuesuoService)->parseFlowRunRelationQysSetting($returnData);
            return $returnData;
            // return $flowRunInfo;
        } else {
            // 流程不存在
            return ['code' => ['0x030001', 'flow']];
        }
    }

    /**
     * 取到主办人/经办人提交之后，判断不选人提交
     * 20181213以前，这函数由flowService内部调用，在新建和办理页面初始化的时候获取不选人提交判断
     * 20181213以后，这函数由外部路由调用，在提交/退回按钮点击的时候，判断不选人提交，内部调用注释掉
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function verifySubmitWithoutDialog($param, $userOwnInfo = [])
    {
        $result = [
            "turn" => [
                "flag" => false,
            ],
            "back" => [
                "flag" => false,
            ],
        ];
        $turnSubmitWithoutDialog = false;
        $backSubmitWithoutDialog = false;
        $turnSubmitInfo = "";
        $backSubmitInfo = "";
        // $current_process_info = app($this->flowProcessRepository)->getDetail($param['flowProcess']);
        // 固定流程&主办人提交&设置开启
        if ($param["flowType"] == "1" && $param["submitWithoutDialog"] == "1" && $param["flowSubmitStatus"] == "host") {
            // 判断子流程，有子流程，不能不选人提交
            $sonFlowInfo = $this->getSunflowInfo($param["flowProcess"], 'count');
            // 获取可流出节点
            $getFlowTransactProcessParams = [
                "flow_process" => $param["flowProcess"],
                "run_id" => $param["runId"],
                "flow_id" => $param["flowId"],
                "user_id" => $param["currentUser"],
                "process_id" => $param['processId'] ?? 1,
                'free_process_step'=> $param['free_process_step'] ?? 0
            ];
            if (isset($param['flow_run_info'])) $getFlowTransactProcessParams['flow_run_info'] = $param['flow_run_info'];
            if (isset($param['flow_type_info'])) $getFlowTransactProcessParams['flow_type_info'] = $param['flow_type_info'];
            $processInfo = $this->getFlowTransactProcess($getFlowTransactProcessParams,$userOwnInfo);
            // 自由节点内部提交不需要验证子流程 所以先找出口 再根据情况验证子流程
            // 会签逻辑特殊处理
            // 初始化，不需要会签
            $needConcourse = false;
            if (isset($processInfo["concourse"]) && $processInfo["concourse"] == "concourse" && !isset($param['overtime'])) {
                $handleWay = isset($param["handleWay"]) ? $param["handleWay"] : "";
                $opFlagIsExistResult = isset($param["opFlagIsExistResult"]) ? $param["opFlagIsExistResult"] : "";
                // 其他办理方式 || 第三种办理方式，如果有主办人，提示会签
                // 非第四种办理方式 || 第四种办理方式，如果有主办人，提示会签
                if ($handleWay != "3" || ($handleWay == "3" && $opFlagIsExistResult == "1")) {
                    $needConcourse = true;
                } else {
                    // 需要会签，且可以经办人提交
                    $needConcourse = true;
                }
            }
            //退回后重新提交判断是否设置不验证条件
            $backVerifyCondition = $processInfo['back_verify_condition']?? '1';
            // 会签的时候，不能不选人提交
            // if(!isset($processInfo["concourse"]) && count($processInfo)) {
            if (!$needConcourse && count($processInfo)) {
                // 标识，默认需要弹框
                $turnSubmitWithoutDialog = false;
                $backSubmitWithoutDialog = false;
                $turnSubmitInfo = "";
                $backSubmitInfo = "";
                // 判断固定流程，提交结束
                // 没有其他可以流程节点的时候，可以不选人提交
                if (isset($processInfo["submitEnd"]) && $processInfo["submitEnd"] == "submitEnd") {
                    $turnSubmitWithoutDialog = !(bool)$sonFlowInfo;
                    // 结束的参数
                    $turnSubmitInfo = [
                        "run_id" => $param["runId"],
                        "process_id" => $param["processId"],
                        "process_transact_user" => "",
                        "user_id" => $param["currentUser"],
                        "next_flow_process" => 0,
                        "flow_process" => $param["flowProcess"],
                    ];
                    if (!empty($processInfo['unforcedMergeNodeSubmitted'])) $turnSubmitInfo['unforcedMergeNodeSubmitted'] = 1;
                } else {
                    $turnToEndFlag = "";
		            $canOutletProcessInfoArray = [];
                    // 只有一个前进节点的时候，可以不选人提交，具体需要根据目标节点的办理人来判断
                    // 20181213-循环前进节点，判断出口条件&数据验证，剩下一个节点的时候，可以不选人提交
                    if (isset($processInfo["turn"])) {
                        // if (count($processInfo["turn"]) == 1) {
                        //     $currentProcessInfo = $processInfo["turn"][0];
                        // } else {}
                        $formId = $param['flow_type_info']->form_id ?? app($this->flowRunService)->getFormIdByRunId($param["runId"], true);
                        // 获取流程表单数据
                        $flowFormDataParam = [
                            'status' => 'handle',
                            'runId' => $param["runId"],
                            'formId' => $formId,
                            'flowId' => $param["flowId"],
                            'nodeId' => $param["flowProcess"],
                            'freeProcessStep' => $param['free_process_step'] ??0
                        ];
                        if (isset($param['flow_run_info'])) $flowFormDataParam['flow_run_info'] = $param['flow_run_info'];
                        if (isset($param['flow_type_info'])) $flowFormDataParam['flow_type_info'] = $param['flow_type_info'];
                        $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $userOwnInfo);
                        $parseData = isset($flowFormData['parseData']) ? $flowFormData['parseData'] : [];
                        // 表单结构信息
                        $formStructure = [];
                        if (isset($flowFormData['parseFormStructure']) && !empty($flowFormData['parseFormStructure'])) {
                            foreach ($flowFormData['parseFormStructure'] as $formStructureKey => $formStructureValue) {
                                $formStructure[$formStructureKey] = isset($formStructureValue['control_type']) ? $formStructureValue['control_type'] : '';
                            }
                        }
                        $outletConditionVerifyOtherParams = ['form_structure' => $formStructure, 'user_id' => $param["currentUser"], 'process_id' => $param["processId"]];

                        // 可流出节点多于一个，循环判断出口条件，如果满足出口的节点只有一个，可以不选人提交
                        $canTransactProcessCount = 0;
                        $canOutletProcessInfo = [];
                        foreach ($processInfo['turn'] as $processInfoVerifyConditionKey => $processInfoItem) {
                            // 出口条件验证
                            $outletConditionVerifyFlag = true;
                            $condition = isset($processInfoItem['condition']) ? $processInfoItem['condition'] : '';
                            if (!empty($condition) && $backVerifyCondition==1) {
                                $outletConditionVerifyResult = app($this->flowRunService)->verifyFlowFormOutletCondition($condition, $parseData, $outletConditionVerifyOtherParams);
                                if (!$outletConditionVerifyResult) {
                                    // 验证不通过
                                    $outletConditionVerifyFlag = false;
                                }
                            }
                            if ($outletConditionVerifyFlag) {
                                $canOutletProcessInfo = $processInfoItem;
                                $canTransactProcessCount++;
				                $canOutletProcessInfoArray[$processInfoVerifyConditionKey] = $processInfoItem;
                            }
                        }
                        // 只有一个出口节点，处理方式同上面
                        if ($canTransactProcessCount == 1) {
                            $currentProcessInfo = $canOutletProcessInfo;
                            // 如果这个节点是自由节点的自定义步骤 忽略子流程
                            if (isset($currentProcessInfo['step_id']) && $currentProcessInfo['step_id']) {
                                $turnSubmitInfo = [];
                                $turnSubmitInfo['free_process'] = true;
                                $turnSubmitInfo['free_process_current_step'] = $param['free_process_step'] ?? 0;
                                $turnSubmitInfo['free_process_next_step'] = $currentProcessInfo['step_id'];
                                $sonFlowInfo = [];
                            }
                        } else {
                            $currentProcessInfo = [];
                        }
                        if (isset($currentProcessInfo["node_id"])) {
                            $turnToEndFlag = "turn";
                        } else if (isset($currentProcessInfo["submitEnd"])) {
                            $turnToEndFlag = "end";
                        }
                    } else {
                        $turnToEndFlag = "end";
                    }
                    // 如果点击的是退回按钮，且子流程不为空，还需要判断是否开启了退回触发,如果退回不触发，那不弹框
                    if  (isset($param["submit_type"]) && $param["submit_type"] == 'back' && !empty($sonFlowInfo)) {
                        if ($sonFlowInfo[0]['trigger_son_flow_back'] == 0) {
                            $sonFlowInfo = [];
                        }
                    }

                    if(empty($sonFlowInfo)) {
                        if ($turnToEndFlag == "turn") {
                            $targetVerifyResult = $this->targetProcessVerifyWithoutSelectUser(['free_process_step' => $param['free_process_step'] ?? 0, "flowProcess" => $param["flowProcess"], "runId" => $param["runId"], "flowId" => $param["flowId"], "node_id" => $currentProcessInfo["node_id"], "nodeInfo" => $currentProcessInfo, "userId" => $param["currentUser"], "processId" => $param["processId"], "submit_type" =>$param["submit_type"] ?? '']);
                            $turnSubmitWithoutDialog = $targetVerifyResult["submitWithoutDialog"];
                            $turnSubmitInfo = $targetVerifyResult["submitInfo"];
                            if ($turnSubmitInfo) {
                                //获取出口条件
                                $condition = app($this->flowTermRepository)->getFlowNodeOutletList(['flow_id' => $param["flowId"], 'returntype' => 'object', 'search' => ['source_id' => [$param["flowProcess"]], 'target_id' => [$currentProcessInfo["node_id"]]]])->first();
                                $turnSubmitInfo['condition'] = (empty($condition) || $backVerifyCondition==0 ) ? '' : $condition['condition'];
                            }
                            if (isset($currentProcessInfo['press_add_hour']) && !empty($currentProcessInfo['press_add_hour'])) {
                                    $limit_date = date('Y-m-d H:i:s' , floatval($currentProcessInfo['press_add_hour'])*3600+time());
                                if ($currentProcessInfo['overtime_except_nonwork'] == 1) {
                                    $hostuser = isset($targetVerifyResult["submitInfo"]['process_host_user']) ? $targetVerifyResult["submitInfo"]['process_host_user']:'';
                                    $handleuser = isset($targetVerifyResult["submitInfo"]['process_transact_user']) ? $targetVerifyResult["submitInfo"]['process_transact_user']:'';
                                    $param['users'] =  !empty($hostuser)?  $hostuser:$handleuser ;
                                    if (!empty($param['users'])) {
                                        $param['press_add_hour'] = $currentProcessInfo['press_add_hour'];
                                        $result = $this->getOvertimeBySelectedUser($param);
                                        $limit_date = isset($result['limit_date']) ? $result['limit_date']:$limit_date;
                                    }
                                }
                                $turnSubmitInfo['limit_date'] =  $limit_date;
                            }
                        } else if ($turnToEndFlag == "end") {
                            $turnSubmitWithoutDialog = true;
                            // 结束的参数
                            $turnSubmitInfo = [
                                "run_id" => $param["runId"],
                                "process_id" => $param["processId"],
                                "process_transact_user" => "",
                                "user_id" => $param["currentUser"],
                                "next_flow_process" => 0,
                                "flow_process" => $param["flowProcess"],
                            ];
                        } else if (count($canOutletProcessInfoArray)>1){
                            $targetVerifyResult = app($this->flowParseService)->targetProcessVerifyWithoutSelectUser($param,$canOutletProcessInfoArray);
                            $turnSubmitWithoutDialog = $targetVerifyResult["submitWithoutDialog"];
                            $turnSubmitInfo = $targetVerifyResult["submitInfo"];
                        }
                        if (isset($processInfo['free']) && $processInfo['free'] == 'able' && !isset($param['overtime'])) {
                            $turnSubmitWithoutDialog = false;
                        }
                        if (isset($processInfo['open_debug']) && $processInfo['open_debug'] == 1  && !isset($param['overtime'])) {
                            $turnSubmitWithoutDialog = false;
                        }
                        // 只有一个后退节点的时候，可以不选人提交，具体需要根据目标节点的办理人来判断
                        if (isset($processInfo["back"]) && count($processInfo["back"]) == 1 && !isset($param['overtime']) ) {
                            $currentProcessInfo = $processInfo["back"][0];
                            $targetVerifyResult = $this->targetProcessVerifyWithoutSelectUser(['free_process_step' => $param['free_process_step'] ?? 0, "flowProcess" => $param["flowProcess"], "runId" => $param["runId"], "flowId" => $param["flowId"], "node_id" => $currentProcessInfo["node_id"], "nodeInfo" => $currentProcessInfo, "userId" => $param["currentUser"], "processId" => $param["processId"], "submit_type" =>$param["submit_type"] ?? '']);
                            $backSubmitWithoutDialog = $targetVerifyResult["submitWithoutDialog"];
                            $backSubmitInfo = $targetVerifyResult["submitInfo"];
                            //获取出口条件
                            $condition = app($this->flowTermRepository)->getFlowNodeOutletList(['flow_id' => $param["flowId"], 'returntype' => 'object', 'search' => ['source_id' => [$param["flowProcess"]], 'target_id' => [$currentProcessInfo["node_id"]]]])->first();
                            $backSubmitInfo['condition'] = empty($condition) ? '' : $condition['condition'];
                            if (isset($currentProcessInfo['press_add_hour']) && !empty($currentProcessInfo['press_add_hour'])) {
                                $limit_date = date('Y-m-d H:i:s' , floatval($currentProcessInfo['press_add_hour'])*3600+time());
                                if ($currentProcessInfo['overtime_except_nonwork'] == 1) {
                                    $hostuser = isset($targetVerifyResult["submitInfo"]['process_host_user']) ? $targetVerifyResult["submitInfo"]['process_host_user']:'';
                                    $handleuser = isset($targetVerifyResult["submitInfo"]['process_transact_user']) ? $targetVerifyResult["submitInfo"]['process_transact_user']:'';
                                    if (!empty($hostuser) || !empty($handleuser)) {
                                        $param['users'] =  !empty($hostuser)?  $hostuser:$handleuser ;
                                        $param['press_add_hour'] =  $currentProcessInfo['press_add_hour'];
                                        $result = $this->getOvertimeBySelectedUser($param);
                                        $limit_date = isset($result['limit_date']) ? $result['limit_date']:$limit_date;
                                    }
                                }
                                $backSubmitInfo['limit_date'] =  $limit_date;
                            }
                        }
                    }
                }
            }
            $result = [
                "turn" => [
                    "flag" => $turnSubmitWithoutDialog,
                    "submitInfo" => $turnSubmitInfo,
                ],
                "back" => [
                    "flag" => $backSubmitWithoutDialog,
                    "submitInfo" => $backSubmitInfo,
                ],
            ];
            if (isset($processInfo['maxProcessId']) && isset($param['processId']) && $processInfo['maxProcessId']> $param['processId']) {
				$flowRunProcessDisposeCount = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['process_id' => [$param['processId']], 'run_id' => [$param["runId"]], 'flow_process' => [$param["flowProcess"]],'process_flag' => [3, '>=']] , 'returntype' =>'count']);
                if ($flowRunProcessDisposeCount) {
					$result['isReload'] = 1;
					$flowRunProcessCount = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['process_id' => [$param['processId']], 'run_id' => [$param["runId"]], 'user_id' => [$param["currentUser"]]] , 'returntype' =>'count' , 'whereRaw'   => ["(overhandle_time != '0000-00-00 00:00:00') "]]);
					if ($flowRunProcessCount) {
						$result['already_overtime_submit'] = 1;
					}
				}
            }
			if ($result['turn']['flag'] == true){
				if ($flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($param['runId'],[])) {
					$flowRunInfo = $flowRunInfo->toArray();
					$flowTypeInfo = $flowRunInfo["flow_run_has_one_flow_type"];
					$flowOthersInfo = $flowTypeInfo["flow_type_has_one_flow_others"];
					if (isset($flowOthersInfo['flow_send_back_submit_method']) && $flowOthersInfo['flow_send_back_submit_method'] == 1 && $flowOthersInfo['alow_select_handle'] == 0 && isset($param['free_process_next_step']) && $param['free_process_next_step'] ==1) {
                        $checkIsBack = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$param['runId']], 'process_id' => [$param['processId']], 'is_back' => [1]], 'returntype' => 'count']);
                        if (!$checkIsBack) {
                            $result['turn']['flag'] = false;
                            $result['turn']['submitInfo'] = [];
                        }
					}
				}
			}
        } else if (isset($param["flowType"]) && $param["flowType"] == "2" && isset($param['handleWay']) && $param['handleWay'] == 3) {
            //如果是自由流程的第四种方式，需要判断是否已经流转到下一个节点
            if (isset($param['runId']) && !empty($param['runId']) ) {
                //将该processid与最大processid进行对比
                $runInfo =app($this->flowRunRepository)->getDetail($param['runId'] , false , ['max_process_id']);
                if (isset($param['processId']) && $runInfo->max_process_id > $param['processId'] ) {
                    //此时说明已流转到 下一个节点
                    $result['isReload'] = 1;
                }
            }
        }
		if ($result['turn']['flag'] == false && $param["flowType"] == "1" && $param["flowSubmitStatus"] == "host" && $param["submitWithoutDialog"] == "1" && !$needConcourse){
            // 获取可流出节点
            $getFlowTransactProcessParams = [
                "flow_process" => $param["flowProcess"],
                "run_id" => $param["runId"],
                "flow_id" => $param["flowId"],
                "user_id" => $param["currentUser"],
                "process_id" => $param['processId'] ?? 1,
                'free_process_step'=> $param['free_process_step'] ?? 0
            ];
            $processInfo = $this->getFlowTransactProcess($getFlowTransactProcessParams,$userOwnInfo);
			if(isset($processInfo['isForceMerge']) && !$processInfo['isForceMerge']){
                $turnSubmitInfo = [
                    "run_id" => $param["runId"],
                    "process_id" => $param["processId"],
                    "process_transact_user" => "",
                    "user_id" => $param["currentUser"],
                    "next_flow_process" => 0,
                    "flow_process" => $param["flowProcess"],
                ];
				if(
				    ((isset($processInfo['submitEnd']) && $processInfo['submitEnd'] == 'submitEnd' && empty($processInfo['unforcedMergeNodeSubmitted']))
                        || (isset($processInfo['turn'][0]['submitEnd']) && $processInfo['turn'][0]['submitEnd'] == 'submitEnd'))
                    && empty($processInfo['unforcedMergeNodeSubmitted'])
                    ) {
				    if (!app($this->flowParseService)->isEntireProcessComplete($param["runId"],$param["flowId"],$param["flowProcess"])) {
						$result['turn']['flag'] = true;
						$result['turn']['submitInfo'] = $turnSubmitInfo;
					}
				} else if (
				    (
				        isset($processInfo['submitEnd']) && $processInfo['submitEnd'] == 'submitEnd' || (isset($processInfo['turn'][0]['submitEnd']) && $processInfo['turn'][0]['submitEnd'] == 'submitEnd')
                    )  && !empty($processInfo['unforcedMergeNodeSubmitted'])) {
                    $flowProcessInfo = app($this->flowParseService)->getProcessInfo($param['flowProcess']);
                    // 判断是否有抄送权限，如果没有抄送权限就可以不选人提交，直接将本步骤标记为已提交
                    if (empty($flowProcessInfo['process_copy'])) {
                        $result['turn']['flag'] = true;
                        $turnSubmitInfo['unforcedMergeNodeSubmitted'] = 1;
                        $result['turn']['submitInfo'] = $turnSubmitInfo;
                    }
                }
			}
		}
        return $result;
    }

    public function targetProcessVerifyWithoutSelectUser($param)
    {
        $submitWithoutDialog = true;
        $submitInfo = [];
        // 目标节点信息
        $currentProcessInfo = $param["nodeInfo"];

        if (!isset($currentProcessInfo["process_transact_type"])) {
            $nodeId = $currentProcessInfo["node_id"];
            $_process_info = app($this->flowProcessRepository)->getDetail($nodeId);
            $processTransactType = $_process_info->process_transact_type;
        }else {
            $processTransactType = $currentProcessInfo["process_transact_type"];
        }
        // 目标节点办理人
        $nextPorcessUserInfo = $this->getFixedFlowTransactUser(["flow_process" => $param["flowProcess"], "run_id" => $param["runId"], "flow_id" => $param["flowId"], "target_process_id" => $param["node_id"], "step_id" => $currentProcessInfo["step_id"] ?? '', "submit_type" =>$param["submit_type"] ?? '']);
        $hostUser = "";
        $transactUser = "";
        // 判断主办人是否离职
        if (isset($nextPorcessUserInfo['host_leave']) && $nextPorcessUserInfo['host_leave']) {
                    $submitWithoutDialog = false;
        }
        // 如果是对象先转换成数组去重
        if (isset($nextPorcessUserInfo["scope"]["user_id"]) && is_object($nextPorcessUserInfo["scope"]["user_id"])) {
            $nextPorcessUserInfo["scope"]["user_id"] = $nextPorcessUserInfo["scope"]["user_id"]->toArray();
        }
        // 只有一个办理人
        if (isset($nextPorcessUserInfo["scope"]["user_id"]) && $nextPorcessUserInfo["scope"]["user_id"] != "ALL" && $nextPorcessUserInfo["scope"]["user_id"] && count(array_unique($nextPorcessUserInfo["scope"]["user_id"])) == 1) {
            $hostUser = $nextPorcessUserInfo["scope"]["user_id"][0];
            $transactUser = $nextPorcessUserInfo["scope"]["user_id"][0];
        } else {
            // 这里这样写是为了容错，9.0设置默认办理人的时候，要求必须设置默认主办人，注意!
            // 超过一个办理人
            $defaultHostUser = $nextPorcessUserInfo["default"]["host"]["user_id"] ?? [];
            $defaultHandleUser = [];
            $defaultHandleUser = $nextPorcessUserInfo["default"]["handle"]["user_id"] ?? [];
            if(!is_array($defaultHandleUser)) {
                $defaultHandleUser = $defaultHandleUser->toArray();
            }

            // 有多个办理人的时候 1 可以修改 0 不可修改
            if (isset($param['nodeInfo']['process_default_type']) && $param['nodeInfo']['process_default_type'] == '1') {
				$submitWithoutDialog = false;
            }
            // 第一种办理方式，要求必须要有主办人
            if ($processTransactType == 0) {
                if (empty($defaultHostUser)) {
                    $submitWithoutDialog = false;
                } else {
                    if (count($defaultHandleUser) > 1) {
                        if (isset($nextPorcessUserInfo["modal"]) && $nextPorcessUserInfo["modal"] != "readonly") {
                            $submitWithoutDialog = false;
                        } else {
                            $hostUser = $defaultHostUser;
                            $transactUser = implode(",", $defaultHandleUser);
                        }
                    } else if (count($defaultHandleUser) == 1) {
                        if ($defaultHandleUser[0] != $defaultHostUser && isset($nextPorcessUserInfo["modal"]) && $nextPorcessUserInfo["modal"] != "readonly") {
                            $submitWithoutDialog = false;
                        } else {
                            $hostUser = $defaultHostUser;
                            $transactUser = implode(",", $defaultHandleUser);
                        }
                    } else {
                        $hostUser = $defaultHostUser;
                        $transactUser = implode(",", $defaultHandleUser);
                    }
                }
            } else {
                // 其他办理方式，不管主办人
                if (count($defaultHandleUser) < 1) {
                    $submitWithoutDialog = false;
                } else {
                    if (isset($nextPorcessUserInfo["modal"]) && $nextPorcessUserInfo["modal"] != "readonly") {
                        $submitWithoutDialog = false;
                    } else {
                        $transactUser = implode(",", $defaultHandleUser);
                    }
                }
            }
        }
        if ($submitWithoutDialog) {
            $submitInfo["run_id"] = $param["runId"];
            $submitInfo["process_id"] = $param["processId"];
            // 办理人id
            $submitInfo["process_transact_user"] = $transactUser;
            // 提交人
            $submitInfo["user_id"] = $param["userId"];
            // 目标节点id，固定流程必填
            $submitInfo["next_flow_process"] = $param["node_id"];
            $submitInfo["flow_process"] = $param["flowProcess"];
            // 第一种办理方式，有主办人，且主办人必须有
            if ($processTransactType == 0) {
                if ($hostUser) {
                    // 主办人id
                    $submitInfo["process_host_user"] = $hostUser;
                } else {
                    $submitWithoutDialog = false;
                }
            }
            $submitInfo["free_process"] = false;
            $submitInfo["free_process_current_step"] = 0;
            $submitInfo["free_process_next_step"] = 0;
            // 额外参数，用来控制必填
            $submitInfo["process_transact_type"] = $processTransactType;
            if(isset($currentProcessInfo['step_id']) && $currentProcessInfo['step_id']) {
                $submitInfo["free_process"] = true;
                $submitInfo["free_process_current_step"] = $param['free_process_step'] ?? 0;
                $submitInfo["free_process_next_step"] = $currentProcessInfo['step_id'];
            }
        }
        return [
            "submitWithoutDialog" => $submitWithoutDialog,
            "submitInfo" => $submitInfo,
        ];
    }

    /**
     * [getFlowViewPageFlowRunInfo description]
     * @param  [type] $runId [description]
     * @param  [type] $data  [description]
     * @return [type]        [description]
     */
    public function getFlowViewPageFlowRunInfo($runId, $data, $otherParam)
    {
        $currentUser = $data["user_id"];
        $getDataType = isset($otherParam["getDataType"]) ? $otherParam["getDataType"] : "";
        // 传user_id，且不设置 getType 为 simple ，所以，取所有步骤数据的同时，取参与数据
        if ($flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, $data)) {
            $flowRunInfo = $flowRunInfo->toArray();
            // 组织数据
            $returnData = [];
            $returnData["runName"] = $flowRunInfo["run_name"];
            $returnData["runSeq"] = $flowRunInfo["run_seq"];
            $returnData["instancyType"] = $flowRunInfo["instancy_type"];
            $returnData["creator"] = $flowRunInfo["creator"];
            $returnData["create_time"] = $flowRunInfo["create_time"];
            $returnData["currentStep"] = $flowRunInfo["current_step"];
            $returnData["linkDoc"] = $flowRunInfo["link_doc"];
            $maxProcessId = $flowRunInfo["max_process_id"];
            $returnData["maxProcessId"] = $maxProcessId;
            $flowId = $flowRunInfo["flow_id"];
            $lastFlowRunProcessInfo = collect($flowRunInfo["flow_run_has_many_flow_run_process"])->last();
            // 最大步骤对应的节点
            $returnData["maxFlowProcess"] = app($this->flowRunProcessRepository)->getFieldValue('flow_process',['run_id'=>[$flowRunInfo["run_id"]],'process_id'=>[$flowRunInfo["max_process_id"]]]);
            $returnData['flow_run_has_many_flow_run_process'] = $flowRunInfo["flow_run_has_many_flow_run_process"];
            // 当前人员参与了此流程
            // 获取当前人员参与的此流程的信息
            $currentUserJoinInfo = [];
            foreach ($returnData['flow_run_has_many_flow_run_process'] as $value_process) {
                if (!empty($data['flow_run_process_id']) && $data['flow_run_process_id'] == $value_process["flow_run_process_id"]) {
                    $currentUserJoinInfo = $value_process;
                    break;
                }
                // 流程查看目前并不会传flow_run_process_id参数，所以会导致返回的flowProcess为最大值，导致获取的节点权限等有问题
                if ($currentUser == $value_process["user_id"] && $value_process["user_last_step_flag"] == 1) {
                    $currentUserJoinInfo = $value_process;
                     break;
                }
            }
            if (count($currentUserJoinInfo)) {
                $processId = $currentUserJoinInfo["process_id"];
                $hostFlag = $currentUserJoinInfo["host_flag"];
                $flowProcess = $currentUserJoinInfo["flow_process"];
                $returnData["processType"] = $currentUserJoinInfo["process_type"];
                $returnData["processId"] = $processId;
                $returnData["hostFlag"] = $hostFlag;
                $returnData["flowProcess"] = $flowProcess;
                $flowRunPlayerFlag = "actor";
            } else {
                 $searchFlowProcess = [
                    'fields' => ['flow_process' , 'process_id'],
                    'search' => [
                        'run_id'      => [$runId],
                        'by_agent_id' => [$currentUser],
                    ],
                    'order_by'   => ['process_id'=>'desc'],
                    'returntype' => 'first'
                ];
                // 判断当前用户是否是委托人，如果是委托人，将委托节点作为用户所在节点
                $currentUserAgentList = app($this->flowRunProcessRepository)->getFlowRunProcessList($searchFlowProcess);
                $searchCopyFlowProcess = [
                    'fields' => ['flow_run_process.flow_process' , 'flow_copy.process_id'],
                    'search' => [
                        'flow_copy.run_id'      => [$runId],
                        'by_user_id' => [$currentUser],
                    ],
                ];
                // 判断当前用户是否是抄送人，如果是抄送人，将抄送节点作为用户所在节点
                $copyFlowProcess =  app($this->flowCopyRepository)->getFlowCopyFlowProcess($searchCopyFlowProcess);
                if (!empty($currentUserAgentList->flow_process)  || !empty($copyFlowProcess)) {
                    if (!empty($currentUserAgentList->process_id) && !empty($copyFlowProcess->process_id)) {
                            if ($currentUserAgentList->process_id > $copyFlowProcess->process_id) {
                                $processId =$currentUserAgentList->process_id;
                                $flowProcess = $currentUserAgentList->flow_process;
                            } else {
                                $processId =$copyFlowProcess->process_id;
                                $flowProcess = $copyFlowProcess->flow_process;
                            }
                    } else if (!empty($currentUserAgentList->process_id) && empty($copyFlowProcess->process_id) ){
                                $processId =$currentUserAgentList->process_id;
                                $flowProcess = $currentUserAgentList->flow_process;
                    } else {
                                $processId =$copyFlowProcess->process_id;
                                $flowProcess = $copyFlowProcess->flow_process;
                    }
                } else {
                    $processId = $maxProcessId;
                    $flowProcess = $returnData["maxFlowProcess"];
                }
                // 当前人员没有参与此流程
                $returnData["processId"] = $processId;
                $returnData["flowProcess"] = $flowProcess;
                $returnData["processType"] = $lastFlowRunProcessInfo["process_type"] ?? '';
                $flowRunPlayerFlag = "dropout";
            }

            $returnData["flowRunPlayerFlag"] = $flowRunPlayerFlag;
            // flow_type&node_id
            $flowTypeInfo = $flowRunInfo["flow_run_has_one_flow_type"];
            $flowType = $flowTypeInfo["flow_type"];
            $returnData["flowType"] = $flowType;
            $returnData["formId"] = $flowTypeInfo["form_id"];
            $returnData["freeProcessStep"] = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$flowProcess);
            $returnData["freeProcessNextStep"] = app($this->flowRunService)->getMaxFreeNodeStep($runId,$flowProcess);
            if ($returnData["freeProcessNextStep"] != 0) {
                $returnData["freeProcessNextStep"] = $returnData["freeProcessStep"] +1;
            }
            $_free_process_step = app($this->flowRunProcessRepository)->getFieldValue('free_process_step',['run_id'=>[$flowRunInfo["run_id"]],'process_id'=>[$flowRunInfo["max_process_id"]]]);
            $_process_type = app($this->flowRunProcessRepository)->getFieldValue('process_type',['run_id'=>[$flowRunInfo["run_id"]],'process_id'=>[$flowRunInfo["max_process_id"]]]);
            $returnData['current_free_step_id'] = $_free_process_step ?? 0;
            // 不是最新节点时 获取此条节点自由节点步骤信息
            if($returnData["maxFlowProcess"] != $returnData["flowProcess"]) {
                $returnData["freeProcessStep"] = isset($currentUserJoinInfo['free_process_step']) ? $currentUserJoinInfo['free_process_step'] : $_free_process_step;
                $returnData["processType"] = isset($currentUserJoinInfo['process_type']) ? $currentUserJoinInfo['process_type'] : $_process_type;
            }else {
                if (isset($currentUserJoinInfo['free_process_step'])) {
                    $_free_process_step = $currentUserJoinInfo['free_process_step'];
                }
                if ($_free_process_step != $returnData["freeProcessStep"]) {
                    $returnData["freeProcessStep"] = isset($currentUserJoinInfo['free_process_step']) ? $currentUserJoinInfo['free_process_step'] : $_free_process_step;
                }
            }

            // flow_others
            if ($flowTypeInfo["flow_type_has_one_flow_others"]) {
                $flowOthersInfo = $flowTypeInfo["flow_type_has_one_flow_others"];
                // 统一处理返回flow_others设置
                $flowOthersSetting = app($this->flowParseService)->parseFlowOthersSetting($flowOthersInfo);
                $returnData = array_merge($returnData, $flowOthersSetting);
            } else {
                // 定义流程-其他设置数据错误，请联系系统管理员检查！
                return ['code' => ['define_worlflow_other_set_data_error', 'flow']];
            }
            if ($getDataType != "flow_query") {
                // 参与人员，设置主办人判断
                if ($flowRunPlayerFlag == "actor") {
                    if ($flowType == "2") {
                        $handleWay = $flowTypeInfo["handle_way"];
                        $returnData["handleWay"] = $handleWay;
                    } else if ($flowType == "1") {
                        $flowProcessInfo = $currentUserJoinInfo["flow_run_process_has_one_flow_process"];
                        if (count($flowProcessInfo)) {
                            // $returnData["nodeId"] = $flowProcessInfo["node_id"];
                            $handleWay = $flowProcessInfo["process_transact_type"];
                            $returnData["handleWay"] = $handleWay;
                            $returnData["processForward"] = $flowProcessInfo["process_forward"];
                            $returnData["processCopy"] = $flowProcessInfo["process_copy"];
                        } else {
                            // 定义流程数据错误
                            return ['code' => ['0x030023', 'flow']];
                        }
                    }
                    // 混合条件，判断是主办人提交还是经办人提交；在需要的时候设置主办人
					$concurrentNodeId = 0;
					if (isset($flowRunInfo["flow_run_has_many_flow_run_process"]) && count($flowRunInfo["flow_run_has_many_flow_run_process"])>0) {
						foreach($flowRunInfo["flow_run_has_many_flow_run_process"] as $v){
							if(!empty($v['concurrent_node_id'])){
								if ($processId == $v['process_id'] && $flowProcess == $v['flow_process'] && $currentUser == $v['user_id']) {
									$concurrentNodeId = $v['concurrent_node_id'];
								}
							}
						}
					}
                    $statusParam = [
                        "processId" => $processId,
                        "maxProcessId" => $maxProcessId,
                        "hostFlag" => $hostFlag,
                        "handleWay" => $handleWay,
                        "runId" => $runId,
                    	"flowProcess" => $flowProcess,
                    	"concurrentNodeId" => $concurrentNodeId,
						"userId" => $data["user_id"]
                    ];
                    $handleTypeInfo = $this->decideFlowSubmitStatus($statusParam);
                    if ($handleTypeInfo["needSetHost"] == "true") {
                        // 当前人员是最新步骤，且，当前流程没有主办人，且，是前三种办理方式；此时，需要设置主办人
                        $setHostFlagParam = [
                            "user_id" => $currentUser,
                            "flow_process" => $flowProcess,
                            "process_id" => $processId,
                            "handle_way" => $handleWay,
                            "run_id" => $runId,
                        ];
                        $result = app($this->flowRunService)->setHostFlag($setHostFlagParam);
                        if ($result == "1") {
                            // 当前人员被成功设置成主办人
                            $returnData["flowSubmitStatus"] = "host";
                            $returnData["hostFlag"] = "1";
                            $returnData["opFlagIsExistResult"] = "1";
                        } else {
                            $returnData["flowSubmitStatus"] = "handle";
                            $returnData["hostFlag"] = "0";
                            $returnData["opFlagIsExistResult"] = "0";
                        }
                    } else {
                        // 主办人已确定
                        $returnData["flowSubmitStatus"] = $handleTypeInfo["handleType"];
                        $returnData["opFlagIsExistResult"] = $handleTypeInfo["opFlagIsExistResult"];
                    }
                }
                // 按照并发分支查看/办理时更新用户状态的逻辑，需要获取用户所在每个步骤节点的来源步骤
                $originProcessIdsArr = app($this->flowParseService)->getOriginProcessIdsWithUserId($returnData['flow_run_has_many_flow_run_process'], $currentUser);
                // 查看/办理页面初始化的时候，当前人员接收流程
                $this->saveReceiveFlowRun($runId, ["user_id" => $currentUser, "process_id" => $processId, "flow_process" => $flowProcess, "origin_process_id_arr" => $originProcessIdsArr]);
                // 查看/办理页面初始化的时候，记录最后查看时间
                $this->saveLastVisitdTime($runId, ["user_id" => $currentUser, "process_id" => $processId]);
                // 查看页面初始化的时候，处理被抄送人查看流程，标记查看时间
                $this->saveFlowCopyReceive($runId, $flowId, ["user_id" => $currentUser]);
                // 获取公共附件
                $returnData["attachments"] = app($this->attachmentService)->getAttachmentIdsByEntityId(['entity_table' => 'flow_run', 'entity_id' => ["run_id" => [$runId]]]);
                // 取流程图需要的信息--设置办理人/记录查看时间后再获取流程图数据
                // $flowRunningInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId,[]);
                // $flowRunningInfo = $flowRunningInfo->toArray();
                // $returnData["flow_run_has_many_flow_copy"] = $flowRunningInfo["flow_run_has_many_flow_copy"];
            }
            $returnData['hasSonFlows'] = 0;
            // 获取导出PDF表单配置开关
            $returnData["flow_export_pdf"] = app($this->flowSettingService)->getFlowSettingsParamValueByParamKey("flow_export_pdf");
            // 上一节点已触发的子流程
            foreach ($flowRunInfo["flow_run_has_many_flow_run_process"] as $k => $v) {
                if (($v['process_id'] == ($maxProcessId - 1))) {
                    $returnData['hasSonFlows'] = $flowRunInfo["flow_run_has_many_flow_run_process"][$k]['sub_flow_run_ids'] ? 1 : 0;
                   // break;
                }
                if (isset( $returnData["hostFlag"]) && $returnData["hostFlag"]  == 0 && $v['process_id'] ==  $processId && $v['user_id'] ==  $currentUser && $v['host_flag'] == 1) {
                    $returnData['hostFlag'] = 1;
                }
            }
            return $returnData;
            // return $flowRunInfo;
        } else {
            // 流程不存在
            return ['code' => ['0x030001', 'flow']];
        }
    }

    /**
     * 【流程提交框】 获取流程提交框的主体部分所需数据，办理模式
     * 传入user_id，当前用户必然是参与了此流程，才能进入办理页面。
     *
     * @method getFlowSubmitFrameFlowRunInfo
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function getFlowSubmitFrameFlowRunInfo($runId, $data)
    {
        $currentUser = $data["user_id"];
        $data["getType"] = "simple";
        if ($flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, $data)) {
            $flowRunInfo = $flowRunInfo->toArray();
            // 组织数据
            $returnData = [];
            $maxProcessId = $flowRunInfo["max_process_id"];
            $returnData["maxProcessId"] = $maxProcessId;
            $flowId = $flowRunInfo["flow_id"];
            $flow_run_has_many_flow_run_process = $flowRunInfo["flow_run_has_many_flow_run_process"];
            // 获取当前人员参与的此流程的信息
            $currentUserJoinInfo = [];
            $currentUserAtMaxProcessInfo = [];
            foreach ($flow_run_has_many_flow_run_process as $value_process) {
                if ($value_process['user_run_type'] == '1') {
                    if ($data['flow_run_process_id'] == $value_process["flow_run_process_id"]) {
                        $currentUserJoinInfo = $value_process;
                    }
                    if ($value_process['user_id'] == $currentUser) {
                        if (empty($currentUserAtMaxProcessInfo['process_id'])) {
                            $currentUserAtMaxProcessInfo = $value_process;
                        } else if ($currentUserAtMaxProcessInfo['host_flag'] == '0') {
                            $currentUserAtMaxProcessInfo = $value_process;
                        }
                    }
                }
            }
            if (empty($currentUserJoinInfo)) {
                $currentUserJoinInfo = $currentUserAtMaxProcessInfo;
                $returnData['flow_run_process_id'] = $data['flow_run_process_id'] = $currentUserAtMaxProcessInfo['flow_run_process_id'] ?? 0;
            }
            if (count($currentUserJoinInfo)) {
                $processId = $currentUserJoinInfo["process_id"];
                $hostFlag = $currentUserJoinInfo["host_flag"];
                $flowProcess = $currentUserJoinInfo["flow_process"];
                $flowProcessInfo = $currentUserJoinInfo["flow_run_process_has_one_flow_process"];
                $returnData["processId"] = $processId;
                $returnData["hostFlag"] = $hostFlag;
                $returnData["flowProcess"] = $flowProcess;
                $returnData["currentProcessIsBack"] = $currentUserJoinInfo["is_back"];
            } else {
                // 没有此流程的办理权限
                return ['code' => ['0x030022', 'flow']];
            }
            // flow_type&node_id
            $flowTypeInfo = $flowRunInfo["flow_run_has_one_flow_type"];
            $flowType = $flowTypeInfo["flow_type"];
            $returnData["flowType"] = $flowType;
            if ($flowType == "2") {
                $handleWay = $flowTypeInfo["handle_way"];
                $returnData["handleWay"] = $handleWay;
                $returnData["countersign"] = $flowTypeInfo["countersign"];
                $returnData["pressAddHour"] = $flowTypeInfo["press_add_hour"];
                $returnData["overtime_except_nonwork"] = $flowTypeInfo["overtime_except_nonwork"];
                if ($processId == "1") {
                    $returnData["headNodeToggle"] = "1";
                } else {
                    $returnData["headNodeToggle"] = "0";
                }
            } else if ($flowType == "1") {
                // 节点信息数组
                if (count($flowProcessInfo)) {
                    $returnData["openDebug"] =  $flowTypeInfo['open_debug'];
                    $handleWay = $flowProcessInfo["process_transact_type"];
                    $returnData["handleWay"] = $handleWay;
                    $returnData["countersign"] = $flowProcessInfo["process_concourse"];
                    $returnData["pressAddHour"] = $flowProcessInfo["press_add_hour"];
                    $returnData["nodeId"] = $flowProcessInfo["node_id"];
                    $returnData['processCopy'] = $flowProcessInfo['process_copy'];
                    $returnData["headNodeToggle"] = $flowProcessInfo["head_node_toggle"];
                    $returnData["overtime_except_nonwork"] = $flowProcessInfo["overtime_except_nonwork"];
                    $returnData['trigger_all_son_flows'] = $flowProcessInfo['trigger_all_son_flows'];
                    $returnData['trigger_son_flow_back'] = $flowProcessInfo['trigger_son_flow_back'];
                    $nodeInfo = $this->getFlowNodeInfo($flowProcessInfo["node_id"]);
                    $returnData["processType"] = $nodeInfo["process_type"];
                    $returnData["freeProcessStep"] = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$flowProcess);
                    $returnData["freeProcessNextStep"] = app($this->flowRunService)->getMaxFreeNodeStep($runId,$flowProcess);
                    if ($returnData["freeProcessNextStep"] != 0) {
                        $returnData["freeProcessNextStep"] = $returnData["freeProcessStep"] +1;
                    }
                } else {
                    // 定义流程数据错误，请联系系统管理员检查！
                    return ['code' => ['0x030023', 'flow']];
                }
            }
            // flow_others
            if ($flowTypeInfo["flow_type_has_one_flow_others"]) {
                $flowOthersInfo = $flowTypeInfo["flow_type_has_one_flow_others"];

                // 统一处理返回flow_others设置
                $flowOthersSetting = app($this->flowParseService)->parseFlowOthersSetting($flowOthersInfo);
                $returnData = array_merge($returnData, $flowOthersSetting);
            } else {
                // 定义流程-其他设置数据错误，请联系系统管理员检查！
                return ['code' => ['define_worlflow_other_set_data_error', 'flow']];
            }
            // 混合条件，判断是主办人提交还是经办人提交；在需要的时候设置主办人
			$concurrentNodeId = 0;
			if (isset($flowRunInfo["flow_run_has_many_flow_run_process"]) && count($flowRunInfo["flow_run_has_many_flow_run_process"])>0) {
				$concurrentNodeId = $currentUserJoinInfo['concurrent_node_id'];
			}
            $statusParam = [
                "processId" => $processId,
                "maxProcessId" => $maxProcessId,
                "hostFlag" => $hostFlag,
                "handleWay" => $handleWay,
                "runId" => $runId,
            	"flowProcess" => $flowProcess,
            	"concurrentNodeId" => $concurrentNodeId,
				"userId" => $data["user_id"]
            ];
            $handleTypeInfo = $this->decideFlowSubmitStatus($statusParam);
            $returnData["flowSubmitStatus"] = $handleTypeInfo["handleType"];
            $returnData["opFlagIsExistResult"] = $handleTypeInfo["opFlagIsExistResult"];
            $returnData["handleWay"] = $handleWay;
            // 如果是自由节点 判断其所在位置，
            if(isset($flowProcessInfo['process_type']) && $flowProcessInfo['process_type'] == 'free') {
                $freeProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($flowProcess);
                $returnData["preset_process"] = $freeProcessInfo->preset_process;

                // 获取预设节点信息
                $returnData["free_preset_info"] = $freeProcessInfo->flowProcessFreeHasManyPreset;

                // 获取自由节点设置信息
                $freeProcessRunInfo = $this->getFlowFreeNodeRunInfo($flowProcess, $runId);
                $returnData["run_preset_process_list"] = $freeProcessRunInfo['list'];
                $returnData["max_free_process"] = $freeProcessRunInfo['max_process_id'];

            }
            return $returnData;
            // return $flowRunInfo;
        } else {
            // 流程不存在
            return ['code' => ['0x030001', 'flow']];
        }
    }

    /**
     * 【流程监控提交】 获取流程监控提交框的主体部分所需数据，办理模式
     *
     * @method getFlowMonitorSubmitFrameFlowRunInfo
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function getFlowMonitorSubmitFrameFlowRunInfo($runId, $data, $stepInfo = [])
    {
        // 取所有步骤数据的同时，取参与数据
        if ($flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, [])) {
            $flowRunInfo = $flowRunInfo->toArray();
            // 组织数据
            $returnData = [];
            $maxProcessId = $flowRunInfo["max_process_id"];
            $returnData["maxProcessId"] = $maxProcessId;
            $flowId = $flowRunInfo["flow_id"];
            $processId = $maxProcessId;
            $lastFlowRunProcessInfo = collect($flowRunInfo["flow_run_has_many_flow_run_process"])->last();
            $flowProcess = $lastFlowRunProcessInfo["flow_process"];
			if(app($this->flowParseService)->isConcurrentFlow($flowRunInfo["flow_id"])) {
				if (!empty($stepInfo)) {
					$flowProcess = $stepInfo["flow_process"];
					$processId = $stepInfo["process_id"];
				}
			}
            $returnData["flowProcess"] = $flowProcess;
			$returnData["processId"] = $processId;
            // flow_type&node_id
            $flowTypeInfo = $flowRunInfo["flow_run_has_one_flow_type"];
            $flowType = $flowTypeInfo["flow_type"];
            $returnData["flowType"] = $flowType;
            if ($flowType == "2") {
                $returnData["handleWay"] = $flowTypeInfo["handle_way"];
                $returnData["countersign"] = $flowTypeInfo["countersign"];
                $returnData["pressAddHour"] = $flowTypeInfo["press_add_hour"];
                if ($processId == "1") {
                    $returnData["headNodeToggle"] = "1";
                } else {
                    $returnData["headNodeToggle"] = "0";
                }
            } else if ($flowType == "1") {
                // 节点信息数组
                $flowProcessInfo = $this->getFlowNodeInfo($flowProcess);
                if (count($flowProcessInfo)) {
                    $returnData["handleWay"] = $flowProcessInfo["process_transact_type"];
                    $returnData["countersign"] = $flowProcessInfo["process_concourse"];
                    $returnData["pressAddHour"] = $flowProcessInfo["press_add_hour"];
                    $returnData["nodeId"] = $flowProcessInfo["node_id"];
                    $returnData['processCopy'] = $flowProcessInfo['process_copy'];
                    $returnData["headNodeToggle"] = $flowProcessInfo["head_node_toggle"];
                    $nodeInfo = $this->getFlowNodeInfo($flowProcessInfo["node_id"]);
                    $returnData["processType"] = $nodeInfo["process_type"];
                    $returnData["freeProcessStep"] = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$flowProcess);
                    $returnData["freeProcessNextStep"] = app($this->flowRunService)->getMaxFreeNodeStep($runId,$flowProcess);
                    if ($returnData["freeProcessNextStep"] != 0) {
                        $returnData["freeProcessNextStep"] = $returnData["freeProcessStep"] +1;
                    }
                    $returnData["trigger_all_son_flows"] = $flowProcessInfo["trigger_all_son_flows"];
                    $returnData["trigger_son_flow_back"] = $flowProcessInfo["trigger_son_flow_back"];
                } else {
                    // 定义流程数据错误，请联系系统管理员检查！
                    return ['code' => ['0x030023', 'flow']];
                }
            }
            // flow_others
            if ($flowTypeInfo["flow_type_has_one_flow_others"]) {
                $flowOthersInfo = $flowTypeInfo["flow_type_has_one_flow_others"];

                // 统一处理返回flow_others设置
                $flowOthersSetting = app($this->flowParseService)->parseFlowOthersSetting($flowOthersInfo);
                $returnData = array_merge($returnData, $flowOthersSetting);
            } else {
                // 定义流程-其他设置数据错误，请联系系统管理员检查！
                return ['code' => ['define_worlflow_other_set_data_error', 'flow']];
            }
            // 如果是自由节点 判断其所在位置，
            // 重置字段控制信息
            // 如果设置了必填，则重置必填信息
            if(isset($flowProcessInfo['process_type']) && $flowProcessInfo['process_type'] == 'free') {
                $freeProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($flowProcess);
                $returnData["preset_process"] = $freeProcessInfo->preset_process;
                // 获取预设节点信息
                $returnData["free_preset_info"] = app($this->flowProcessFreePresetRepository)->getList($flowProcess);
                // 获取自由节点设置信息
                $freeProcessInfo = $this->getFlowFreeNodeRunInfo($flowProcess, $runId);
                $returnData["run_preset_process_list"] = $freeProcessInfo['list'];
                $returnData["max_free_process"] = $freeProcessInfo['max_process_id'];
            }
            // 监控提交框，主办人提交
            $returnData["flowSubmitStatus"] = "host";
            return $returnData;
            // return $flowRunInfo;
        } else {
            // 流程不存在
            return ['code' => ['0x030001', 'flow']];
        }
    }

    /**
     * 混合条件，判断是主办人提交还是经办人提交；在需要的时候设置主办人
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function decideFlowSubmitStatus($param)
    {
        $processId = $param["processId"];
        $maxProcessId = $param["maxProcessId"];
        $hostFlag = $param["hostFlag"];
        $handleWay = $param["handleWay"];
        $runId = $param["runId"];
        $concurrentNodeId = !empty($param['concurrentNodeId'])?$param['concurrentNodeId']:0;
        $handleType = "handle";
        $needSetHost = "";
        $opFlagIsExistResult = "";
        // 获取某条流程当前步骤是否有主办人，返回1，有主办人，返回0，没有主办人。
        $opFlagParam = ["run_id" => $runId, "process_id" => $processId];
        $opFlagIsExistResult = app($this->flowRunService)->opFlagIsExist($opFlagParam);
        // 1.判断主办人还是经办人
        if ($hostFlag == "1") {
            $handleType = "host";
        } else {
            // 有主办人
            if ($opFlagIsExistResult == "1") {
                $handleType = "handle";
            } else {
                // 没有主办人
                // 第四种办理方式
                if ($handleWay == "3") {
                    $handleType = "host";
                } else {
                    // 前三种办理方式
                    $handleType = "handle";
                    // 当前人员是最新步骤，且，当前流程没有主办人，且，是前三种办理方式；此时，需要设置主办人
                    $needSetHost = "true";
                }
            }
        }

		if (!empty($param['flowProcess']) && !empty($param['userId'])) {
			$flowRunInfo = app($this->flowRunProcessRepository)->getFlowRunProcessInfo(['flow_process','process_id'],['run_id'=>$runId,'process_id'=>$processId]);
			$flowRunArray = [];
			$turnNode = false;
			foreach($flowRunInfo as $value){
				if (!isset($flowRunArray[$value['flow_process']])){
					$flowRunArray[$value['flow_process']] = $value['flow_process'];
					if ($value['flow_process'] != $param['flowProcess']) {
						$processInfo = app($this->flowParseService)->getProcessInfo($value['flow_process']);
						$setHostFlagParam = [
							"user_id" => $param['userId'],
							"flow_process" => $value['flow_process'],
							"process_id" => $param['processId'],
							"handle_way" => $processInfo['process_transact_type'],
							"run_id" => $param["runId"],
						];
						app($this->flowRunService)->setHostFlag($setHostFlagParam);
						$turnNode = true;
					}
				}
			}
			if ($turnNode) {
				$flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, ['user_id'=>$param['userId']])->toArray();
				$flowRunStepInfo = $flowRunInfo["flow_run_has_many_flow_run_step"][0];
                $hostFlag = $flowRunStepInfo["host_flag"];
				if ($processId == $maxProcessId || $checkNeedSetHost) {
					if ($hostFlag == "1") {
						$handleType = "host";
					}
				}
			}
		}
        return ["handleType" => $handleType, "needSetHost" => $needSetHost, "opFlagIsExistResult" => $opFlagIsExistResult];
    }

    /**
     * 流程图--计算提交耗时
     * @param  [type] $flowRunProcessInfo [description]
     * @return [type]                     [description]
     */
    public function calculateSubmitTimeConsume($processInfo)
    {
        if (count($processInfo)) {
            $hostFlag = $processInfo["host_flag"];
            $receiveTime = $processInfo["receive_time"];
            $deliverTime = $processInfo["deliver_time"];
            $saveFormTime = $processInfo["saveform_time"];
            $timeConsume = "";
            if ($receiveTime) {
                if ($hostFlag == "1") {
                    if ($deliverTime) {
                        $timeConsume = strtotime($deliverTime) - strtotime($receiveTime);
                    } else {
                        $timeConsume = time() - strtotime($receiveTime);
                    }
                } else {
                    if ($saveFormTime) {
                        $timeConsume = strtotime($saveFormTime) - strtotime($receiveTime);
                    } else {
                        $timeConsume = time() - strtotime($receiveTime);
                    }
                }
            }
            $timeConsumeString = "";
            if ($timeConsume) {
                $day = floor($timeConsume / 86400);
                $hour = floor(($timeConsume % 86400) / 3600);
                $min = floor(($timeConsume % 3600) / 60);
                $sec = floor($timeConsume % 60);
                if ($day > 0) {
                    $timeConsumeString .= $day . trans("flow.0x030059");
                }
                // 天;
                if ($hour > 0) {
                    $timeConsumeString .= $hour . trans("flow.0x030060");
                }
                // 小时;
                if ($min > 0) {
                    $timeConsumeString .= $min . trans("flow.0x030061");
                }
                // 分钟;
                if ($sec > 0) {
                    $timeConsumeString .= $sec . trans("flow.0x030062");
                }
                // 秒;
            }
            return $timeConsumeString;
        }
    }

    /**
     * 流程办理页面 获取流程办理/查看页面上，流程其他信息标签里面的数量
     * $data，如果传 [type="xxx"]，表示单独获取某个标签的数量，xxx可选值：feedback,attachment,document
     *
     * @author dingpeng
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     */
    public function getFlowRunOtherTabsCount($runId, $data, $loginUserInfo)
    {
        $returnData = [];
        if ($runObject = app($this->flowRunRepository)->getDetail($runId , false ,['link_doc'] )) {
            if (!isset($data['type']) || $data['type'] == 'attachment') {
                // 获取公共附件
                $flowAttachments = app($this->attachmentService)->getAttachmentIdsByEntityId(['entity_table' => 'flow_run', 'entity_id' => ["run_id" => [$runId]]]);
                // 公共附件数量
                $returnData["attachmentCount"] = count($flowAttachments);
            }
            if (!isset($data['type']) || $data['type'] == 'feedback') {
                // 获取签办反馈数量
                $returnData["feedbackCount"] = app($this->flowRunFeedbackRepository)->getFeedbackListTotal(["run_id" => $runId]);
            }
            if (!isset($data['type']) || $data['type'] == 'document') {
                // 相关文档数量，前端计算
                $documentCount = 0;
                if (!empty($runObject->link_doc)) {
                    $linkDoc = explode(',', trim($runObject->link_doc, ','));
                    if (!empty($linkDoc)) {
                        $searchDocumentParams = [
                            'response' => 'count',
                            'search'   => ['document_id' => [$linkDoc, 'in']]
                        ];
                        $documentCount = app($this->documentService)->listDocument($searchDocumentParams, $loginUserInfo);
                    }
                }
                $returnData["documentCount"] = $documentCount;
            }
            // 获取相关流程数量
            if (!isset($data['type']) || $data['type'] == 'relationFlow') {
                // 获取签办反馈数量
                $returnData["relationFlowCount"] = app($this->flowRunService)->getRelationFlowData( $runId ,$loginUserInfo, 'count');
            }
        }
        return $returnData;
    }

    /**
     * 查看/办理页面初始化的时候，当前人员接收流程
     * @param $runId
     * @param $data
     * @return string
     */
    public function saveReceiveFlowRun($runId, $data)
    {
        // 必填，当前用户id
        $userId = $data["user_id"];
        // 必填，当前所在步骤
        $processId = $data["process_id"];
        $flowProcess = $data["flow_process"] ?? 0;
        $originProcessId =  $data['origin_process_id'] ?? 0;
        $originProcessIdsArr =  $data['origin_process_id_arr'] ?? [];
        $currentTime = date("Y-m-d H:i:s", time());
        $flowRunCurrentData = [
            "run_id" => $runId,
            "search" => ["process_id" => [$processId], "user_id" => [$userId]],
            // "groupBy"   => ["run_id"],
            "selectRaw" => ["MAX(process_flag) max_process_flag, flow_id, flow_serial"],
            "returntype" => 'first'
        ];
        if ($flowRunCurrentProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunCurrentData)) {
            $max_process_flag = $flowRunCurrentProcessObject->max_process_flag;
            $flowId = $flowRunCurrentProcessObject->flow_id;
            if ($max_process_flag == null) {
                return "1";
            }
            if ($max_process_flag == "1" || $max_process_flag == "2") {
                app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_flag" => "2"], "wheres" => ["run_id" => [$runId], "user_id" => [$userId], "process_id" => [$processId]] ]);
            } else {
                app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_flag" => $max_process_flag], "wheres" => ["run_id" => [$runId], "user_id" => [$userId], "process_id" => [$processId]]]);
            }
            // 更新flow_run_step
            app($this->flowRunStepRepository)->updateFlowRunStepData(["data" => ["process_time" => $currentTime], "wheres" => ["run_id" => [$runId], "user_id" => [$userId]], "whereRaw" => ["(process_time IS NULL)"]]);
            // 一旦执行此函数，则将自己的 process_time 为空的步骤赋值，同时修改 process_flag
            app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => [ "process_flag" => "2"], "wheres" => ["run_id" => [$runId], "user_id" => [$userId]], "whereRaw" => ["((process_time = '0000-00-00 00:00:00') OR (process_time IS NULL)) and process_flag = 1"]]);
            app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_time" => $currentTime], "wheres" => ["run_id" => [$runId], "user_id" => [$userId]], "whereRaw" => ["(process_time IS NULL)"]]);

            app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => [ "process_flag" => "3"], "wheres" => ["run_id" => [$runId], "user_id" => [$userId] ], "whereRaw" => ["(overhandle_time IS not NULL and  overhandle_time != '0000-00-00 00:00:00') and process_flag <> 4"]]);
            // 一旦有人查看了，则上一步的PRCS_FLAG将变成4 // 如果有多个分支的来源节点则需要同步更新
            $processIdWheres = $originProcessIdsArr ? [$originProcessIdsArr, 'in'] : [$originProcessId];
            if ($processId > 1) {
                $originProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' => ['flow_process', 'flow_serial'],'search' => ['run_id' => [$runId], 'process_id' => [$originProcessId]], 'relationNodeInfo' => true, 'returntype' => 'first']);
                if (!empty($originProcessInfo->flowRunProcessHasOneFlowProcess->merge) && $flowRunCurrentProcessObject->flow_serial > $originProcessInfo->flow_serial) {
                    // 如果当前节点是由合并节点提交产生的新的大序号节点，更新前一个大序号内的所有合并节点的process_flag
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_flag" => "4"], "wheres" => ['run_id' => [$runId], 'flow_serial' => [$originProcessInfo->flow_serial], 'flow_process' => [$originProcessInfo->flow_process]]]);
                } else {
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_flag" => "4"], "wheres" => ["run_id" => [$runId], "process_id" => $processIdWheres]]);
                }
            }
            // app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_flag" => "4"], "wheres" => ["run_id" => [$runId], "process_id" => [$originProcessId]]]);

            $searchWhere = [
                'run_id' => [$runId],
                "user_id" => [$userId],
                "process_id" => [$processId],
                "user_run_type" => [1],
                "user_last_step_flag" =>[1]
            ];
            $todoList = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => $searchWhere,'fields' =>['user_id', 'flow_id', 'process_id', 'flow_run_process_id']]);
            if ($todoList) {
                foreach ($todoList as $todovalue) {
                    $todu_push_params = [];
                    $todu_push_params['receiveUser'] = $userId;
                    $todu_push_params['deliverUser'] = $userId;
                    $todu_push_params['operationType'] = 'add';
                    $todu_push_params['operationId'] = '1';
                    $todu_push_params['flowId'] = $todovalue['flow_id'];
                    $todu_push_params['runId'] = $runId;
                    $todu_push_params['processId'] = $todovalue['process_id'];
                    $todu_push_params['flowRunProcessId'] = $todovalue['flow_run_process_id'];
                    $todu_push_params['viewType'] = '1';
                    // 操作推送至集成中心
                    app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                }
            }
            //标记为已查看抄送
            // $this->markFlowCopyHaveReceive($userId);
            return "1";
        }
    }

    /**
     * 查看/办理页面初始化的时候，记录最后查看时间
     *
     * 20160930，修改，在flowService中调用此函数，对应的外部路由考虑删掉！
     * @author dingpeng
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     */
    public function saveLastVisitdTime($runId, $data)
    {
        // 必填，当前用户id
        $userId = $data["user_id"];
        // 必填，当前所在步骤
        $processId = $data["process_id"];
        app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["last_visited_time" => date("Y-m-d H:i:s", time())], "wheres" => ["run_id" => [$runId], "user_id" => [$userId], "process_id" => [$processId]]]);
    }

    /**
     * 查看页面初始化的时候，处理被抄送人查看流程，标记查看时间
     *
     * 只在flowService中调用此函数
     * @author dingpeng
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     */
    public function saveFlowCopyReceive($runId, $flowId, $data)
    {
        // 必填，当前用户id
        $userId = $data["user_id"];
        $currentTime = date("Y-m-d H:i:s", time());
        app($this->flowCopyRepository)->updateFlowCopyData(["data" => ["receive_time" => $currentTime], "wheres" => ["run_id" => [$runId], "by_user_id" => [$userId]], "whereRaw" => [" receive_time IS NULL "]]);
        app($this->flowParseService)->markUnreadMessagesAsRead($flowId, $runId, $userId);
    }

    /**
     * 保存流程名称和流水号等
     *
     * @author dingpeng
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     */
    public function saveFlowRunInfo($data, $userInfo)
    {
        $runId = $data["run_id"] ?? '';
        if (empty($runId)) {
            return false;
        }
		$runInfo = app($this->flowRunRepository)->getDetail($runId);
        $runData = array_intersect_key($data, array_flip(app($this->flowRunRepository)->getTableColumns()));
        if (isset($runData["run_seq"])) {
            $runData["run_seq_strip_tags"] = strip_tags($runData["run_seq"]);
            $runData["run_seq_strip_tags"] = str_replace('&nbsp;', ' ', $runData["run_seq_strip_tags"]);
        }
        // $runInfo = app($this->flowRunRepository)->getDetail($runId , false , ['run_name']);
		$flowTypeObject = app($this->flowTypeRepository)->getFlowTypeInfoListRepository(["flow_id" => $runInfo->flow_id]);
		$flowSequence = $flowTypeObject->flow_sequence;
		if (!empty($data['run_seq'])) {
			if (strpos($flowSequence,'|Y') == false && strpos($flowSequence,'|M') == false && strpos($flowSequence,'|D') == false) {
				$search = ["search" => ["flow_id" => [$runInfo->flow_id],'run_seq_strip_tags'=>[strip_tags($data['run_seq'])]]];
				$runProcessInfo = app($this->flowRunRepository)->getFlowRunList($search);
				if ($runProcessInfo->count()) {
					$runProcessNum = 0 ;
					foreach($runProcessInfo as $v){
						if ($v->run_id != $runId){
							$runProcessNum++;
						}
					}
					if ($runProcessNum>0) {
						return ['code' => ['0x030003', 'flow']];
					}
				}
			}
		}
        $oldRunName  = $runInfo->run_name;
        $runName     = $runData["run_name"] ?? '';
        $runNameHtml = $runData["run_name_html"] ?? '';

        if (isset($runData["run_name"]) && isset($userInfo['user_name'])) {
            if (empty($runName) || empty($runNameHtml) || ($runName == $oldRunName)) {
                unset($runData['run_name']);
                unset($runData['run_name_html']);
            }
        }
        // 保存基本信息
        app($this->flowRunRepository)->updateData($runData, ['run_id' => $runId]);
        // 保存表单信息
        app($this->flowRunService)->saveFlowRunFormData($data, $userInfo);

        // 全站搜索消息队列更新数据
        $this->updateGlobalSearchDataByQueue($runId);

        return $runData;
    }
    /**
     * 【流程办理】保存流程前根据流程标题规则获取流程标题
     *
     */
    public function getFlowRunNameByRule($data, $userInfo)
    {
        $runId = $data["run_id"];
        $flowId = $data["flow_id"];
        $formId = $data["form_id"];
        $runName = $data['run_name'];
        $flowTypeObject = app($this->flowTypeRepository)->getDetail($flowId, false, ['flow_name_rules', 'flow_name_rules_html']);
        if(!$flowTypeObject) {
            return '';
        }
        if ($flowTypeObject->flow_name_rules == '[]') {
            $flowTypeObject->flow_name_rules = '';
            $flowTypeObject->flow_name_rules_html = '';
        }
        if (!$flowTypeObject->flow_name_rules) {
            return '';
        }
        // 新建页面保存时 生成流程
        $runNameRule = json_decode($flowTypeObject->flow_name_rules, true);
        // 如果设置了流程规则,按规则生成标题
        if (!empty($runNameRule)) {
            //处理前段传过来的run_name 当规则中不包含表单控件时 直接保存前段的流程规则
            //否则后端重新生成
            $hasFormData = false;
            if (!is_array($runNameRule)) {
                $runNameRule = $runNameRule->toArray();
            }
            foreach ($runNameRule as $key => $value) {
                if ($value['type'] == 'formData') {
                    $hasFormData = true;
                }
            }
            if ($hasFormData) {
                // 获取流程表单数据
                $flowFormDataParam = [
                    'status' => 'handle',
                    'runId' => $runId,
                    'formId' => $formId,
                    'flowId' => $flowId,
                    'nodeId' => $data['flow_process'],
                ];
                $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $userInfo);
                $flowEndParam = isset($flowFormData['parseFormStructure']) ? $flowFormData['parseFormStructure'] : [];

                $_data = [
                    'flow_id' => $flowId,
                    'form_data' => $data['form_data'],
                    'form_structure' => $flowEndParam,
                    'creator' => $userInfo['user_id'],
                ];
                $runName = '';
                $runName = app($this->flowRunService)->flowNewPageGenerateFlowRunName($_data);
                return $runName;
            }
        }
        return $runName;
    }

    /**
     * 【流程签办反馈】，获取签办反馈列表
     *
     * @author dingpeng
     *
     * @param  [type]                     $data [description]
     *
     * @return [type]                           [description]
     */
    public function getFlowFeedbackListService($data, $runId, $userInfo)
    {
        if ($runId > 0) {
            return app($this->flowRunService)->getFeedbackRealize($data, $runId, $userInfo);
        } else {
            return ["list" => []];
        }
    }

    /**
     * 【流程签办反馈】，新建签办反馈
     *
     * @author dingpeng
     *
     * @param  [type]                     $data [description]
     *
     * @return [type]                           [description]
     */
    public function createFlowFeedbackService($data)
    {
        $data["edit_time"] = date('Y-m-d H:i:s');
        $data["run_feedback_id"] = app($this->flowRunService)->getNextRunFeedbackId($data["run_id"], $data["user_id"]);
        $feedbackData = array_intersect_key($data, array_flip(app($this->flowRunFeedbackRepository)->getTableColumns()));
        if (isset($feedbackData['feedback_id'])) {
            unset($feedbackData['feedback_id']);
        }
        // 开始提取@的用户保存到反馈表的at_user字段，后面需要根据该字段获取流程查看权限
        if (isset($data['content']) && !empty($data['content'])) {
            $regexStr = '/<a .*?data-eui-profile-card="(.*?)".*?>/is';
            preg_match_all($regexStr, $data['content'], $matchArray);
            if (isset($matchArray[1]) && !empty($matchArray[1])) {
                $feedbackData['at_user'] = implode(',', $matchArray[1]);
            }
        }
        if ($result = app($this->flowRunFeedbackRepository)->insertData($feedbackData)) {
            $result = $result->toArray();
            if (isset($data['attachments'])) {
                app($this->attachmentService)->attachmentRelation("feedback", $result["feedback_id"], $data['attachments']);
            }
            // 计算签办反馈的可编辑
            $maxProcessId = '';
            $flowType = '';
            $runId = isset($feedbackData["run_id"]) ? $feedbackData["run_id"] : "";
            if ($runId && $runObject = app($this->flowRunRepository)->getFlowRunList(['returntype' => 'first','fields'=>['max_process_id','flow_id'],  "search" => ["run_id" => [$runId]]])) {
                if ($runObject->count()) {
                    $runObject = $runObject->toArray();
                    $maxProcessId = $runObject['max_process_id']??'';
                    $flowType = isset($runObject['flow_run_has_one_flow_type']['flow_type']) ? $runObject['flow_run_has_one_flow_type']['flow_type']:'';
                }
            }
            $canEditFeedBack = "";
            $currentUserId = isset($feedbackData["user_id"]) ? $feedbackData["user_id"] : "";
            $feedbackProcessId = isset($feedbackData["process_id"]) ? $feedbackData["process_id"] : "";
            // 判断是否已经有人查看过，参考9.0的逻辑
            if ($feedbackProcessId == $maxProcessId) {
                $param = [
                    "run_id" => $runId,
                    "process_id" => $feedbackProcessId,
                    "edit_time" => isset($feedbackData["edit_time"]) ? $feedbackData["edit_time"] : "",
                    "user_id" => $currentUserId,
                ];
                $canEditFeedBack = app($this->flowRunService)->verifyFlowHasOtherPersonVisited($param);
                if ($canEditFeedBack === false) {
                    $canEditFeedBack = "1";
                } else {
                    $canEditFeedBack = "";
                }
            }
            //获取processName
            if (  $flowType == 2) {
                     $result["processName"] = $feedbackProcessId;
            } else {
                if ($result['flow_process'] &&  $process =app($this->flowProcessRepository)->getDetail($result['flow_process']) ) {
                    $result["processName"] = $process->process_name;
                 }
            }
	    if (isset($result['free_process_step']) && $result['free_process_step']) {
                $freeProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($result['run_id'],$result['flow_process'],$result['free_process_step']);
                if ($freeProcessInfo) {
                    $result["processName"] = $freeProcessInfo->process_name;
                }
            }
            $result["canEditFeedBack"] = $canEditFeedBack;
            return $result;
        }
    }

    /**
     * 【流程签办反馈】，编辑签办反馈
     *
     * @author dingpeng
     *
     * @param  [type]                     $data [description]
     *
     * @return [type]                           [description]
     */
    public function editFlowFeedbackService($data, $feedbackId)
    {
        // 备注：最大步骤，且签办反馈的user_id是当前用户时。才有删除、编辑功能。
        // if(!app($this->flowRunService)->checkFeedbackIsRead($feedbackId,$data["user_id"])) {
        $feedbackData["edit_time"] = date('Y-m-d H:i:s');
        $feedbackData["content"] = $data["content"];
        if (isset($data['attachments'])) {
            app($this->attachmentService)->attachmentRelation("feedback", $feedbackId, $data['attachments']);
        }
        if (isset($data['content']) && !empty($data['content'])) {
            $regexStr = '/<a .*?data-eui-profile-card="(.*?)".*?>/is';
            preg_match_all($regexStr, $data['content'], $matchArray);
            if (isset($matchArray[1]) && !empty($matchArray[1])) {
                $feedbackData['at_user'] = implode(',', $matchArray[1]);
            }
        }
        return app($this->flowRunFeedbackRepository)->updateData($feedbackData, ['feedback_id' => $feedbackId]);
        // }
        // return ['code' => ['0x030004','flow']];
    }

    /**
     * 【流程签办反馈】，删除签办反馈
     *
     * @author dingpeng
     *
     * @param  [type]                     $data [description]
     *
     * @return [type]                           [description]
     */
    public function deleteFlowFeedbackService($data, $feedbackId)
    {
        // 备注：最大步骤，且签办反馈的user_id是当前用户时。才有删除、编辑功能。
        // if(!app($this->flowRunService)->checkFeedbackIsRead($feedbackId,$data["user_id"])) {
        if (app($this->flowRunFeedbackRepository)->deleteById($feedbackId)) {
            return 1;
        }
        // 签办反馈删除失败
        return ['code' => ['0x030007', 'flow']];
        // }
        // return ['code' => ['0x030004','flow']];
    }

    /**
     * 【流程签办反馈】，获取单个签办反馈
     *
     * @author dingpeng
     *
     * @param  [type]                     $data [description]
     *
     * @return [type]                           [description]
     */
    public function getFlowFeedbackDetailService($feedbackId, $data)
    {
        if ($detailResult = app($this->flowRunFeedbackRepository)->getFlowFeedBackDetail($feedbackId, $data)) {
            return $detailResult->toArray();
        }
        // 未找到相应的签办反馈数据
        return ['code' => ['0x030008', 'flow']];
    }

    /**
     * 【流程公共附件】 保存公共附件
     *
     * @author dingpeng
     *
     * @param  [type]                         $data [description]
     *
     * @return [type]                               [description]
     */
    public function postFlowPublicAttachmentService($data, $runId)
    {
        if (!isset($data["attachments"]) || !isset($data["flow_process"]) || empty($data["flow_process"]) || !isset($data["process_id"]) || empty($data["process_id"])) {
            return false;
        }
        // 判断相关附件的字段权限，如果有上传、删除、编辑三个任一权限才继续执行保存或更新数据
        $flowRunInfo = app($this->flowRunRepository)->getDetail($runId, false, ['flow_id']);
        if (empty($flowRunInfo->flow_id)) {
            return false;
        }
        $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowRunInfo->flow_id, false, ['flow_type']);
        if (empty($flowTypeInfo->flow_type)) {
            return false;
        }
        if ($flowTypeInfo->flow_type == '1') {
            // 如果是固定流程的，检查相关附件字段控制权限是否包含：上传、删除、编辑，如果没有这些权限，则不保存或更新数据
            $controlOperationCheck = app($this->flowProcessControlOperationRepository)->checkControlOperationTypeByNodeIdAndControlId($data["flow_process"], 'attachment', ['operation_type' => [['attachmentUpload', 'attachmentDelete', 'attachmentEdit'], 'in']]);
            // 如果是自由节点，检查是否设置了相关附件的必填
            $flowRunProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search'=>['run_id'=>[$runId],'process_id'=>[$data["process_id"]],'flow_process'=>[$data["flow_process"]]],'order_by'=>['host_flag'=>'desc'],'returntype'=>'first','fields'=>['process_type','free_process_step']]);
            if($flowRunProcessInfo && $flowRunProcessInfo->process_type && $flowRunProcessInfo->process_type == 'free') {
                $freeStep = $flowRunProcessInfo->free_process_step;
                $freeNodeStepInfo = app($this->flowProcessFreeStepRepository)->getFreeNodeStepInfo($runId,$data["flow_process"],$freeStep);
                if ($freeNodeStepInfo) {
                    $freeStepRequiredInfo = $freeNodeStepInfo->required_control_id;
                    if ($freeStepRequiredInfo) {
                        $freeStepRequiredInfo = explode(",",$freeStepRequiredInfo);
                        if (in_array('attachment', $freeStepRequiredInfo)) {
                            $controlOperationCheck = 1;
                        }
                    }
                }

            }
            if (!$controlOperationCheck) {
                return false;
            }
        }
        $relationInfo = [
            "table_name" => "flow_run",
            "fileds" => [
                [
                    "field_name" => "run_id",
                    "field_type" => "integer",
                    "field_length" => "",
                    "field_common" => "流程ID",
                ],
                [
                    "field_name" => "user_id",
                    "field_type" => "string",
                    "field_length" => "20",
                    "field_common" => "用户ID",
                ],
                [
                    "field_name" => "edit_time",
                    "field_type" => "dateTime",
                    "field_length" => "",
                    "field_common" => "编辑时间",
                ],
                [
                    "field_name" => "flow_process",
                    "field_type" => "integer",
                    "field_length" => "",
                    "field_common" => "流程节点ID",
                ],
                [
                    "field_name" => "process_id",
                    "field_type" => "integer",
                    "field_length" => "",
                    "field_common" => "步骤ID",
                ],
            ],
        ];
        $runInfo = [
            "run_id" => [$runId],
            "user_id" => [$data["user_id"]],
            // "edit_time" => [date("Y-m-d H:i:s",time())],
            "flow_process" => [$data["flow_process"]],
            "process_id" => [$data["process_id"]],
            "wheres" => ["run_id" => [$runId]],
        ];
        if (isset($data["attachments"])) {
            app($this->attachmentService)->attachmentRelation($relationInfo, $runInfo, $data["attachments"]);
        }
        return "1";
    }

    /**
     * 【流程相关文档】 保存相关文档
     *
     * @author dingpeng
     *
     * @param  [type]                         $data [description]
     *
     * @return [type]                               [description]
     */
    public function addFlowRelatedDocumentService($data, $runId)
    {
        $documentInfo = [];
        if ($runId && $runObject = app($this->flowRunRepository)->getDetail($runId)) {
            $linkDocInfo = $runObject->link_doc ? trim($runObject->link_doc, ",") : '';
            if (!empty($linkDocInfo)) {
                $documentInfo = explode(",", $linkDocInfo);
            }
        }
        // 选择器change之后，选择器里剩下的文档
        if (isset($data["selectBoxDocumentInfo"])) {
            $selectBoxDocumentInfo = $data["selectBoxDocumentInfo"];
            // 当前用户能看到的，有权限的文档
            if (isset($data["permissionDocumentInfo"])) {
                $permissionDocumentInfo = $data["permissionDocumentInfo"];
                // 和 $selectBoxDocumentInfo 对比，不在 $selectBoxDocumentInfo 里面的，是要删除掉的
                if ($permissionDocumentInfo && count($permissionDocumentInfo)) {
                    $selectBoxDocumentInfoOnlyId = collect($selectBoxDocumentInfo);
                    $selectBoxDocumentInfoOnlyId = $selectBoxDocumentInfoOnlyId->pluck("document_id")->toArray();
                    foreach ($permissionDocumentInfo as $key => $value) {
                        if (!in_array($value["document_id"], $selectBoxDocumentInfoOnlyId)) {
                            $mainInfoKey = array_search($value["document_id"], $documentInfo);
                            unset($documentInfo[$mainInfoKey]);
                        }
                    }
                }
            }
            // 和已有文档对比，把新的插入进去
            if ($selectBoxDocumentInfo && count($selectBoxDocumentInfo)) {
                foreach ($selectBoxDocumentInfo as $key => $value) {
                    if (!in_array($value["document_id"], $documentInfo)) {
                        $documentInfo[] = $value["document_id"];
                    }
                }
            }
        }
        $linkDoc = implode(",", $documentInfo);
        // 保存
        return app($this->flowRunRepository)->updateData(["link_doc" => $linkDoc], ['run_id' => $runId]);
    }

    /**
     * 【流程子流程】 ，获取子流程列表
     *
     * @author dingpeng
     *
     * @param  [type]                         $data [description]
     *
     * @return [type]                               [description]
     */
    public function getFlowSubflowService($data)
    {
        $flowRunProcessInfoObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($data);
        $flowRunProcessInfoArray = array_unique(array_filter($flowRunProcessInfoObject->pluck("sub_flow_run_ids")->all()));
        $flowRunProcessInfoArray = explode(",", trim(implode($flowRunProcessInfoArray), ","));
        $flowRunInfoObject = app($this->flowRunRepository)->getFlowSubflowRunList($flowRunProcessInfoArray);
        return $flowRunInfoObject->toArray();
    }

    /**
     * 【流程图】 ，获取流程图页面的流程步骤数据--用于流程图
     *
     * @author dingpeng
     *
     * @param  [type]                         $data [description]
     *
     * @return [type]                               [description]
     */
    public function getFlowChartService($runId, $data, $userInfo = [])
    {
        // flow_run_has_many_flow_run_process
        // flow_run_has_many_flow_copy
        // 取流程图需要的信息--设置办理人/记录查看时间后再获取流程图数据
        $returnData = [];
        if($flowRunningInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, [])) {
            $flowRunningInfo = $flowRunningInfo->toArray();
            $max_process_id = $flowRunningInfo["max_process_id"];
            $flowTypeInfo = isset($flowRunningInfo["flow_run_has_one_flow_type"]) ? $flowRunningInfo["flow_run_has_one_flow_type"] : [];
            $flowType = isset($flowTypeInfo["flow_type"]) ? $flowTypeInfo["flow_type"] : "";
            if ($flowType == "2") {
                $handleWay = isset($flowTypeInfo["handle_way"]) ? $flowTypeInfo["handle_way"] : "";
            }
            $flowPorcessInfo = $flowRunningInfo["flow_run_has_many_flow_run_process"];
            foreach ($flowPorcessInfo as $keys => $values) {
                if ($values['process_type'] == 'free' && $values['free_process_step'] !== 0) {
                    $flowPorcessInfo[$keys]['flow_process'] = floatval($values['run_id']).floatval($values['free_process_step']).floatval($values['flow_process']).'00001';
                }
            }
            $processQueueInfo = collect($flowPorcessInfo)->pluck("process_id")->toArray();
            $nodeQueueInfo = collect($flowPorcessInfo)->pluck("flow_process")->toArray();
            $processHandleuserInfo = collect($flowPorcessInfo)->pluck("flow_run_process_has_one_user")->toArray();
            // 自由流程的时候，判断流程图当前节点展示什么东西
            // 最新步骤主办人
            $allHandleUser = [];
            $last_visited_user = '';
            $last_visited_time = '';
            $maxProcessHandleUserInfo = [];
            if (count($flowPorcessInfo) && $flowType == "2" && $handleWay !== "0") {
                foreach ($flowPorcessInfo as $key => $processValue) {
                    if ($processValue["process_id"] == $max_process_id) {
                        //记录所有办理人
                        $allHandleUser[$key] = $processValue['flow_run_process_has_one_user']['user_name'];
                        //记录最后查看的办理人
                        if ($processValue['last_visited_time']) {
                            if (!$last_visited_time) {
                                $last_visited_time = $processValue['last_visited_time'];
                                $last_visited_user = $processValue['flow_run_process_has_one_user']['user_name'];
                            } else {
                                if ($processValue['last_visited_time'] > $last_visited_time) {
                                    $last_visited_time = $processValue['last_visited_time'];
                                    $last_visited_user = $processValue['flow_run_process_has_one_user']['user_name'];
                                }
                            }
                        }
                        if ($processValue["host_flag"] == "1") {
                            $maxProcessHandleUserInfo = $processValue;
                        }
                    }
                }
            }
            $nodeUniqListInfo = [];
            $nodeUniqListHandleUserInfo = [];

            if (count($processQueueInfo)) {
                $cachePorcess = "";
                $count = -1;
                foreach ($processQueueInfo as $key => $value) {
                    if ($cachePorcess != $value) {
                        $cachePorcess = $value;
                        array_push($nodeUniqListInfo, $nodeQueueInfo[$key]);
                        array_push($nodeUniqListHandleUserInfo, $processHandleuserInfo[$key]['user_name']);
                        $count++;
                    }
                }
                if ($maxProcessHandleUserInfo) {
                    $nodeUniqListHandleUserInfo[$count] = $maxProcessHandleUserInfo['flow_run_process_has_one_user']['user_name'];
                } else {
                    if (in_array($userInfo['user_name'], $allHandleUser)) {
                        $nodeUniqListHandleUserInfo[$count] = $userInfo['user_name'];
                    } else {
                        if ($last_visited_user) {
                            $nodeUniqListHandleUserInfo[$count] = $last_visited_user;
                        }
                    }
                }
            }
			if(app($this->flowParseService)->isConcurrentFlow($flowRunningInfo["flow_id"])) {
				$flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList(['flow_id' => $flowRunningInfo["flow_id"]]);
				if (count($flowNodes) > 0) {
					$nodeUniqListInfo = [];
					foreach ($flowNodes as $value){
                        // 自由节点动态生成线
                        if ($value['process_type'] == 'free') {
                            foreach ($flowPorcessInfo as $key=>$_value) {
                                if (isset($_value['flow_run_process_has_one_flow_process']['node_id']) && $_value['flow_run_process_has_one_flow_process']['node_id'] == $value['node_id'] && isset($flowPorcessInfo[$key+1]['flow_process'])) {
                                    array_push($nodeUniqListInfo,$_value['flow_process']);
                                    array_push($nodeUniqListInfo,$flowPorcessInfo[$key+1]['flow_process']);
                                }
                            }
                        }else {
                            if (!empty(trim($value['process_to']))) {
                                $processArray = explode(',',$value['process_to']);
                                foreach ($processArray as $targetNodeId) {
                                    if (!empty($targetNodeId)) {
                                        if (app($this->flowParseService)->hascirculationNode($flowRunningInfo["flow_id"],$runId,$value['node_id'],$targetNodeId,$flowNodes)) {
                                            array_push($nodeUniqListInfo,$value['node_id']);
                                            array_push($nodeUniqListInfo,intval($targetNodeId));
                                            array_push($nodeUniqListInfo,[0,0]);
                                        }
                                    }
                                }
                            }
                        }
					}
				}
			}
            $returnData["node_uniq_list_info"] = $nodeUniqListInfo;
            $returnData["node_uniq_handle_user_list_info"] = $nodeUniqListHandleUserInfo;
        }

        return $returnData;
    }

    /**
     * 【流程图】 ，获取流程图页面的流程运行步骤数据
     * @param  [type] $runId [description]
     * @param  [type] $param  [description]
     * @return [type]        [description]
     */
    public function getFlowRunProcessData($runId, $param)
    {
        if(!headers_sent() && extension_loaded('zlib') && !empty($_SERVER['HTTP_ACCEPT_ENCODING']) && strstr($_SERVER['HTTP_ACCEPT_ENCODING'],'gzip') ){
            if (ob_get_contents()) ob_end_clean();
            ini_set('zlib.output_compression','On');
            ini_set('zlib.output_compression_level','4');
        }
        $filterStatus = isset($param["status"]) ? $param["status"] : "";
        if (isset($param['page']) && $param['page']>1 ) {
            if (Redis::exists('getFlowRunProcessData_' .$runId.'_'. $filterStatus)) {
                    $cachedata =  Redis::get('getFlowRunProcessData_' .$runId.'_'. $filterStatus);
                    $cachedata = unserialize( $cachedata);
                    $limit = isset($param['limit']) ? $param['limit'] : config('eoffice.flowChartPagesize');
                    $finalPage = false;
                    $offSet = (isset($param['page']) ? $param['page'] - 1 : 0) * $limit;
                    $list = array_slice($cachedata['resultProcessInfo'], $offSet, $limit);
                    if ($param['page'] * $limit >= count($cachedata['resultProcessInfo'])) {
                        $finalPage = true;
                    }
                    unset($cachedata['resultProcessInfo']);
                    $cachedata['finalPage'] = $finalPage;
                    $cachedata['list'] =  $list;
                    return $cachedata;
            }
        } else if (isset($param['page']) && $param['page'] == 'all' ){
            if (Redis::exists('getFlowRunProcessData_' .$runId.'_'. $filterStatus)) {
                    $cachedata =  Redis::get('getFlowRunProcessData_' .$runId.'_'. $filterStatus);
                    $cachedata = unserialize( $cachedata);
                    $limit = isset($param['limit']) ? $param['limit'] : config('eoffice.flowChartPagesize');
                    $list = array_slice($cachedata['resultProcessInfo'], $limit );
                    unset($cachedata['resultProcessInfo']);
                    $cachedata['finalPage'] = true;
                    $cachedata['list'] =  $list;

                    return $cachedata;
            }
        }
        // * unView 未查看
        // * hadView 已查看
        // * hadSubmit 已提交
        // * monitorSubmit 监控提交
        // * haveDone 已办理
        // * overtimeSubmit 系统超时提交
        // 取流程图需要的信息--设置办理人/记录查看时间后再获取流程图数据
        if($flowRunningInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, [])) {
            $flowRunningInfo = $flowRunningInfo->toArray();
            $maxProcessId = $flowRunningInfo["max_process_id"];

            $flowType = $flowRunningInfo["flow_run_has_one_flow_type"]["flow_type"];
            $flowPorcessInfo = $flowRunningInfo["flow_run_has_many_flow_run_process"];
			$originPorcessInfo = $flowPorcessInfo;
            $flowCopyInfo = $flowRunningInfo["flow_run_has_many_flow_copy"];
            // 拼接后的数据
            $resultProcessInfo = [];
            // 最终数据
            $total = 0;
            $list = [];
            // 统计办理/查看状态
            $statusInfo = [
                // 已提交
                "haveDone" => 0,
                // 已查看
                "hadView" => 0,
                // 未查看
                "unView" => 0,
            ];
			$flowProcessInfo = app($this->flowParseService)->getFlowProcessInfo($flowRunningInfo['flow_id']);
			$flowProcessArray = [];
			if($flowProcessInfo){
				foreach($flowProcessInfo as $v){
					$processTo = explode(',',$v['process_to']);
					if(count($processTo)>0){
						foreach($processTo as $k => $targetNodeId){
							if(!empty($targetNodeId)){
								$flowProcessArray[$v['node_id']][$targetNodeId] = $k;
							}
						}
					}
				}
			}
            $lastProcessFlag = "";
            if (count($flowPorcessInfo)) {
     //        	$flowPorcessArray = [] ;
     //        	foreach ($flowPorcessInfo as $processKey => $processValue) {
					// $index = $processValue['user_id'].$processValue['flow_process'].$processValue['process_id'].$processValue['by_agent_id'].$processValue['forward_user_id'];
     //        		if(!isset($flowPorcessArray[$index])){
     //        			$flowPorcessArray[$index] = $processKey;
     //        		}else{
     //        			unset($flowPorcessInfo[$processKey]);
     //        			$flowPorcessArray[$index] = $processKey;
     //        		}
     //        	}
                foreach ($flowPorcessInfo as $processKey => $processValue) {
                    $processId = $processValue["process_id"];
                    if (count($flowCopyInfo)) {
                        foreach ($flowCopyInfo as $copyKey => $copyValue) {
                            if ($processId == $copyValue["process_id"]) {
                                $flowCopyInfo[$copyKey]['flow_serial'] = $processValue['flow_serial'] ?? 0;
                                $flowCopyInfo[$copyKey]['branch_serial'] = $processValue['branch_serial'] ?? 0;
                                $flowCopyInfo[$copyKey]['process_serial'] = $processValue['process_serial'] ?? 0;
                            }
                            if ($lastProcessFlag == $copyValue["process_id"] && $processId != $copyValue["process_id"]) {
                                $processStatus = $this->getProcessStatus($copyValue, $maxProcessId, $flowType);
                                $copyValue["process_status"] = $processStatus;
                                $statusInfo = $this->sumSubmitUserCount($statusInfo, $processStatus);
                                // 计算筛选
                                $filterResult = $this->getFlowProcessVerifyFilter($processStatus, $filterStatus);
                                if ($filterResult) {
                                    array_push($resultProcessInfo, $copyValue);
                                }
                                $total++;
                                unset($flowCopyInfo[$copyKey]);
                            }
                        }
                    }
                    //获取退回人姓名
                    if (isset($processValue['send_back_user']) && !empty($processValue['send_back_user'])) {
                        $processValue['send_back_user_name'] = app($this->userService)->getUserName($processValue['send_back_user']);
                    } else {
                        $processValue['send_back_user_name'] = "";
                    }
                    $processValue["time_consume_string"] = $this->calculateSubmitTimeConsume($processValue);
                    $processStatus = $this->getProcessStatus($processValue, $maxProcessId, $flowType);
                    $processValue["process_status"] = $processStatus;
                    $statusInfo = $this->sumSubmitUserCount($statusInfo, $processStatus);
                    // 计算筛选
                    $filterResult = $this->getFlowProcessVerifyFilter($processStatus, $filterStatus);
                    if ($filterResult) {
                        array_push($resultProcessInfo, $processValue);
                    }
                    $total++;
                    $lastProcessFlag = $processId;
                }
                if (count($flowCopyInfo)) {
                    foreach ($flowCopyInfo as $copyKey => $copyValue) {
                        if ($lastProcessFlag == $copyValue["process_id"]) {
                            $processStatus = $this->getProcessStatus($copyValue, $maxProcessId, $flowType);
                            $copyValue["process_status"] = $processStatus;
                            $statusInfo = $this->sumSubmitUserCount($statusInfo, $processStatus);
                            // 计算筛选
                            $filterResult = $this->getFlowProcessVerifyFilter($processStatus, $filterStatus);
                            if ($filterResult) {
                                array_push($resultProcessInfo, $copyValue);
                            }
                            $total++;
                            unset($flowCopyInfo[$copyKey]);
                        }
                    }
                }
                // 处理一遍 processAddNumberMark
                $processAddNumberMark = "";
                $processAddNumberArray = [];
                if (count($resultProcessInfo)) {
					foreach($resultProcessInfo as $k => $value){
						$resultProcessInfo[$k]['process_sort'] = isset($value['origin_process']) && isset($flowProcessArray[$value['origin_process']][$value['flow_process']])?$flowProcessArray[$value['origin_process']][$value['flow_process']]:100;
					}
                	// $resultProcessInfo = app($this->flowParseService)->sortByFiled($resultProcessInfo,'process_id',SORT_ASC,'process_sort',SORT_ASC,'host_flag',SORT_DESC,'copy_id',SORT_ASC);
                    foreach ($resultProcessInfo as $resultKey => $resultValue) {
                        $resultProcessInfo[$resultKey]['flow_type'] = $flowType;
                        $resultProcessId = $resultValue["process_id"];
                        if ($processAddNumberMark != $resultProcessId) {
                            $processAddNumberMark = $resultProcessId;
                            $resultProcessInfo[$resultKey]["processAddNumberMark"] = $processAddNumberMark;
                            $processAddNumberArray[$resultProcessId] = $resultValue;
                        } else {
            				if (!empty($processAddNumberMark) && isset($resultValue['flow_process'] ) && $resultValue['flow_process'] != $processAddNumberArray[$resultValue["process_id"]]['flow_process']){
            				    if(!isset($processAddNumberArray[$resultValue["process_id"].$resultValue["flow_process"]])) {
            				        $processAddNumberArray[$resultValue["process_id"].$resultValue["flow_process"]] = $resultValue["process_id"];
            				        $resultProcessInfo[$resultKey]["processBranchNumberMark"] = $resultValue["process_id"];
            				    }
            				}
                        }
						$process_id = $resultValue['process_id'];
                        $runId = $resultValue['run_id'];
                        // 自由节点时，获取所在步骤的名称
                        if (isset($resultValue['process_type']) && $resultValue['process_type'] == 'free') {
                            $freeProcessStep = $resultValue['free_process_step'];
                            $nodeId = $resultValue['flow_process'];
                            if ($freeProcessStep) {
                                $freeProcessInfo = app($this->flowProcessFreeStepRepository)->getFreeNodeStepInfo($runId,$nodeId,$freeProcessStep);
                                if ($freeProcessInfo) {
                                    $resultProcessInfo[$resultKey]['flow_run_process_has_one_flow_process']['process_name'] = $freeProcessInfo->process_name;
                                }
                            }
                        }
                    }
                }

                // $total = count($resultProcessInfo);
                $limit = isset($param['limit']) ? $param['limit'] : config('eoffice.flowChartPagesize');
                $finalPage = false;
                if (isset($param['page']) && $param['page'] > 0) {
                    $offSet = (isset($param['page']) ? $param['page'] - 1 : 0) * $limit;
                    $list = array_slice($resultProcessInfo, $offSet, $limit);
                    if ($param['page'] * $limit >= count($resultProcessInfo)) {
                        $finalPage = true;
                    }
                } else {
                    $list = $resultProcessInfo;
                    $finalPage = true;
                }
            }
            $statusInfo["all"] = $total;
            $result = compact('total', 'list', 'finalPage', 'statusInfo');
			foreach($result['list'] as $k => $value){
				$result['list'][$k]['process_sort'] = isset($value['origin_process']) && isset($flowProcessArray[$value['origin_process']][$value['flow_process']])?$flowProcessArray[$value['origin_process']][$value['flow_process']]:100;
				if ($result['list'][$k]['process_sort'] == 100){
					foreach($flowProcessArray as $key => $val) {
						$return = false;
						foreach($val as $kid => $node){
							if ($kid == $value['flow_process']){
								$result['list'][$k]['process_sort'] = $node;
								$return = true;
								break;
							}
						}
						if ($return){
							break;
						}
					}
				}
			}
            // $result['list'] = app($this->flowParseService)->sortByFiled($result['list'],'process_id',SORT_ASC,'process_sort',SORT_ASC,'host_flag',SORT_DESC,'copy_id',SORT_ASC);
            //page为第一页时放置在缓存中
            if (isset($param['page']) && $param['page'] == 1) {
                Redis::del('getFlowRunProcessData_' .$runId.'_'. $filterStatus);
                Redis::set('getFlowRunProcessData_' .$runId.'_'. $filterStatus, serialize(compact('total', 'resultProcessInfo', 'finalPage', 'statusInfo')));
            }
            return $result;
        }
        return [];
    }

    /**
     * 流程图标签里，展示流程步骤的办理状态
     * unView 未查看
     * hadView 已查看
     * hadSubmit 已提交
     * monitorSubmit 监控提交
     * overtimeSubmit 系统超时提交
     * haveDone 已办理
     * @param  [type] $flowRunProcess [description]
     * @param  [type] $maxProcessId   [description]
     * @return [type]                 [description]
     */
    public function getProcessStatus($flowRunProcess, $maxProcessId, $flowType)
    {
        $returnTemplate = "";
        if (isset($flowRunProcess["process_flag"]) && $flowRunProcess["process_flag"]) {
            if ($flowRunProcess["host_flag"] == "1") {
                if ($flowRunProcess["process_flag"] == "1") {
                    $returnTemplate = "unView";
                }
                if ($flowRunProcess["process_flag"] == "2") {
                    if ($flowType == "1") {
                        $returnTemplate = "hadView";
                        if ($flowRunProcess["deliver_time"]) {
                            $returnTemplate = "hadSubmit";
                        }
                    } else {
                        // 自由流程
                        if (!$flowRunProcess["saveform_time"]) {
                            $returnTemplate = "hadView";
                        } else {
                            if ($flowRunProcess["process_id"] == $maxProcessId) {
                                if ($flowRunProcess["deliver_time"]) {
                                    $returnTemplate = "hadSubmit";
                                } else {
                                    $returnTemplate = "hadView";
                                }
                            } else {
                                $returnTemplate = "hadSubmit";
                            }
                        }
                    }
                }
                if ($flowRunProcess["process_flag"] == "3" || $flowRunProcess["process_flag"] == "4") {
                    if ($flowRunProcess["monitor_submit"]) {
                        $returnTemplate = "monitorSubmit";
                        // if ($flowRunProcess["flow_run_process_has_one_monitor_submit_user"]) {
                        //     $returnTemplate .= "[" + $flowRunProcess["flow_run_process_has_one_monitor_submit_user"]["user_name"] + "]";
                        // }
                    } else if (!empty($flowRunProcess["overhandle_time"]) && $flowRunProcess["overhandle_time"]!='0000-00-00 00:00:00') {
                        $returnTemplate = "overtimeSubmit";
                    } else {
                        $returnTemplate = "hadSubmit";
                    }
                }
            } else {
                if ($flowRunProcess["process_flag"] == "1") {
                    $returnTemplate = "unView";
                }
                if ($flowRunProcess["process_flag"] == "2") {
                    // if($flowType == "1") {
                    //     $returnTemplate = "hadView";
                    // } else {
                    //    // 自由流程
                    if (!$flowRunProcess["saveform_time"]) {
                        $returnTemplate = "hadView";
                    } else {
                        $returnTemplate = "haveDone";
                        if ($flowRunProcess["system_submit"]) {
                            $returnTemplate = "systemSubmit";
                        }
                    }
                    // }
                }
                if ($flowRunProcess["process_flag"] == "3") {
                    if ($flowRunProcess["monitor_submit"]) {
                        $returnTemplate = "monitorSubmit";
                    } else if (!empty($flowRunProcess["overhandle_time"]) && $flowRunProcess["overhandle_time"]!='0000-00-00 00:00:00'){
                        $returnTemplate = "overtimeSubmit";
                    } else {
                        if (!$flowRunProcess["process_time"]) {
                            $returnTemplate = "unView";
                        } else {
                            if (!$flowRunProcess["saveform_time"]) {
                                $returnTemplate = "hadView";
                            } else {
                                $returnTemplate = "haveDone";
                                if ($flowRunProcess["system_submit"]) {
                                    $returnTemplate = "systemSubmit";
                                }
                            }
                        }
                    }
                }
                if ($flowRunProcess["process_flag"] == "4") {
                    if ($flowRunProcess["monitor_submit"]) {
                        $returnTemplate = "monitorSubmit";
                    } else if(!empty($flowRunProcess["overhandle_time"]) && $flowRunProcess["overhandle_time"]!='0000-00-00 00:00:00'){
                         $returnTemplate = "overtimeSubmit";
                    } else {
                        if ($flowRunProcess["saveform_time"]) {
                            $returnTemplate = "haveDone";
                            if ($flowRunProcess["system_submit"]) {
                                $returnTemplate = "systemSubmit";
                            }
                        } else {
                            if (!$flowRunProcess["process_time"]) {
                                $returnTemplate = "unView";
                            } else {
                                $returnTemplate = "hadView";
                            }
                        }
                    }
                }
            }
        } else {
            // 抄送信息的办理状态
            if ($flowRunProcess["receive_time"]) {
                $returnTemplate = "hadView";
            } else {
                $returnTemplate = "unView";
            }
        }
        return $returnTemplate;
    }

    /**
     * 统计流程各个办理状态下人员的数量
     * @param  [type] $statusInfo    [description]
     * @param  [type] $processStatus [description]
     * @return [type]                [description]
     */
    public function sumSubmitUserCount($statusInfo, $processStatus)
    {
        if ($processStatus == "hadSubmit" || $processStatus == "haveDone" || $processStatus == "monitorSubmit" ||  $processStatus == "overtimeSubmit" || $processStatus == "systemSubmit" ) {
            $statusInfo["haveDone"] = ++$statusInfo["haveDone"];
        } else if ($processStatus == "hadView") {
            $statusInfo["hadView"] = ++$statusInfo["hadView"];
        } else if ($processStatus == "unView") {
            $statusInfo["unView"] = ++$statusInfo["unView"];
        }
        return $statusInfo;
    }

    /**
     * 验证当前流程状态是否满足筛选条件
     * $processStatus 流程步骤状态，可选：
     * unView 未查看
     * hadView 已查看
     * hadSubmit 已提交
     * monitorSubmit 监控提交
     * overtimeSubmit 超时提交
     * haveDone 已办理
     * $filterStatus 流程筛选参数，可选：
     * '' 全部
     * haveDone 已办理
     * hadView 已查看
     * unView 未查看
     * @param  [type] $processStatus [description]
     * @param  [type] $filterStatus  [description]
     * @return [type]                [返回 true ，表示通过了筛选。false ，表示不通过筛选，此数据不能进入主数组]
     */
    public function getFlowProcessVerifyFilter($processStatus, $filterStatus)
    {
        $result = true;
        if ($filterStatus) {
            if ($filterStatus == "haveDone") {
                if ($processStatus == "hadSubmit" || $processStatus == "haveDone" || $processStatus == "systemSubmit" || $processStatus == "monitorSubmit" || $processStatus == "overtimeSubmit") {
                    $result = true;
                } else {
                    $result = false;
                }
            } else if ($filterStatus == "hadView") {
                if ($processStatus != "hadView") {
                    $result = false;
                }
            } else if ($filterStatus == "unView") {
                if ($processStatus != "unView") {
                    $result = false;
                }
            }
        }
        return $result;
    }

    /**
     * 【流程运行】 获取某条流程所有节点，判断可流出节点；自由、固定流程都是这个，参数：run_id,user_id
     * 用是否已经走过此步骤作为前进还是后退的标准
     * 这函数，需要支持没有run_id的情况
     * @author dingpeng
     *
     * @param  [type]                 $data [description]
     *
     * @return [type]                       ["turningType": "unable"]=>[表示不能提交]
     */
    public function getFlowTransactProcess($data,$userInfo=[])
    {
        $monitorSubmit = "";
        if (isset($data["monitorSubmit"]) && $data["monitorSubmit"] == "monitor") {
            $monitorSubmit = "monitor";
        }
        $runId = $data["run_id"] ?? '';
        // 当前用户所在的节点，用来判断前进的节点还是后退的节点，这就是最新节点
        $currentFlowProcess = $data["flow_process"];
		$processId = isset($data["process_id"]) ? $data["process_id"] : '';

        if ($runId && $runObject = $data['flow_run_info'] ?? app($this->flowRunRepository)->getDetail($runId)) {
            $flowId = $runObject->flow_id;
            $maxProcessId = $runObject->max_process_id;
            $isSubmitToBackUser = false;
			$sendBackArray = [];
            // 判断是否符合退回直接提交
            // 判断当前流程是否设置退回直接提交至退回人
            $flowOtherInfo = $data['flow_type_info']->flowTypeHasOneFlowOthers ?? app($this->flowOthersRepository)->getFlowOthersInfo($flowId)->toArray();
            if (isset($flowOtherInfo[0]) && $flowOtherInfo[0]['flow_send_back_submit_method'] == 1) {
                //监控提交传的handle_user
                if ($monitorSubmit == "monitor" && isset($data['handle_user']) && !empty($data['handle_user'])) {
                    $data['user_id'] = $data['handle_user'];
                }
                // 判断是否为退回节点
                if (isset($data['free_process_step']) && $data['free_process_step']) {
                    $flowRunProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['free_process_step' => [$data['free_process_step']], 'run_id' => [$data["run_id"]],'flow_process' => [$data['flow_process']], 'user_last_step_flag'=>[1]],'order_by'=>['process_id'=>'desc'] ,'returntype' => 'first']);
                    if (!empty($flowRunProcessInfo) && $flowRunProcessInfo->is_back == 1) {
                        $isSubmitToBackUser = true;
                        $send_back_process = $flowRunProcessInfo->send_back_process;
                        $send_back_user = $flowRunProcessInfo->send_back_user;
                        $send_back_free_step = $flowRunProcessInfo->send_back_free_step;
                        if ($flowRunProcessInfo->host_flag == 1) {
                            $sendBackArray[] = $flowRunProcessInfo;
                        }
                    }
                }else {
                    $flowRunProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['flow_process' => [$data["flow_process"]],'process_id' => [$processId], 'run_id' => [$data["run_id"]], 'user_id' => [$data["user_id"]]], 'order_by'=>['process_id'=>'desc'], 'returntype' => 'first', "whereRaw" => ["((transact_time = '0000-00-00 00:00:00') OR (transact_time IS NULL))"]]);
					if (!empty($flowRunProcessInfo)) {
                        if ($flowRunProcessInfo->user_last_step_flag == 1 && $flowRunProcessInfo->is_back == 1) {
                            $isSubmitToBackUser = true;
                            $send_back_process = $flowRunProcessInfo->send_back_process;
                            $send_back_user = $flowRunProcessInfo->send_back_user;
                            $send_back_free_step = $flowRunProcessInfo->send_back_free_step;
                        }
                        if ($flowRunProcessInfo->is_back == 1) {
                            $sendBackArray[] = $flowRunProcessInfo;
                        }
					}
                }
            }
            if ($flowObject = $data['flow_type_info'] ?? app($this->flowTypeRepository)->getFlowTypeData(['fields' => ['flow_type', 'countersign', 'handle_way' ,'press_add_hour' ,'overtime_except_nonwork', 'open_debug'], 'search' => ["flow_id" => [$flowId]]])) {
                // 固定流程
                if ($flowObject->flow_type == "1") {
                    $flowProcessArray = app($this->flowParseService)->getProcessInfo($data["flow_process"]);
                    $isForceMerge = false; // 是否强制节点上的所有相连分支都到达
                    $merge =  $flowProcessArray['merge'] ?? 0;
                    if ($merge == 2) {
                        $isForceMerge = ! app($this->flowParseService)->isFinishedMergeProcess($flowProcessArray['flow_id'], $runId, $currentFlowProcess, $flowProcessArray['sort']);
                    }
                    // 取节点列表和出口条件列表
                    $flowProcessListObject = $this->getFlowNodeListService([], $flowId);
                    $flowNodesListArray = $flowProcessListObject["nodes"];
                    $maxProcessSortNumber = collect($flowNodesListArray)->pluck("sort")->max();
                    $flowEdgesListArray = $flowProcessListObject["edges"];
                    // 获取当前节点的节点信息
                    $currentProcessObject = app($this->flowProcessRepository)->getFlowProcessList(['fields' => ['process_concourse', 'sort', 'head_node_toggle', 'process_to', 'process_type', 'concurrent', 'branch' , 'merge'], 'search' => ['node_id' => [$currentFlowProcess]], 'returntype' => 'first']);
                    $isConcourse = $currentProcessObject["process_concourse"];
                    // 当前节点，在整个流程的所有节点里的序号，用来分辨是前进还是后退
                    $currentNodeSortNumber = $currentProcessObject["sort"];
                    // 首节点标识
                    $headNodeToggle = $currentProcessObject["head_node_toggle"];
                    // 可流出节点。现在的规则是：如果没有可流出节点，就是结束节点。
                    $processTo = $currentProcessObject["process_to"];
                    // 如果是第一节点，就不判断是否运行过，全部是前进。
                    // if($headNodeToggle != 1) {
                    //     // 获取此流程已运行过的所有步骤
                    //     $flowAlreadyRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList(["run_id" => $runId]);
                    //     // 已运行过的节点的node_id
                    //     $AlreadyRunNodeIdArray = $flowAlreadyRunProcessObject->pluck("flow_process")->toArray();
                    //     $AlreadyRunNodeIdArray = array_unique($AlreadyRunNodeIdArray);
                    // } else {
                    //     $AlreadyRunNodeIdArray = [];
                    // }
                    // 组织返回数据
                    $flowExportProcessArray = [];
                    $flowExportProcessArray['concurrent'] = isset($flowProcessArray['concurrent'])?$flowProcessArray['concurrent']:0;
                    $flowExportProcessArray['merge'] = isset($flowProcessArray['merge'])?$flowProcessArray['merge']:0;
                    $flowExportProcessArray['isForceMerge'] = $isForceMerge;
                    $flowExportProcessArray["maxNodeFlag"] = "0";
					$flowExportProcessArray["flowSendBackSubmitMethod"] = isset($flowOtherInfo[0]['flow_send_back_submit_method'])?$flowOtherInfo[0]['flow_send_back_submit_method']:0;
					$flowExportProcessArray["alowSelectHandle"] = isset($flowOtherInfo[0]['alow_select_handle'])?$flowOtherInfo[0]['alow_select_handle']:0;
                    if ($currentNodeSortNumber == $maxProcessSortNumber) {
                        $flowExportProcessArray["maxNodeFlag"] = "1";
                    }
                    // 计算会签和未办理人
					if(!isset($data["process_id"])){
						$data["process_id"] = $maxProcessId;
					}
					$data['search']     = ['user_id' => [$data['user_id'], '!=']];
					$data['handle_user']     =  "";
                    if ($haveNotTransactPersonObject = app($this->flowRunService)->getHaveNotTransactPerson($data)) {
                        $haveNotTransactPersonCount = $haveNotTransactPersonObject->count();
                    }
                    if (rtrim($processTo, ",")) {
                        // 如果会签且有未办理人员，不能流出
                        // 这是个流程级别的验证，应该出现在返回数据的第一级
                        if ($isConcourse == 1 && $haveNotTransactPersonCount > 0 && $monitorSubmit != "monitor") {
                            $flowExportProcessArray["concourse"] = "concourse";
                            // return $flowExportProcessArray;
                        }
                        $processToArray = explode(",", trim($processTo, ","));
                        if (!count($processToArray)) {
                            // 数据错误！！
                            return ['code' => ['0x000003', 'common']];
                        }
                        $condition = [];
                        // 拼接出口条件字段
                        if (count($flowEdgesListArray)) {
                            foreach ($flowEdgesListArray as $edgesKey => $edgesValue) {
                                $sourceId = $edgesValue["source_id"];
                                $targetId = $edgesValue["target_id"];
                                $condition_key = $sourceId. '_' .$targetId;
                                $condition[$condition_key] = $edgesValue["condition"];
                            }
                        }
                        // 循环流程定义的节点
                        if (count($flowNodesListArray)) {
                            $flowNodesListArray = array_column($flowNodesListArray, null, 'node_id');
                            foreach ($processToArray as $processToKey => $processToValue) {
                                if ($processToValue) {
                                    if (isset($flowNodesListArray[$processToValue]) && !empty($flowNodesListArray[$processToValue])) {
                                        $nodeInfo = $flowNodesListArray[$processToValue];
                                        if (isset($nodeInfo['process_type']) && $nodeInfo['process_type'] == 'free') {
                                            $nodeInfo['step_id'] = 0;
                                        }
                                        $nodeInfo["condition"] = "";
                                        // 拼接出口条件字段
                                        $_condition_key = $currentFlowProcess. '_' .$processToValue;
                                        if (isset($condition[$_condition_key])) {
                                            $nodeInfo["condition"] = $flowNodesListArray[$processToValue]['condition'] = $condition[$_condition_key];
                                        }
                                        // 默认设置为可以流出
                                        $nodeInfo["turningType"] = "able";
                                        $nodeInfo["limit_date"] = isset($nodeInfo["press_add_hour"]) && !empty($nodeInfo["press_add_hour"]) ? date('Y-m-d H:i:s' , time()+floatval($nodeInfo["press_add_hour"])* 3600 ) : 0;
                                        // 区分前进和后退--第二版，如果可流出节点的sort，大于当前节点，就是前进，小于，就是后退
                                        // 可流出节点的sort
                                        $outProcessSortNumber = $nodeInfo["sort"];
                                        if ($currentNodeSortNumber < $outProcessSortNumber) {
                                            // 前进
                                            $flowExportProcessArray["turn"][] = $nodeInfo;
                                        } else {
					                        // 如果退回节点是自由节点 分析确定退回点
                                            if (isset($nodeInfo['process_type']) && $nodeInfo['process_type'] == 'free') {
                                                $backProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($nodeInfo['node_id']);
                                                if ($backProcessInfo) {
                                                    $backProcessInfo = $backProcessInfo->toArray();
                                                    // 退回至最后步骤
                                                    if (isset($backProcessInfo['back_to_type']) && $backProcessInfo['back_to_type'] == 2) {
                                                        // 获取最后一步信息
                                                        $flowRunProcessLastStepInfo = app($this->flowRunService)->getFlowRunProcessLastStepInfo($runId,$nodeInfo['node_id']);
                                                        if ($flowRunProcessLastStepInfo) {
                                                            $freeRealProcessInfo = app($this->flowProcessRepository)->getDetail($nodeInfo['node_id']);
                                                            if ($freeRealProcessInfo) {
                                                                $freeRealProcessInfo = $freeRealProcessInfo->toArray();
                                                                $freeRealProcessInfo['step_id'] = $flowRunProcessLastStepInfo->step_id;
                                                                $freeRealProcessInfo['process_name'] = $flowRunProcessLastStepInfo->process_name;
                                                                $freeRealProcessInfo["limit_date"] = isset($freeRealProcessInfo["press_add_hour"]) && !empty($freeRealProcessInfo["press_add_hour"]) ? date('Y-m-d H:i:s' , time()+floatval($freeRealProcessInfo["press_add_hour"])* 3600 ) : 0;
                                                                $freeRealProcessInfo['condition'] = $nodeInfo['condition'];
                                                            } else {
                                                                $freeRealProcessInfo = [];
                                                            }
                                                            $nodeInfo = $freeRealProcessInfo;
                                                        }
                                                    }
                                                }
                                            }
                                            // 后退
                                            if (!empty($flowExportProcessArray['merge'])){
                                                // 提交到合并节点过的节点才能退回
                                                if (app($this->flowParseService)->isFlowProcessSubmit($runId,$nodeInfo['node_id'],$data["flow_process"])) {
                                                    // 此时还需要过滤重复退回，如果这个节点已经被退回过了，不能再选上
                                                    $flowRunProcess = app($this->flowRunProcessRepository)->entity->where(['run_id'=>$runId])->get()->toArray();
                                                    $canBack = app($this->flowParseService)->mergeHasBackTobranch($flowRunProcess,$data["flow_process"]);
                                                    if (in_array($nodeInfo['node_id'], $canBack)) {
                                                        $flowExportProcessArray["back"][] = $nodeInfo;
                                                    }
                                                }
                                            } else {
                                                $flowExportProcessArray["back"][] = $nodeInfo;
                                            }
                                        }
                                    }
                                }
                            }
                            $flowExportProcessArray["free"] = 'unable';

                            $trunInfo = $flowExportProcessArray["turn"] ?? [];
                            // 当前节点为自由节点
                            if($currentProcessObject['process_type'] == 'free') {
                                $flowExportProcessArray['oldOutProcessInfo'] = $trunInfo;
                                // 没有流出节点and可中途跳出and可结束时 增加结束出口
                                //if (empty($trunInfo) && )
                                $currentFreeProcessStep = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$currentFlowProcess);
                                $freeProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($currentFlowProcess);
                                // 并发时不可中途跳出
                                if ($currentProcessObject['concurrent']) {
                                    $freeProcessInfo->quit_type = 1;
                                }
                                $getCircularParam['currentFreeProcessStep'] = $currentFreeProcessStep;
                                $getCircularParam['runId'] = $runId;
                                $getCircularParam['currentFlowProcess'] = $currentFlowProcess;
                                $getCircularParam['userInfo'] = $userInfo ?? user();
                                $getCircularParam['freeProcessInfo'] = $freeProcessInfo;
                                $getCircularParam['submitType'] = '';
                                $getCircularParam['trunInfo'] = $trunInfo;
                                $getCircularParam['monitorSubmit'] = $monitorSubmit;
                                $getCircularSuperiorResult = $this->getCircularSuperiorResult($getCircularParam);
                                if ($getCircularSuperiorResult['cover']) {
                                    $flowExportProcessArray["turn"] = $getCircularSuperiorResult['result'];
                                }else {
                                    $flowExportProcessArray["turn"] = array_merge($flowExportProcessArray["turn"] ?? [],$getCircularSuperiorResult['result']);
                                }

                                if ($getCircularSuperiorResult['free']) {
                                    $flowExportProcessArray["free"] = $getCircularSuperiorResult['free'];
                                }
                                if ($getCircularSuperiorResult['free_set_info']) {
                                    $flowExportProcessArray["free_set_info"] = $getCircularSuperiorResult['free_set_info'];
                                }
                                // 判断退回
                                if ($currentFreeProcessStep != 0) {
                                    unset($flowExportProcessArray["back"]);
                                    $backInfo = app($this->flowRunService)->getFreeNodeRunBackSetpInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'flow_id'=>$flowId,'step_id'=>$currentFreeProcessStep]);
                                    if ($backInfo) {
                                        $flowExportProcessArray["back"] = $backInfo;
                                    }
                                }
                                if (empty($trunInfo) && ($freeProcessInfo->quit_type == 2 || ($currentFreeProcessStep == 0 && $freeProcessInfo->circular_superior == 2))) {
                                    $flowExportProcessArray["turn"] = $flowExportProcessArray["turn"] ?? [];
                                    $flowExportProcessArray["turn"][] = ["submitEnd" => "submitEnd"];
                                }
                            }
                            if (!isset($flowExportProcessArray["turn"]) || (isset($flowExportProcessArray["turn"]) && count($flowExportProcessArray["turn"]) == 0)) {
                                $turnEndArray = [];
                                $turnEndArray["submitEnd"] = "submitEnd";
                                if ($isConcourse == 1 && $haveNotTransactPersonCount > 0 && $monitorSubmit != "monitor") {
                                    $turnEndArray["concourse"] = "concourse";
                                }
                                $flowExportProcessArray["turn"][] = $turnEndArray;
                            }
                        }
                    } else {
                        // 结束节点
                        $flowExportProcessArray["submitEnd"] = "submitEnd";
                        if ($isConcourse == 1 && $haveNotTransactPersonCount > 0 && $monitorSubmit != "monitor") {
                            $flowExportProcessArray["concourse"] = "concourse";
                        }
                        $_flowExportProcessArray = $flowExportProcessArray;
                        // 当前节点为自由节点
                        if($currentProcessObject['process_type'] == 'free') {
                            $flowExportProcessArray = [];
                            $currentFreeProcessStep = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$currentFlowProcess);
                            $freeProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($currentFlowProcess);
                            $getCircularParam['currentFreeProcessStep'] = $currentFreeProcessStep;
                            $getCircularParam['runId'] = $runId;
                            $getCircularParam['currentFlowProcess'] = $currentFlowProcess;
                            $getCircularParam['userInfo'] = empty($userInfo) ? user() : $userInfo;
                            $getCircularParam['freeProcessInfo'] = $freeProcessInfo;
                            $getCircularParam['flowExportProcessArray'] = $_flowExportProcessArray;
                            $getCircularParam['submitType'] = 'end';
                            $getCircularSuperiorResult = $this->getCircularSuperiorResult($getCircularParam);
                            if ($getCircularSuperiorResult['cover']) {
                                $flowExportProcessArray["turn"] = $getCircularSuperiorResult['result'];
                            }else {
                                $flowExportProcessArray["turn"] = array_merge($flowExportProcessArray["turn"] ?? [],$getCircularSuperiorResult['result']);
                            }
                            if (!isset($flowExportProcessArray["turn"]) || empty($flowExportProcessArray["turn"])) {
                                $flowExportProcessArray = $_flowExportProcessArray;
                            }
                            if ($getCircularSuperiorResult['free']) {
                                $flowExportProcessArray["free"] = $getCircularSuperiorResult['free'];
                            }
                            if ($getCircularSuperiorResult['free_set_info']) {
                                $flowExportProcessArray["free_set_info"] = $getCircularSuperiorResult['free_set_info'];
                            }
                            // 判断退回
                            if ($currentFreeProcessStep != 0) {
                                unset($flowExportProcessArray["back"]);
                                $backInfo = app($this->flowRunService)->getFreeNodeRunBackSetpInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'flow_id'=>$flowId,'step_id'=>$currentFreeProcessStep]);
                                if ($backInfo) {
                                    $flowExportProcessArray["back"] = $backInfo;
                                }
                            }
                        }
                    }
                    if ((isset($flowExportProcessArray['submitEnd']) && $flowExportProcessArray['submitEnd'] == 'submitEnd') || (isset($flowExportProcessArray['turn'][0]['submitEnd']) && count($flowExportProcessArray['turn']) == 1 && $flowExportProcessArray['turn'][0]['submitEnd'] == 'submitEnd')) {
                        if (!empty($currentProcessObject['branch'])) {
                            // 如果是并发分支上的节点且没有流出节点的，判断是否此flow_serial还有没有未提交的节点和流程是否存在合并节点来判断是标记为已提交还是结束流程
                            // 判断当前序号内是否还有未提交的节点
                            $currentProcessIdAtFlowSerialInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList([
                                'fields' => 'flow_serial',
                                'search' => [
                                    'run_id'       => [$runId],
                                    'flow_process' => [$currentFlowProcess],
                                    'process_id'   => [$processId]
                                ],
                                'returntype' => 'first']);
                            $currentProcessIdAtFlowSerial = $currentProcessIdAtFlowSerialInfo->flow_serial ?? 0;
                            $currentFlowSerialUnSubmittedCount = app($this->flowRunProcessRepository)->getFlowRunProcessList([
                                'search' => [
                                    'run_id'        => [$runId],
                                    'flow_serial'   => [$currentProcessIdAtFlowSerial],
                                    'user_run_type' => [1],
                                    'host_flag'     => [1],
                                    'process_id'    => [$processId, '!=']
                                ],
                                'returntype' => 'count']);
                            // 如果没有未提交的节点
                            if (!$currentFlowSerialUnSubmittedCount) {
                                // 如果存在合并节点就标记为已提交，如果不存在合并节点就结束
                                $checkFlowHasMergeNode = app($this->flowProcessRepository)->getFlowProcessList([
                                    'search' => [
                                        'flow_id' => [$flowId],
                                        'merge'   => [0, '>'],
                                    ],
                                    'returntype' => 'first'
                                ]);
                                if (!empty($checkFlowHasMergeNode->merge)) {
                                    // 判断合并节点是否参与流转，如果没有参与流转相当于也不存在合并节点
                                    $checkMergeNodeJoin = app($this->flowRunProcessRepository)->getFlowRunProcessList([
                                        'search' => [
                                            'run_id'        => [$runId],
                                            'flow_serial'   => [$currentProcessIdAtFlowSerial],
                                            'host_flag'     => [1],
                                            'flow_process'  => [$checkFlowHasMergeNode->node_id]
                                        ],
                                        'returntype' => 'count']);
                                    if ($checkMergeNodeJoin) {
                                        $flowExportProcessArray['unforcedMergeNodeSubmitted'] = 1;
                                    }
                                }
                            // 如果还有未提交的节点，提交时处理为已提交
                            } else {
                                $flowExportProcessArray['unforcedMergeNodeSubmitted'] = 1;
                            }
                        }
                    }
					$showSendBackProcess = false;
					if ($isSubmitToBackUser) {
						if (empty($flowExportProcessArray['concurrent'])) {
							$showSendBackProcess = true;
						} else {
							if (isset($flowOtherInfo[0]) && $flowOtherInfo[0]['flow_send_back_submit_method'] == 1) {
								$showSendBackProcess = true;
							} else {
								$showSendBackProcess = false;
							}
						}
					}
                    // 设置退回直接提交时，默认可流出前进的节点为退回此流程的节点
                    if ($showSendBackProcess) {
                        $flowExportProcessArray["turn"] = [];
                        $flowExportProcessArray["sendBackProcess"] = $send_back_process;
                        $flowExportProcessArray["isBack"] = "1";
                        $flowExportProcessArray["free"] = "unable";
                        $flowExportProcessArray["sendBackUser"] = $send_back_user;
                        $flowExportProcessArray["sendBackProcessStep"] = $send_back_free_step;

                        $flowExportProcessArray["back_verify_condition"] = $flowOtherInfo[0]['flow_send_back_verify_condition'] ?? 1;
                        $backNodeInfo = [];
                        // 默认设置为可以流出
                        $backNodeInfo["turningType"] = "able";
                        // 自由节点退回 找到自由节点信息
                        if ($send_back_free_step) {
                            $backNodeInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$send_back_process,$send_back_free_step);
                            $flowExportProcessArray["turn"][] = $backNodeInfo;
                        } else {
                            if (!empty($sendBackArray)) {
                                $flowExportProcessArray["turn"] = [];
                                foreach ($sendBackArray as $value) {
                                    if (empty($value['deliver_time'])) {
                                        if (isset($value['send_back_process']) && isset($flowNodesListArray[$value['send_back_process']])) {
                                            $flowBackProcess = $flowNodesListArray[$value['send_back_process']];
                                            $flowBackProcess['send_back_status'] = 1;
                                            $flowExportProcessArray["turn"][] = $flowBackProcess;
                                        }
                                    }
                                }
                            }
                        }


                    }
					if(app($this->flowParseService)->isConcurrentFlow($flowId)){
						if (!empty($flowExportProcessArray['turn'])) {
							$turnArray = [];
                            foreach ($flowExportProcessArray['turn'] as $v) {
								if (!empty($v['node_id'])) {
                                    if (empty($currentProcessObject->concurrent) && empty($currentProcessObject->merge) && empty($currentProcessObject->branch)) {
                                        // 如果是普通节点，再提交时，需要判断是否当前节点是由并发分支退回的，如果是并发分支上退回的，再提交时就要原路径提交，过滤掉其他流出节点
                                        $checkCommonNodeBackOnBranch = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'flow_process' => [$currentFlowProcess], 'process_id' => [$processId], 'is_back' => [1], 'branch_serial' => ['0', '!=']], 'returntype' => 'first']);
                                        if (!empty($checkCommonNodeBackOnBranch->origin_process)) {
                                            if ($v['node_id'] != $checkCommonNodeBackOnBranch->origin_process) {
                                                continue;
                                            } else {
                                                $turnArray[] = $v;
                                                continue;
                                            }
                                        }
                                    }
                                    // 如果是并发节点
                                    if (!empty($currentProcessObject->concurrent)) {
                                        // 如果这个流出节点有已经并发过的记录，检查当前分支是否有未办理的并发节点，如果有则加入到流出节点中，如果没有并发记录的也加入到流出节点中
                                        $checkHasConcurrent = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' =>['flow_serial','branch_serial','process_flag'] ,'search' => ['run_id' => [$runId], 'flow_process' => [$v['node_id']], 'origin_process' => [$currentFlowProcess]], 'returntype' => 'first', 'order_by' => ['process_id' => 'desc']]);
                                        if (!empty($checkHasConcurrent->flow_serial) && !empty($checkHasConcurrent->branch_serial)) {
                                            $checkExport = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'flow_process' => [$currentFlowProcess], 'user_run_type' => [1], 'flow_serial' => [$checkHasConcurrent->flow_serial], 'branch_serial' => [$checkHasConcurrent->branch_serial]], 'returntype' => 'count']);
                                            if ($checkExport) {
                                                $turnArray[] = $v;
                                            } else {
                                               $chechBranchHasToDo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'process_flag' => ['3', '<'], 'flow_serial' => [$checkHasConcurrent->flow_serial], 'branch_serial' => [$checkHasConcurrent->branch_serial]], 'returntype' => 'count']);
                                                if ($chechBranchHasToDo) {
                                                    // 如果这个流出节点所在的分支还存在非并发节点的待办的也不再触发了
                                                    continue;
                                                }
                                                $currentProcessIdAtFlowSerialInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList([
                                                    'fields' => ['flow_serial','branch_serial','is_back'],
                                                    'search' => [
                                                        'run_id'       => [$runId],
                                                        'flow_process' => [$currentFlowProcess],
                                                        'process_id'   => [$processId]
                                                    ],
                                                    'returntype' => 'first']);
                                                $currentProcessIdAtFlowSerial = $currentProcessIdAtFlowSerialInfo->flow_serial ?? 0;
                                                $currentProcessIdAtBranchSerial = $currentProcessIdAtFlowSerialInfo->branch_serial ?? 0;
                                                $checkHasConcurrent = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' =>['flow_serial','branch_serial'] ,'search' => ['run_id' => [$runId], 'flow_process' => [$v['node_id']], 'origin_process' => [$currentFlowProcess], 'flow_serial' => [$currentProcessIdAtFlowSerial]], 'returntype' => 'first']);
                                                // 判断当前并发节点所在大序号内是否并发触发过此节点，如果没有就可以再触发
                                                if (empty($checkHasConcurrent->branch_serial)) {
                                                    if (!empty($currentProcessIdAtFlowSerialInfo->branch_serial)) {
                                                        // 如果是分支上的并发节点，此时再触发的话，如果其他分支上没有待办的并发节点就不再触发了
                                                        $outNodeAttribute = app($this->flowProcessRepository)->getFlowProcessList(['fields' => ['flow_id','branch'], 'search' => ['node_id' => [$v['node_id']]], 'returntype' => 'first']);
                                                        if (empty($outNodeAttribute->branch)) {
                                                            continue;
                                                        }
                                                        $sameBranchNodeList = app($this->flowProcessRepository)->getFlowProcessList(['fields' => ['node_id'], 'search' => ['branch' => [$outNodeAttribute->branch], 'flow_id' => [$outNodeAttribute->flow_id]]])->pluck('node_id')->toArray();
                                                        if (empty($sameBranchNodeList)) {
                                                            continue;
                                                        }
                                                        $hasConcurrentBranch = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' =>['flow_serial','branch_serial'] ,'search' => ['run_id' => [$runId], 'flow_process' => [$sameBranchNodeList, 'in'], 'flow_serial' => [$currentProcessIdAtFlowSerial]], 'returntype' => 'first']);
                                                        if (empty($hasConcurrentBranch)) {
                                                            $turnArray[] = $v;
                                                            continue;
                                                        }
                                                        $toDoConcurrentNode = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'flow_process' => [$currentFlowProcess], 'flow_serial' => [$currentProcessIdAtFlowSerial], 'branch_serial' => [$hasConcurrentBranch->branch_serial], 'user_run_type' => [1]], 'returntype' => 'count']);
                                                        if ($toDoConcurrentNode) {
                                                            $turnArray[] = $v;
                                                            continue;
                                                        }
                                                    } else {
                                                        $turnArray[] = $v;
                                                    }
                                                } else {
                                                    // 先判断是否存在待办的并发节点
                                                    $checkToDoConcurrentNodeCount = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'flow_process' => [$currentFlowProcess], 'user_run_type' => [1], 'flow_serial' => [$currentProcessIdAtFlowSerial], 'branch_serial' => [$checkHasConcurrent->branch_serial]], 'returntype' => 'count']);
                                                    if ($checkToDoConcurrentNodeCount) {
                                                        $checkBackBranch = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'flow_process' => [$v['node_id']], 'outflow_process' => [$currentFlowProcess], 'flow_serial' => [$currentProcessIdAtFlowSerial]], 'returntype' => 'count']);
                                                        if ($checkBackBranch) {
                                                            // 如果是再次并发的节点，判断流出节点是否是退回到并发节点的，由此可以判断出并发节点在哪个分支退回的
                                                            $turnArray[] = $v;
                                                        } else {
                                                            // 如果不是由流出节点直接退回到并发节点的，可能会存在跨节点退回到并发节点的，就不能判断当前并发节点所在分支，查询当前分支第一个节点设置里的分支号，与流出节点匹配则可以流出
                                                            $currentProcessAtBranchFirstNode = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' => 'flow_process','search' => ['run_id' => [$runId], 'flow_serial' => [$currentProcessIdAtFlowSerial], 'branch_serial' => [$currentProcessIdAtBranchSerial]], 'order_by' => ['branch_serial' => 'asc'], 'returntype' => 'first']);
                                                            if (!empty($currentProcessAtBranchFirstNode->flow_process)) {
                                                                $currentProcessAtBranchFirstNodeInfo = app($this->flowProcessRepository)->getFlowProcessList(['fields' => 'branch', 'search' => ['node_id' => [$currentProcessAtBranchFirstNode->flow_process]], 'returntype' => 'first']);
                                                                if (!empty($currentProcessAtBranchFirstNodeInfo->branch) && $currentProcessAtBranchFirstNodeInfo->branch == $v['branch']) {
                                                                    $turnArray[] = $v;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            $turnArray[] = $v;
                                        }
                                    } else {
                                        $NextNodeId = $v['node_id'];
                                        // 上级提交时，验证下一步是否是合并节点，需要从oldOutProcessInfo中查找
                                        if (isset($v['is_superior']) && $v['is_superior'] && isset($flowExportProcessArray['oldOutProcessInfo'])) {
                                            foreach ($flowExportProcessArray['oldOutProcessInfo'] as $oldValue) {
                                                if (isset($oldValue['merge']) && $oldValue['merge']) {
                                                    $NextNodeId = $oldValue['node_id'];
                                                }
                                            }
                                        }
                                        $nextProcessInfo = app($this->flowParseService)->getProcessInfo($NextNodeId);
                                        if (!empty($nextProcessInfo['merge'])) {
                                            // 非强制合并的，如果有合并节点已结束或提交，其他分支再往合并节点提交时，直接标记为已提交，不再产生新的合并节点步骤，这里不返回流出节点
                                            if ($nextProcessInfo['merge'] == '1') {
                                                if ($runObject->current_step == 0) {
                                                    $flowExportProcessArray['unforcedMergeNodeSubmitted'] = true;
                                                    continue;
                                                }
                                                if (!empty($nextProcessInfo['process_to'])) {
                                                    $mergeNodeProcessTo = explode(',', trim($nextProcessInfo['process_to'], ','));
                                                    $getMergeNodeOutNodeIdArray = app($this->flowProcessRepository)->getFlowProcessList(['search' => ['flow_id' => [$flowId], 'sort' => [$nextProcessInfo['sort'], '>'],
                                                        'node_id' => [$mergeNodeProcessTo, 'in']]])->pluck('node_id')->toArray();
                                                    if (!empty($getMergeNodeOutNodeIdArray)) {
                                                        // 查询合并节点是否提交，要查询比当前节点所在flow_serial大的提交记录才是真正的提交
                                                        $currentProcessIdAtFlowSerialInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList([
                                                            'fields' => 'flow_serial',
                                                            'search' => [
                                                                'run_id'        => [$runId],
                                                                'flow_process'  => [$currentFlowProcess],
                                                                'process_id'    => [$processId]
                                                            ],
                                                            'returntype' => 'first']);
                                                        $currentProcessIdAtFlowSerial = $currentProcessIdAtFlowSerialInfo->flow_serial ?? 0;
                                                        $checkMergeNodeHasBeenSubmitted = app($this->flowRunProcessRepository)->getFlowRunProcessList([
                                                            'search' => [
                                                                'run_id'        => [$runId],
                                                                'flow_process'  => [$getMergeNodeOutNodeIdArray, 'in'],
                                                                'is_back'       => [0],
                                                                'flow_serial'   => [$currentProcessIdAtFlowSerial, '>']
                                                            ],
                                                            'returntype' => 'count']);
                                                        if ($checkMergeNodeHasBeenSubmitted) {
                                                            $flowExportProcessArray['unforcedMergeNodeSubmitted'] = true;
                                                            continue;
                                                        }
                                                    }
                                                }
                                            }
                                            $turnArray[] = $v;
                                            continue;
                                        } else {
                                            $turnArray[] = $v;
                                        }
                                    }
								} else {
									$turnArray[] = $v;
								}
							}
							$flowExportProcessArray['turn'] = $turnArray;
						}
					}
                    $flowExportProcessArray['maxProcessId'] = $maxProcessId;
                    $flowExportProcessArray['open_debug'] = $flowObject->open_debug;
                    if (!empty($flowExportProcessArray['unforcedMergeNodeSubmitted'])) {
                        $flowExportProcessArray['turn'] = [['submitEnd' => 'submitEnd']];
                    }
                    if (isset($flowExportProcessArray['oldOutProcessInfo'])) {
                        unset($flowExportProcessArray['oldOutProcessInfo']);
                    }
                    return $flowExportProcessArray;
                } else if ($flowObject->flow_type == "2") {
                    // 自由流程
                    if ($flowTransactProcessObject = app($this->flowRunProcessRepository)->getFreeFlowTransactProcess($data)) {
                        // 组织返回数据
                        $flowExportProcessArray = [];
                        $flowExportProcessArray['concurrent'] = isset($flowProcessArray['concurrent'])?$flowProcessArray['concurrent']:0;
                        $flowExportProcessArray['merge'] = isset($flowProcessArray['merge'])?$flowProcessArray['merge']:0;
                        // $flowExportProcessArray['isForceMerge'] = $isForceMerge; // 20201103，自由流程应该用不到这个参数，先删除
                        // 计算会签和未办理人
                        $data["process_id"] = $maxProcessId;
                        if ($haveNotTransactPersonObject = app($this->flowRunService)->getHaveNotTransactPerson($data)) {
                            $haveNotTransactPersonCount = $haveNotTransactPersonObject->count();
                        }
                        $isConcourse = $flowObject->countersign;
                        // 不能提交到下一个步骤
                        if ($isConcourse == 1 && $haveNotTransactPersonCount > 0 && $monitorSubmit != "monitor") {
                            $flowExportProcessArray["concourse"] = "concourse";
                            // return $flowExportProcessArray;
                        }
                        // 下一步骤信息
                        $replaceStr = ['process_id' => ($maxProcessId + 1)];
                        // 第n步
                        $stepStr = trans('flow.0x030011', $replaceStr);
                        $flowTransactProcessNextInfo = [
                            "run_id" => $runId,
                            "process_id" => $maxProcessId + 1,
                            // 和固定流程一致，放一个node_id，来标识下一步骤的id
                            "node_id" => $maxProcessId + 1,
                            "process_name" => $stepStr,
                            "handleWay" => $flowObject->handle_way,
                            'overtime_except_nonwork' => $flowObject->overtime_except_nonwork,
                            'press_add_hour' => $flowObject->press_add_hour,
                            'limit_date' =>isset($flowObject->press_add_hour) && !empty($flowObject->press_add_hour)  ? date('Y-m-d H:i:s' , time()+floatval($flowObject->press_add_hour)* 3600 ) : 0,
                        ];
                        // 返回下一步骤信息
                        $flowExportProcessArray["turn"][] = $flowTransactProcessNextInfo;
                        $flowExportProcessArray['maxProcessId'] = $maxProcessId;
                        return $flowExportProcessArray;
                    }
                }
            }
        } else {
            // 新建流程，不选人提交情况下，没有run_id参数，只需要简单判断下一步信息
            // 第一节点，不判断会签
            // 第一节点，不判断是否运行过，全部是前进。
            if (isset($data["flow_id"])) {
                $flowId = $data["flow_id"];
                $maxProcessId = 1;
                if ($flowObject = $data['flow_type_info'] ?? app($this->flowTypeRepository)->getFlowTypeData(['fields' => ['flow_type', 'handle_way'], 'search' => ["flow_id" => [$flowId]]])) {
                    // 固定流程
                    if ($flowObject->flow_type == "1") {
                        $flowProcessArray = app($this->flowParseService)->getProcessInfo($data["flow_process"]);
                        $isForceMerge = false; // 是否强制节点上的所有相连分支都到达
                        $merge =  $flowProcessArray['merge'] ?? 0;
                        if ($merge == 2) {
                            $isForceMerge = ! app($this->flowParseService)->isFinishedMergeProcess($flowProcessArray['flow_id'], $runId, $currentFlowProcess, $flowProcessArray['sort']);
                        }
                        // 取节点列表和出口条件列表
                        $flowProcessListObject = $this->getFlowNodeListService([], $flowId);
                        $flowNodesListArray = $flowProcessListObject["nodes"];
                        $flowEdgesListArray = $flowProcessListObject["edges"];
                        // 获取当前节点的节点信息
                        $currentProcessObject = app($this->flowProcessRepository)->getFlowProcessList(['fields' => ['process_to', 'process_type'], 'search' => ['node_id' => [$currentFlowProcess]], 'returntype' => 'first']);;
                        // 可流出节点。现在的规则是：如果没有可流出节点，就是结束节点。
                        $processTo = $currentProcessObject["process_to"];
                        // 组织返回数据
                        $flowExportProcessArray = [];
                        $flowExportProcessArray['concurrent'] = isset($flowProcessArray['concurrent'])?$flowProcessArray['concurrent']:0;
                        $flowExportProcessArray['merge'] = isset($flowProcessArray['merge'])?$flowProcessArray['merge']:0;
                        $flowExportProcessArray['isForceMerge'] = $isForceMerge;
                        if (rtrim($processTo, ",")) {
                            $processToArray = explode(",", trim($processTo, ","));
                            if (!count($processToArray)) {
                                // 数据错误！！
                                return ['code' => ['0x000003', 'common']];
                            }
                            // 循环流程定义的节点
                            if (count($flowNodesListArray)) {
                                // 重组流程定义的节点，将process_id作为key
                                // $flowNodesListArrayByProcessKey = [];
                                // foreach ($flowNodesListArray as $nodesKey => $nodesValue) {
                                //     $flowNodesListArrayByProcessKey[$nodesValue["node_id"]] = $nodesValue;
                                // }
                                $flowNodesListArray = array_column($flowNodesListArray, null, 'node_id');
                                foreach ($processToArray as $processToKey => $processToValue) {
                                    if ($processToValue) {
                                        if (isset($flowNodesListArray[$processToValue])) {
                                            $nodeInfo = $flowNodesListArray[$processToValue];
                                            if (isset($nodeInfo['process_type']) && $nodeInfo['process_type'] == 'free') {
                                                $nodeInfo['step_id'] = 0;
                                            }
                                            $nodeInfo["condition"] = "";
                                            // 拼接出口条件字段
                                            if (count($flowEdgesListArray)) {
                                                foreach ($flowEdgesListArray as $edgesKey => $edgesValue) {
                                                    $sourceId = $edgesValue["source_id"];
                                                    $targetId = $edgesValue["target_id"];
                                                    if ($sourceId == $currentFlowProcess && $targetId == $processToValue) {
                                                        $nodeInfo["condition"] = $edgesValue["condition"];
                                                    }
                                                }
                                            }
                                            // 默认设置为可以流出
                                            $nodeInfo["turningType"] = "able";
                                            // 前进
                                            $flowExportProcessArray["turn"][] = $nodeInfo;
                                        }
                                    }
                                }
                                $flowExportProcessArray["free"] = 'unable';
                                $trunInfo = $flowExportProcessArray["turn"] ?? [];
                                // 当前节点为自由节点
                                if($currentProcessObject['process_type'] == 'free') {
                                    $currentFreeProcessStep = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$currentFlowProcess);
                                    $freeProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($currentFlowProcess);
                                    // 并发时不可中途跳出
                                    if ($currentProcessObject['concurrent']) {
                                        $freeProcessInfo->quit_type = 1;
                                    }
                                    $getCircularParam['currentFreeProcessStep'] = $currentFreeProcessStep;
                                    $getCircularParam['runId'] = $runId;
                                    $getCircularParam['currentFlowProcess'] = $currentFlowProcess;
                                    $getCircularParam['userInfo'] = empty($userInfo) ? user() : $userInfo;
                                    $getCircularParam['freeProcessInfo'] = $freeProcessInfo;
                                    $getCircularParam['submitType'] = '';
                                    $getCircularParam['trunInfo'] = $trunInfo;
                                    $getCircularSuperiorResult = $this->getCircularSuperiorResult($getCircularParam);
                                    if ($getCircularSuperiorResult['cover']) {
                                        $flowExportProcessArray["turn"] = $getCircularSuperiorResult['result'];
                                    }else {
                                        $flowExportProcessArray["turn"] = array_merge($flowExportProcessArray["turn"] ?? [],$getCircularSuperiorResult['result']);
                                    }
                                    if ($getCircularSuperiorResult['free']) {
                                        $flowExportProcessArray["free"] = $getCircularSuperiorResult['free'];
                                    }
                                    if ($getCircularSuperiorResult['free_set_info']) {
                                        $flowExportProcessArray["free_set_info"] = $getCircularSuperiorResult['free_set_info'];
                                    }
                                    if (empty($trunInfo) && ($freeProcessInfo->quit_type == 2 || ($currentFreeProcessStep == 0 && $freeProcessInfo->circular_superior == 2))) {
                                        $flowExportProcessArray["turn"] = $flowExportProcessArray["turn"] ?? [];
                                        $flowExportProcessArray["turn"][] = ["submitEnd" => "submitEnd"];
                                    }
                                    // 判断退回
                                    if ($currentFreeProcessStep != 0) {
                                        unset($flowExportProcessArray["back"]);
                                        $backInfo = app($this->flowRunService)->getFreeNodeRunBackSetpInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'flow_id'=>$flowId,'step_id'=>$currentFreeProcessStep]);
                                        if ($backInfo) {
                                            $flowExportProcessArray["back"] = $backInfo;
                                        }

                                    }
                                }
                            }
                        } else {
                            // 结束节点
                            $flowExportProcessArray["submitEnd"] = "submitEnd";
                            $_flowExportProcessArray = $flowExportProcessArray;
                            // 当前节点为自由节点
                            if($currentProcessObject['process_type'] == 'free') {
                                $flowExportProcessArray = [];
                                $currentFreeProcessStep = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$currentFlowProcess);
                                $freeProcessInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($currentFlowProcess);
                                $getCircularParam['currentFreeProcessStep'] = $currentFreeProcessStep;
                                $getCircularParam['runId'] = $runId;
                                $getCircularParam['currentFlowProcess'] = $currentFlowProcess;
                                $getCircularParam['userInfo'] = empty($userInfo) ? user() : $userInfo;
                                $getCircularParam['freeProcessInfo'] = $freeProcessInfo;
                                $getCircularParam['flowExportProcessArray'] = $_flowExportProcessArray;
                                $getCircularParam['submitType'] = 'end';
                                $getCircularSuperiorResult = $this->getCircularSuperiorResult($getCircularParam);
                                if ($getCircularSuperiorResult['cover']) {
                                    $flowExportProcessArray["turn"] = $getCircularSuperiorResult['result'];
                                }else {
                                    $flowExportProcessArray["turn"] = array_merge($flowExportProcessArray["turn"] ?? [],$getCircularSuperiorResult['result']);
                                }
                                if (!isset($flowExportProcessArray["turn"]) || empty($flowExportProcessArray["turn"])) {
                                    $flowExportProcessArray = $_flowExportProcessArray;
                                }
                                if ($getCircularSuperiorResult['free']) {
                                    $flowExportProcessArray["free"] = $getCircularSuperiorResult['free'];
                                }
                                if ($getCircularSuperiorResult['free_set_info']) {
                                    $flowExportProcessArray["free_set_info"] = $getCircularSuperiorResult['free_set_info'];
                                }
                            }
                        }
                        return $flowExportProcessArray;
                    } else if ($flowObject->flow_type == "2") {
                        // 自由流程
                        if ($flowTransactProcessObject = app($this->flowRunProcessRepository)->getFreeFlowTransactProcess($data)) {
                            // 组织返回数据
                            $flowExportProcessArray = [];
                            $flowExportProcessArray['concurrent'] = isset($flowProcessArray['concurrent'])?$flowProcessArray['concurrent']:0;
                            $flowExportProcessArray['merge'] = isset($flowProcessArray['merge'])?$flowProcessArray['merge']:0;
                            // $flowExportProcessArray['isForceMerge'] = $isForceMerge; // 20201103，自由流程应该用不到这个参数，先删除
                            // 下一步骤信息
                            $replaceStr = ['process_id' => ($maxProcessId + 1)];
                            // 第n步
                            $stepStr = trans('flow.0x030011', $replaceStr);
                            $flowTransactProcessNextInfo = [
                                "run_id" => $runId,
                                "process_id" => $maxProcessId + 1,
                                // 和固定流程一致，放一个node_id，来标识下一步骤的id
                                "node_id" => $maxProcessId + 1,
                                "process_name" => $stepStr,
                                "handleWay" => $flowObject->handle_way,
                                'overtime_except_nonwork' => $flowObject->overtime_except_nonwork,
                                'press_add_hour' => $flowObject->press_add_hour,
                            ];
                            // 返回下一步骤信息
                            $flowExportProcessArray["turn"][] = $flowTransactProcessNextInfo;
                            return $flowExportProcessArray;
                        }
                    }
                }
            }
        }
    }
    public function getCircularSuperiorResult($data) {
        $currentFreeProcessStep  = $data['currentFreeProcessStep'];
        $runId                   = $data['runId'];
        $currentFlowProcess      = $data['currentFlowProcess'];
        $userInfo                = $data['userInfo'];
        $freeProcessInfo         = $data['freeProcessInfo'];
        $_flowExportProcessArray = $data['flowExportProcessArray'] ?? '';
        $submitType              = $data['submitType'] ?? '';
        $trunInfo                = $data['trunInfo'] ?? '';
        $monitorSubmit           = $data['monitorSubmit'] ?? '';
        $result = [];
        $cover = false;
        if($freeProcessInfo->circular_superior == 1) {
            $currentProcessInfo = app($this->flowRunProcessRepository)->getRunFreeNodeStep($runId,$currentFlowProcess,$currentFreeProcessStep);
            // 当前所在步骤的自由节点stepid
            $maxProcessStep = app($this->flowRunService)->getRunCurrentFreeNodeStep($runId,$currentFlowProcess);
            $lastUserId = '';
            // 监控提交时 获取原办理人的上级信息
            if ($monitorSubmit == "monitor") {
                // 获取最新步骤办理人信息
                $lastUserId = $currentProcessInfo->user_id;
            }
            // 如果有委托 按设置来寻找上级
            if($currentProcessInfo && $currentProcessInfo->by_agent_id) {
                $lastUserId = $currentProcessInfo->user_id;
                if($freeProcessInfo->entrust_get_superior_rule == 1) {
                    $lastUserId = $currentProcessInfo->by_agent_id;
                }
            }
            if ($lastUserId) {
                $lastUserInfo = app($this->userService)->getUserAllData($lastUserId)->toArray();
                $userInfo['user_id'] = $lastUserId;
                $userInfo['user_name'] = $lastUserInfo['user_name'];
                //部门id
                $userInfo['dept_id'] = $lastUserInfo['user_has_one_system_info']['dept_id'];
                //角色信息
                $userInfo['role_id'] = [];
                foreach ($lastUserInfo['user_has_many_role'] as $key => $value) {
                    $userInfo['role_id'][] = $value['role_id'];
                }
            }
            $freeProcessRunInfo = app($this->flowRunService)->getFreeNodeStepList($runId,$currentFlowProcess);
            if ($freeProcessRunInfo && count($freeProcessRunInfo) > 0) {
                $nextProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$currentFlowProcess,$currentFreeProcessStep+1);

                // 如果是最新步骤
                if ($currentFreeProcessStep == $maxProcessStep) {
                    if ($nextProcessInfo && !$lastUserId) {
                        if ($nextProcessInfo) {
                            $nextProcessInfo = $nextProcessInfo->toArray();
                            // 如果不允许中途退出
                            if ($freeProcessInfo->quit_type == 1) {
                                $result = [];
                                $cover = true;
                            } else {
                                if ($submitType == 'end') {
                                    $result = [];
                                    $result[] = $_flowExportProcessArray;
                                    $cover = true;
                                }
                            }
                            $result[] = $nextProcessInfo;
                        }else {
                            $resultDate = app($this->flowRunService)->circularSuperiorGetNextNodeInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'step_id'=>$currentFreeProcessStep],$userInfo);
                            if ($resultDate) {
                                // 如果不允许中途退出
                                if ($freeProcessInfo->quit_type == 1) {
                                    $result = [];
                                    $cover = true;
                                } else {
                                    if ($submitType == 'end') {
                                        $result = [];
                                        $result[] = $_flowExportProcessArray;
                                        $cover = true;
                                    }
                                }
                                $result[] = $resultDate;
                            }else {
                                if ($submitType == 'end') {
                                    //没有上级了
                                    $result[] = $_flowExportProcessArray;
                                }else{
                                    //没有上级了
                                    $result = $trunInfo;
                                    $cover = true;
                                }
                            }
                        }
                    }else {
                        // 删除已经生成的下一步自定义步骤，根据最新的依据人重新生成
                        app($this->flowProcessFreeStepRepository)->deleteByWhere(['run_id' => [$runId], 'node_id' => [$currentFlowProcess], 'step_id' => [$currentFreeProcessStep+1]]);
                        $resultDate = app($this->flowRunService)->circularSuperiorGetNextNodeInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'step_id'=>$currentFreeProcessStep],$userInfo);
                        if ($resultDate) {
                            // 如果不允许中途退出
                            if ($freeProcessInfo->quit_type == 1) {
                                $result = [];
                                $cover = true;
                            } else {
                                if ($submitType == 'end') {
                                    $result = [];
                                    $cover = true;
                                    $result[] = $_flowExportProcessArray;
                                }
                            }
                            $result[] = $resultDate;
                        }else {
                            if ($submitType == 'end') {
                                //没有上级了
                                $result[] = $_flowExportProcessArray;
                            }else{
                                //没有上级了
                                $result = $trunInfo;
                                $cover = true;
                            }

                        }
                    }
                }else {
                    if ($nextProcessInfo) {
                        $nextProcessInfo = $nextProcessInfo->toArray();
                        // 如果不允许中途退出
                        if ($freeProcessInfo->quit_type == 1) {
                            $result = [];
                            $cover = true;
                        } else {
                            if ($submitType == 'end') {
                                $result = [];
                                $result[] = $_flowExportProcessArray;
                                $cover = true;
                            }
                        }
                        $result[] = $nextProcessInfo;
                    }else {
                        $resultDate = app($this->flowRunService)->circularSuperiorGetNextNodeInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'step_id'=>$currentFreeProcessStep],$userInfo);
                        if ($resultDate) {
                            // 如果不允许中途退出
                            if ($freeProcessInfo->quit_type == 1) {
                                $result = [];
                                $cover = true;
                            } else {
                                if ($submitType == 'end') {
                                    $result = [];
                                    $result[] = $_flowExportProcessArray;
                                    $cover = true;
                                }
                            }
                            $result[] = $resultDate;
                        }else {
                            if ($submitType == 'end') {
                                //没有上级了
                                $result[] = $_flowExportProcessArray;
                            }else{
                                //没有上级了
                                $result = $trunInfo;
                                $cover = true;
                            }
                        }
                    }
                }
            }else {
                $resultDate = app($this->flowRunService)->circularSuperiorGetNextNodeInfo(['run_id'=>$runId,'node_id'=>$currentFlowProcess,'step_id'=>$currentFreeProcessStep],$userInfo);
                if($resultDate) {
                    // 如果不允许中途退出
                    if ($freeProcessInfo->quit_type == 1) {
                        $result = [];
                        $cover = true;
                    } else {
                        if ($submitType == 'end') {
                            $result = [];
                            $result[] = $_flowExportProcessArray;
                            $cover = true;
                        }
                    }
                    $result[] = $resultDate;
                }else {
                    if ($submitType == 'end') {
                        //没有上级了
                        $result[] = $_flowExportProcessArray;
                    }else{
                        //没有上级了
                        $result = $trunInfo;
                        $cover = true;
                    }
                }
            }
            $free = 'unable';
        }else {
            // 返回自由节点设置信息11
            $freeProcessSetInfo = $this->getFlowFreeNodeInfo($currentFlowProcess);
            //非循环上级
            // 设置了流转顺序 查找下一步信息 以及退回设置信息
            $freeProcessRunInfo = app($this->flowRunService)->getFreeNodeStepList($runId,$currentFlowProcess);

            if ($freeProcessRunInfo && count($freeProcessRunInfo) > 0) {
                $nextProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$currentFlowProcess,$currentFreeProcessStep+1);
                if ($nextProcessInfo) {
                    $nextProcessInfo = $nextProcessInfo->toArray();
                    // 如果不允许中途退出
                    if ($freeProcessInfo->quit_type == 1 && $currentFreeProcessStep > 0) {
                        $result = [];
                        $cover = true;
                    }else {
                        if ($submitType == 'end') {
                            $result = [];
                            $result[] = $_flowExportProcessArray;
                            $cover = true;
                        }
                    }
                    $result[] = $nextProcessInfo;
                }else {
                    // 没有后续流转步骤
                    if ($freeProcessInfo->run_type == 1) {
                        $free = 'able';
                        $free_set_info = $freeProcessSetInfo;
                        if ($_flowExportProcessArray) {
                            $result[] = $_flowExportProcessArray;
                        }
                        if ($trunInfo) {
                            $result = $trunInfo;
                            $cover = true;
                        }
                    }
                }
            }else {
                $free = 'able';
                $free_set_info = $freeProcessSetInfo;
                if ($_flowExportProcessArray) {
                    $result[] = $_flowExportProcessArray;
                }
                if ($trunInfo) {
                    $result = $trunInfo;
                    $cover = true;
                }
            }
            if ($currentFreeProcessStep == 0) {
                $free = 'able';
                $free_set_info = $freeProcessSetInfo;
                if ($trunInfo) {
                    $result = $trunInfo;
                    $cover = true;
                }
            }
        }
        return ['result' => $result, 'free' => $free ?? '', 'free_set_info' => $free_set_info ?? '', 'cover' => $cover ?? false];
    }
    /**
     * 【流程运行】 获取某条流程，某个可以流出的节点的所有办理人信息；
     * 参数：run_id:流程id;target_process_id:目标节点id;flow_process:当前节点的节点id
     *
     * @author dingpeng
     *
     * @param  [type]              $data [description]
     *
     * @return [type]                    [description]
     */
    public function getFixedFlowTransactUser($data)
    {
        $run_id = $data["run_id"];
        $target_process_id = $data["target_process_id"];
        $flow_process = $data["flow_process"];
        $step_id = $data['step_id'] ?? '';
        $flow_id = "";
        $submit_type = $data['submit_type'] ?? '';
        if (isset($data["flow_id"])) {
            $flow_id = $data["flow_id"];
        }else if ($run_id && $runObject = app($this->flowRunRepository)->getDetail($run_id , false , ['flow_id'])) {
            $flow_id = $runObject->flow_id;
        } else {
            return [];
        }
        if ($step_id) {
            $next_flow_process = app($this->flowRunService)->getFreeNodeStepInfo($run_id,$target_process_id,$step_id);
            if ($next_flow_process) {
                $next_flow_process_user = array_unique(explode(',', $next_flow_process->user_id));
                if(count($next_flow_process_user) == 1) {
                    $handle_user = $next_flow_process->user_id;
                }else {
                    $handle_user = '';
                }
                $readonly = '';
                if ($submit_type == 'back') {
                    $historyRunProcessId = '';
                    $flowRunProcessData = [
                        "run_id" => $run_id,
                        "search" => ["flow_process" => [$target_process_id], "free_process_step" => [$step_id]],
                    ];
                    if ($run_id && $flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunProcessData)) {
                        if ($flowRunProcessObject->count()) {
                            $historyRunProcessId = $flowRunProcessObject->last()->process_id;
                        }
                    }
                    $flowRunCurrentData = [
                        "run_id" => $run_id,
                        "search" => ["process_id" => [$historyRunProcessId]],
                    ];
                    if ($flowRunCurrentProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunCurrentData)) {
                        $doneUserStr = "";
                        $hostFlagUser = "";
                        foreach ($flowRunCurrentProcessObject->toArray() as $doneFlowKey => $doneFlowValue) {
                            if ($doneFlowValue["host_flag"] == 1) {
                                $hostFlagUser = $doneFlowValue["user_id"];
                            }
                            $doneUserStr .= $doneFlowValue["user_id"] . ",";
                        }
                        // 下一步：将 $doneUserStr 里面的人，只取在职的，然后去重，然后标记出 $hostFlagUser 的主办人身份
                        $userInThisFlownode = app($this->flowRunService)->formatFixedFlowTransactUser($doneUserStr, $hostFlagUser);
                        $userInThisFlownode['modal'] = 'readonly';
                        $userInThisFlownode['free'] = true;
                        $userInThisFlownode['step_id'] = $step_id;
                        return $userInThisFlownode;
                    }
                }
                $flowOtherInfo = app($this->flowOthersRepository)->getDetail($flow_id);
                if ($submit_type == 'turn') {
                    // 被退回流程原路径提交且直接提交给退回人
                    $historyRunUserId = "";
                    $flowRunProcessData = [
                        "run_id" => $run_id,
                        "search" => ["flow_process" => [$target_process_id], "free_process_step" => [$step_id]],
                    ];
                    if ($run_id && $flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunProcessData)) {
                        if ($flowRunProcessObject->count()) {
                            $historyRunUserId = $flowRunProcessObject->last()->user_id;
                        }
                    }
                    if ($historyRunUserId) {
                        if(isset($flowOtherInfo->flow_send_back_submit_method) && $flowOtherInfo->flow_send_back_submit_method == '1' && isset($flowOtherInfo->alow_select_handle) && $flowOtherInfo->alow_select_handle == '0') {
                            $readonly = 'readonly';
                            $handle_user = $historyRunUserId;
                            $next_flow_process_user = [$historyRunUserId];
                        }else {
                            $handle_user = $historyRunUserId;
                            $next_flow_process_user = array_unique(array_merge($next_flow_process_user,[$historyRunUserId]));
                        }
                    }

                }
                $freeStepUser = [
                    'default' => [
                        'handle'=> [],
                        'host'=> $handle_user ? ['user_id'=>$handle_user] : []
                    ],
                    'modal' => $readonly,
                    'scope' => ['user_id'=> $next_flow_process_user],
                    'free' => true,
                    'step_id' => $step_id
                ];
                // 判断主办人是否离职
                if ($handle_user) {
                    $status =app($this->userSystemInfoRepository)->getDetail($handle_user , false , ['user_status']);
                    if ($status && ($status->user_status == 2 || $status->user_status == 0 )) {
                        $freeStepUser["host_leave"] =  true;
                        $freeStepUser["scope"]['user_id'] =  '';
                    }
                }
                return $freeStepUser;
            }else {
                return [];
            }
        }

        // $max_process_id = $runObject->max_process_id;
        // 获取目标节点的节点信息
        if ($targetNodeInfo = app($this->flowProcessRepository)->getFlowNodeUserDetail($target_process_id)) {
            $targetNodeInfoArray = $targetNodeInfo->toArray();
            // 默认办理人
            $process_default_user = $targetNodeInfo->flowProcessHasManyDefaultUser->pluck("user_id");
            $process_default_user = $process_default_user->toArray();
            // 默认办理人是否可以修改
            $process_default_type = $targetNodeInfo->process_default_type;
            // 默认主办人
            if (empty($targetNodeInfo->flowProcessDefaultUserHostHasOneUser)) {
                if ($targetNodeInfo->process_transact_type == '0') {
                    // 如果是第一种办理方式，且默认经办人唯一则把默认主办人也设置为此人，因为在定义流程办理人员设置的地方也是这么处理的，两边保持一致
                    if (!empty($targetNodeInfo->flowProcessHasManyDefaultUser) && count($targetNodeInfo->flowProcessHasManyDefaultUser) == '1') {
                        $targetNodeInfo->process_default_manage = $targetNodeInfo->flowProcessHasManyDefaultUser[0]->user_id ?? "";
                    }
                } else {
                    $targetNodeInfo->process_default_manage = "";
                }
            }
            $process_default_manage = $targetNodeInfo->process_default_manage ?? '';
            // 目标节点是否首节点
            $headNodeToggle = isset($targetNodeInfo->head_node_toggle) ? $targetNodeInfo->head_node_toggle : '';
            if ($headNodeToggle == '1') {
                $process_default_user = [];
                $process_default_manage = '';
            }
            // 目标节点序号
            $targetNodeSort = $targetNodeInfoArray["sort"] ?? '';
            // 获取当前节点的节点信息
            $currentHeadNodeToggle = "";
            // 当前节点的序号
            $currentNodeSort = "";
            if ($currentNodeInfo = app($this->flowProcessRepository)->getDetail($flow_process  , false , ['sort' ,'head_node_toggle'])) {
                $currentNodeInfo = $currentNodeInfo->toArray();
                $currentHeadNodeToggle = isset($currentNodeInfo['head_node_toggle']) ? $currentNodeInfo['head_node_toggle'] : '';
                $currentNodeSort = isset($currentNodeInfo['sort']) ? $currentNodeInfo['sort'] : '';
            }
            if ($submit_type == 'back') {
                $currentHeadNodeToggle = '';
            }
            $historyRunProcessId = "";
            $historyRunFlowSerial = "";
            // 判断是否被操作过：节点 $target_process_id 的最大已运行步骤
            // flow_run_process表里，节点[flow_process]是 $target_process_id 的，最大的 process_id
            $flowRunProcessData = [
                "run_id" => $run_id,
                "search" => ["flow_process" => [$target_process_id]],
                'select_user' =>false,
                'fields' =>['process_id' , 'flow_serial']
            ];
            if (isset($targetNodeInfoArray['process_type']) && $targetNodeInfoArray['process_type'] == 'free') {
                $flowRunProcessData['search']['free_process_step'] = [0];
            }
            if ($run_id && $flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunProcessData)) {
                if ($flowRunProcessObject->count()) {
                    $historyRunProcessId = $flowRunProcessObject->last()->process_id;
                    $historyRunFlowSerial = $flowRunProcessObject->last()->flow_serial;
                }
            }
            // 已经被操作过的流程
            if ($historyRunProcessId != "") {
                // 此处不再区分前进还是后退，如果目标节点被操作过，就是后退
                // 已经被操作过的流程，如果当前节点设置默认办理人且不可以修改时，以设置为准
                $userScopeInfoInThisFlownode = $this->getFixedFlowUser($run_id, $flow_id, $target_process_id, $targetNodeInfo, $process_default_user, $process_default_manage);
                if (!empty($userScopeInfoInThisFlownode['default']) && !empty($userScopeInfoInThisFlownode['default']['handle']) && count($process_default_user) && $process_default_type != 1) {
                    $hostFlagUser = "";
                    if ($process_default_manage) {
                        $hostFlagUser = $process_default_manage;
                    }
                    $userInThisFlownode = app($this->flowRunService)->formatFixedFlowTransactUser($process_default_user, $hostFlagUser);
                    $userInThisFlownode["modal"] = "readonly";
                    return $userInThisFlownode;
                } else {
					$processInfo = app($this->flowParseService)->getProcessInfo($target_process_id);
					if(!empty($processInfo['merge'])){
                        $searchParam = ['run_id'=>$run_id,'flow_process'=>$target_process_id , 'flow_serial' =>$historyRunFlowSerial];
                        // if($submit_type == 'turn') {
                        //     $searchParam['user_run_type'] = 1;
                        // }
						$dbData = app($this->flowRunProcessRepository)->getFlowRunProcessInfo(['user_id','host_flag' , 'flow_run_process_id' , 'by_agent_id', 'user_run_type'], $searchParam);
						if(!empty($dbData[0])){
                            $flowRunProcessIds  = array_column($dbData , 'flow_run_process_id');
                            $userReplaceList = app($this->flowParseService)->getAgentAndReplaceUserList($flowRunProcessIds);
                            $userReplaceList =  array_merge( $userReplaceList  , array_column($dbData , 'by_agent_id') );
							$process_default_user = [];
							$hostFlagUser = "";
                            // 查找当前节点信息
                            $flowRunProcessData = [
                                "run_id" => $run_id,
                                "search" => ["flow_process" => [$flow_process]],
                                'select_user' =>false,
                                'fields' =>['is_back' , 'send_back_process']
                            ];
                            if ($flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunProcessData)) {
                                if ($flowRunProcessObject->count()) {
                                    $flowRunProcessObject = $flowRunProcessObject->last();
                                }
                            }
                            $isSendBack = false;
                            $isSendBackAlowSelectHandle = false;
                            if (isset($flowRunProcessObject->is_back) && $flowRunProcessObject->is_back == 1 && isset($flowRunProcessObject->send_back_process) && $flowRunProcessObject->send_back_process == $target_process_id) {
                                $isSendBack = true;
                                $flowOtherInfo = app($this->flowOthersRepository)->getDetail($flow_id);
                                if (isset($flowOtherInfo->flow_send_back_submit_method) && $flowOtherInfo->flow_send_back_submit_method == '1' && isset($flowOtherInfo->alow_select_handle) && $flowOtherInfo->alow_select_handle == '0') {
                                    $isSendBackAlowSelectHandle = true;
                                }
                            }
                            $hasTodo = false;
                            $hasHost = false;
							foreach($dbData as $v){
                                if (in_array( $v['user_id'] ,$userReplaceList )) {
                                    continue;
                                }
								$process_default_user[] = $v['user_id'];
								if($v['host_flag'] == 1){
                                    $hostFlagUser = $v['user_id'];
                                    // 提交时，合并节点有待办时，取之前的主办人为主办人，否则可以重新选择主办人
                                    if($submit_type == 'turn') {
                                        if ($v['user_run_type'] ==1) {
                                            $hasTodo = true;
                                        }
                                    }else {
                                        $hasTodo = true;
                                    }
                                    $hasHost = true;
								}
							}
                            if (!$hasHost) {
                                $hasTodo = true;
                            }
							$userInThisFlownode = app($this->flowRunService)->formatFixedFlowTransactUser($process_default_user, $hostFlagUser);
                            // 获取设置的办理人信息
                            $userScopeInfoInThisFlownode = $this->getFixedFlowUser($run_id, $flow_id, $target_process_id, $targetNodeInfo, $process_default_user, $process_default_manage);
                            // 合并节点有待办
                            if ($hasTodo) {
                                $userInThisFlownode["modal"] = "readonly";
                            }else {
                                if ($isSendBack) {
                                    // 退回再提交且不可选人
                                    if ($isSendBackAlowSelectHandle) {
                                        $userInThisFlownode["modal"] = "readonly";
                                    }else {
                                        // 此处做一个办理人范围兼容
                                        if ($userScopeInfoInThisFlownode['scope']['user_id'] != 'ALL') {
                                            // 如果设置的经办人范围为空 ，则取历史步骤的经办人
                                            if ($userScopeInfoInThisFlownode['scope']['user_id'] ==  '') {
                                                $userScopeInfoInThisFlownode['scope']['user_id'] = $userInThisFlownode['scope']['user_id'];
                                            } else if (!empty($userInThisFlownode['scope']['user_id'])) {
                                                $userInThisFlownode['scope']['user_id'] = collect(array_merge($userScopeInfoInThisFlownode['scope']['user_id']->toArray() , $userInThisFlownode['scope']['user_id']->toArray()));
                                            }
                                        }else {
                                            $userInThisFlownode['scope']['user_id'] = 'ALL';
                                        }
                                    }

                                }else {//非原路径提交或者原路径提交可选人 这时候办理人范围都应该是设置的范围 、他节点退回再逐步提交到当前合并节点
                                    // 默认办理人
                                    $process_default_user = $targetNodeInfo->flowProcessHasManyDefaultUser->pluck("user_id");
                                    $process_default_user = $process_default_user->toArray();
                                    $process_default_manage = $targetNodeInfo->process_default_manage ?? '';

                                    $userScopeInfoInThisFlownode["modal"] = "";
                                    $userScopeInfoInThisFlownode["show_debug"] = false;
                                    $userScopeInfoInThisFlownode['default'] = $userInThisFlownode['default'];
                                    return $userScopeInfoInThisFlownode;
                                }
                            }

							$userInThisFlownode["show_debug"] = false;
							return $userInThisFlownode;
						}
					}
                    // 取步骤id[process_id]为 $historyRunProcessId 的，flow_run_process 的数据，拼接用户，并且找到主办人
                    $flowRunCurrentData = [
                        "run_id" => $run_id,
                        "search" => ["process_id" => [$historyRunProcessId],"flow_process" => [$target_process_id]],
                        'select_user' => false,
                        'fields' => ['host_flag' , 'user_id']
                    ];
                    if ($flowRunCurrentProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunCurrentData)) {
                        $doneUserStr = "";
                        $hostFlagUser = "";
                        foreach ($flowRunCurrentProcessObject->toArray() as $doneFlowKey => $doneFlowValue) {
                            if ($doneFlowValue["host_flag"] == 1) {
                                $hostFlagUser = $doneFlowValue["user_id"];
                            }
                            $doneUserStr .= $doneFlowValue["user_id"] . ",";
                        }

                        // 下一步：将 $doneUserStr 里面的人，只取在职的，然后去重，然后标记出 $hostFlagUser 的主办人身份
                        $userInThisFlownode = app($this->flowRunService)->formatFixedFlowTransactUser($doneUserStr, $hostFlagUser);
                        if ($targetNodeInfo->process_transact_type != '0') {
                            $userInThisFlownode['default']['host']['user_id'] = [];
                        }
                        // 获取设置的办理人信息，上面已经获取过了，这里不用再获取了
                        // $userScopeInfoInThisFlownode = $this->getFixedFlowUser($run_id, $flow_id, $target_process_id, $targetNodeInfo, $process_default_user, $process_default_manage);
                        // 此处做一个办理人范围兼容
                        if ($userScopeInfoInThisFlownode['scope']['user_id'] != 'ALL') {
                            // 如果设置的经办人范围为空 ，则取历史步骤的经办人
                            if ($userScopeInfoInThisFlownode['scope']['user_id'] ==  '') {
                                $userScopeInfoInThisFlownode['scope']['user_id'] = $userInThisFlownode['scope']['user_id'];
                            } else if (!empty($userInThisFlownode['scope']['user_id'])) {
                                $userScopeInfoInThisFlownode['scope']['user_id'] = collect(array_merge($userScopeInfoInThisFlownode['scope']['user_id']->toArray() , $userInThisFlownode['scope']['user_id']->toArray()));
                            }
                        }
                        if (isset($userInThisFlownode['host_leave']) && $userInThisFlownode['host_leave']) {
                            $userInThisFlownode['scope'] =  $userScopeInfoInThisFlownode['scope'];
                            $userScopeInfoInThisFlownode['host_leave'] = $userInThisFlownode['host_leave'] ;
                            $userScopeInfoInThisFlownode['leave'] = $userInThisFlownode['leave'] ;
                        }

                        $flowOtherInfo = app($this->flowOthersRepository)->getDetail($flow_id);
                        if (isset($flowOtherInfo->flow_send_back_submit_method) && $flowOtherInfo->flow_send_back_submit_method == '1') {
                            // 被退回流程原路径提交且直接提交给退回人
                            if (isset($flowOtherInfo->alow_select_handle) && $flowOtherInfo->alow_select_handle == '0') {
                                $userInThisFlownode["modal"] = "readonly";
                            }
                            // 原路径提交 可选人时，合并范围
                            if ($userScopeInfoInThisFlownode['scope']['user_id'] != 'ALL') {
                                if (!empty($userInThisFlownode['scope']['user_id'])) {
                                    $userScopeInfoInThisFlownode['scope']['user_id'] = collect(array_merge($userScopeInfoInThisFlownode['scope']['user_id']->toArray() , $userInThisFlownode['scope']['user_id']->toArray()));
                                }
                            }
                            $userScopeInfoInThisFlownode['default'] = $userInThisFlownode['default'];
                        }
                        // 退回不可选人
                        if (isset($data['submit_type']) && $data['submit_type'] == 'back') {
                            $userInThisFlownode["modal"] = "readonly";
                            return $userInThisFlownode;
                        }
                        $concurrentNodeToDoCount = 0;
                        if ($processInfo['concurrent']) {
                            $flowRunCurrentData = [
                                "run_id" => $run_id,
                                "search" => ["host_flag" => [1],"flow_process" => [$target_process_id] , "user_run_type" => [1]],
                                'returntype' =>"count",
                            ];
                            $concurrentNodeToDoCount = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunCurrentData);
                        }
                        // 如果当前是首节点，且办理过，那么，默认办理人，就是曾经办理过的人，人员范围，是目标节点的正确范围，且，办理人员可以修改
                        if ($currentHeadNodeToggle == "1") {
                            if (isset($targetNodeInfoArray["process_auto_get_user"]) && $targetNodeInfoArray["process_auto_get_user"]) {
                            } else {
                                $userScopeInfoInThisFlownode["default"] = $userInThisFlownode["default"];
                            }
                            if ($concurrentNodeToDoCount) {
                                $userScopeInfoInThisFlownode['modal'] = "readonly";
                                $userScopeInfoInThisFlownode["show_debug"] = false;
                            }
                            return $userScopeInfoInThisFlownode;
                        } else {
                            // 前进
                            if ($currentNodeSort < $targetNodeSort) {
                                // 默认选中原主办人
                                // $userScopeInfoInThisFlownode["default"] = $userInThisFlownode["default"]; 这里修改为默认选中新的主办人
                                $userScopeInfoInThisFlownode["modal"] = "";
                            } else {
                                // 后退，不能换办理人
                                // 9.0里，退回到已办理节点，人员不能改。
                                $userScopeInfoInThisFlownode["modal"] = "readonly";
                            }
                            if ($concurrentNodeToDoCount) {
                                $userScopeInfoInThisFlownode['modal'] = "readonly";
                                $userScopeInfoInThisFlownode["show_debug"] = false;
                            }
                            return $userScopeInfoInThisFlownode;
                        }
                    }
                }
            } else {
                $userInThisFlownode = $this->getFixedFlowUser($run_id, $flow_id, $target_process_id, $targetNodeInfo, $process_default_user, $process_default_manage);
                return $userInThisFlownode;
            }
        }
    }

    /**
     * 【流程运行】 获取固定流程某个节点可以抄送的人员；
     * 参数：run_id:流程id;target_process_id:目标节点id;flow_process:当前节点的节点id
     *
     * @param  [type]              $data [description]
     *
     * @param array $user
     * @return array [type]       [description]
     * @author 缪晨晨
     *
     */
    public function getFixedFlowCopyUser($data, $user = [], $circle = false)
    {
        $runId = $data["run_id"];
        $nodeId = $data["node_id"];
        $formId = $data['form_id'];
        $flowId = "";
        $submitType = $data['submit_type'] ?? '';
        if (isset($data["flow_id"])) {
            $flowId = $data["flow_id"];
        } else if ($runId && $runObject = app($this->flowRunRepository)->getDetail($runId, false , ['flow_id'])) {
            $flowId = $runObject->flow_id;
        } else {
            return [];
        }
        $userInThisFlowNode = [];
        // 获取当前节点的节点信息
        // if ($currentNodeInfo = app($this->flowProcessRepository)->getFlowNodeCopyDetail($nodeId)) {
        if ($currentNodeInfo = app($this->flowRunService)->getFlowNodeDetail($nodeId)) {
            // 判断是否开启对应的默认抄送人触发时机
            $triggerCondition = ($submitType == 'turn' && $currentNodeInfo->trigger_copy_submit == 1) || ($submitType == 'back' && $currentNodeInfo->trigger_copy_back == 1) ||
                    ($submitType == 'end' && $currentNodeInfo->trigger_copy_end == 1);
            $triggerComment = '';
            $symbol = Lang::getLocale() == 'zh-CN' ? '、' : ',';
            if ($currentNodeInfo->trigger_copy_submit == 1) {
                $triggerComment .= $symbol . trans('flow.submit');
            }

            if ($currentNodeInfo->trigger_copy_back == 1) {
                $triggerComment .= $symbol . trans('flow.back');
            }
            if ($currentNodeInfo->trigger_copy_end == 1) {
                $triggerComment .= $symbol . trans('flow.end');
            }
            if ($triggerComment) {
                $triggerComment = trans('flow.0x030185', ['submit_type' => trim($triggerComment, $symbol)]);
            }
            if ($currentNodeInfo->trigger_copy_submit == 1 && $currentNodeInfo->trigger_copy_back == 1 && $currentNodeInfo->trigger_copy_end == 1) {
                $triggerComment = null;
            }
            $userInfo = app($this->flowRunService)->autoGetCopyUser(["flow_id" => $flowId, "node_id" => $nodeId, "run_id" => $runId], $currentNodeInfo);
            // 智能获值，没人的时候，返回的消息
            $emptyReturnMessage = isset($userInfo["emptyReturnMessage"]) ? $userInfo["emptyReturnMessage"] : "";
            if (isset($userInfo["autoGetUserInfo"])) {
                $userInfo = $userInfo["autoGetUserInfo"];
            }
            if ($emptyReturnMessage) {
                $userInThisFlowNode["message"] = $emptyReturnMessage;
            }
            // 人员范围
            // 范围内人员数量为1的标识
            $scopeUserCountFlag = "";
            if ($userInfo == "ALL") {
                $userInThisFlowNode["user_id"] = "ALL";
            } else {
                $scopeUserCountFlag = count($userInfo);
                if ($scopeUserCountFlag) {
                    $userInThisFlowNode["user_id"] = array_merge([] , array_diff( $userInfo->pluck("user_id")->toArray() , [$user['user_id']] ));
                } else {
                    $userInThisFlowNode["user_id"] = [];
                }
            }
            // 判断抄送条件
            $copyCondition = true;
            if ($currentNodeInfo->copy_condition) {
                // 获取流程表单数据
                $flowFormDataParam = [
                    'status' => 'handle',
                    'runId'  => $runId,
                    'formId' => $formId,
                    'flowId' => $flowId,
                    'nodeId' => $nodeId,
                ];
                $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $user);
                $formStructure = [];
                if (isset($flowFormData['parseFormStructure']) && !empty($flowFormData['parseFormStructure'])) {
                    foreach ($flowFormData['parseFormStructure'] as $formStructureKey => $formStructureValue) {
                        $formStructure[$formStructureKey] = isset($formStructureValue['control_type']) ? $formStructureValue['control_type'] : '';
                    }
                }
                $copyCondition = app($this->flowRunService)->verifyFlowFormOutletCondition($currentNodeInfo->copy_condition, $flowFormData['parseData'], ['form_structure' => $formStructure ,'user_id' => $data['user_id'] ?? '' , 'process_id' =>$data['process_id']?? '']);
            }
            $userInThisFlowNode['premise'] = $currentNodeInfo->copy_condition ?: '';
            $userInThisFlowNode['premise_status'] = $copyCondition; // true 条件满足 false 条件不满足
            $userInThisFlowNode['trigger_status'] = $triggerCondition; // 触发时机 true 满足 false 不满足
            $userInThisFlowNode['trigger_comment'] = $triggerComment;
            $userInThisFlowNode['submit_type'] = $submitType;

        }
        return $userInThisFlowNode;
    }

    /**
     * 【流程运行】 获取某条流程，某节点办理人总数，如果只有一个办理人，监控提交等直接跳过选择主办人
     * 参数：run_id:流程id;process_id:节点id
     *
     * @author miaochenchen
     *
     * @param  [type]              $data [description]
     *
     * @return [type]                    [description]
     */
    public function getFlowMaxProcessUserCount($data)
    {
        return app($this->flowRunProcessRepository)->getFlowMaxProcessUserCount($data);
    }

    /**
     * 【流程运行】 获取某条流程，当前节点的所有办理人信息；
     * 参数：run_id:流程id;flow_process:当前节点的节点id
     *
     * @author miaochenchen
     *
     * @param  [type]              $data [description]
     *
     * @return [type]                    [description]
     */
    public function getFixedFlowCurrentUser($data)
    {
        $run_id = $data["run_id"];
        $flow_process = $data["flow_process"];
        if ($runObject = app($this->flowRunRepository)->getDetail($run_id)) {
            $flow_id = $runObject->flow_id;
            // 获取当前节点的节点信息
            if ($currentNodeInfo = app($this->flowRunService)->getFlowNodeDetail($flow_process)) {
                // 默认办理人
                $process_default_user = $currentNodeInfo->flowProcessHasManyDefaultUser->pluck("user_id");
                // 默认主办人
                $process_default_manage = $currentNodeInfo->process_default_manage;
                return $userInThisFlownode = $this->getFixedFlowUser($run_id, $flow_id, $flow_process, $currentNodeInfo, $process_default_user, $process_default_manage);
            }
        }
    }

    /**
     * 【流程运行】 获取某条流程，某个节点的所有办理人信息；
     * 参数：$flow_id:流程id;$flow_process:当前节点的节点id;$nodeInfo:当前节点信息;$process_default_user:默认办理人;$process_default_manage：默认主办人
     *
     * @author miaochenchen
     *
     * @param  [type]              $data [description]
     *
     * @return [type]                    [description]
     */
    public function getFixedFlowUser($run_id, $flow_id, $flow_process, $nodeInfo, $process_default_user = '', $process_default_manage = '')
    {
        $userInThisFlownode = [];
        $userInThisFlownode["modal"] = "";
        // 这函数，智能获值的时候的返回值改掉了，返回信息里有message，注意--20171017
        $userInfo = app($this->flowRunService)->autoGetProcessUser(["flow_id" => $flow_id, "process_id" => $flow_process, "run_id" => $run_id], $nodeInfo);
        // 智能获值，没人的时候，返回的消息
        $emptyReturnMessage = isset($userInfo["emptyReturnMessage"]) ? $userInfo["emptyReturnMessage"] : "";
        if (isset($userInfo["autoGetUserInfo"])) {
            $userInfo = $userInfo["autoGetUserInfo"];
        }
        if ($emptyReturnMessage) {
            $userInThisFlownode["message"] = $emptyReturnMessage;
        }
        // 人员范围
        // 范围内人员数量为1的标识
        $scopeUserCountFlag = "";
        if ($userInfo == "ALL") {
            $userInThisFlownode["scope"]["user_id"] = "ALL";
        } else {
            $scopeUserCountFlag = count($userInfo);
            if ($scopeUserCountFlag) {
                $userInThisFlownode["scope"]["user_id"] = $userInfo->pluck("user_id");
            } else {
                $userInThisFlownode["scope"]["user_id"] = "";
            }
        }
        // 直接用默认办理人非空来判断，定义流程那里需要处理，如果是智能获值，就清空默认办理人相关，这里就不用判断智能获值了。
        $userInThisFlownode["default"]["handle"] = [];
        $userInThisFlownode["default"]["host"] = [];

        if (count($process_default_user)) {
            $handleUser = $nodeInfo->flowProcessHasManyDefaultUser->pluck("hasOneUser")->pluck("user_id")->toArray();
            if (!empty($userInThisFlownode["scope"]["user_id"])) {
                if (!empty($handleUser) && $userInThisFlownode["scope"]["user_id"] != 'ALL') {
                    $handleUser = array_intersect($handleUser, $userInThisFlownode["scope"]["user_id"]->toArray());
                }
                if (!empty($handleUser)) {
                    $userInThisFlownode["default"]["handle"]["user_id"] = array_values($handleUser);
                }
            }
        } else {
            if ($nodeInfo->process_auto_get_user && count($userInfo)) {
                if (count($userInfo) == 1) {
                    $userInThisFlownode["default"]["host"]["user_id"] = $userInfo->pluck("user_id");
                } else {
                    if (isset($nodeInfo->process_transact_type) && $nodeInfo->process_transact_type == 0) {
                        // 非第一种办理方式，将这个人员设置到默认办理人里面
                        $userInThisFlownode["default"]["host"]["user_id"] = $userInfo->pluck("user_id")->first();
                    }
                }
                $userInThisFlownode["default"]["handle"]["user_id"] = $userInfo->pluck("user_id")->toArray();
            }
        }
        if ($process_default_manage != "") {
            if (!empty($userInThisFlownode["scope"]["user_id"]) && ($userInThisFlownode["scope"]["user_id"] == 'ALL' || in_array($process_default_manage, $userInThisFlownode["scope"]["user_id"]->toArray()))) {
                $userInThisFlownode["default"]["host"]["user_id"] = $process_default_manage;
            }
        }
        if (count($process_default_user) || $process_default_manage != "") {
            if ($nodeInfo->process_default_type != "1") {
                if (!empty($userInThisFlownode["default"]["host"]["user_id"]) || !empty($userInThisFlownode["default"]["handle"]["user_id"])) {
                    $userInThisFlownode["modal"] = "readonly";
                }
            }
        }

        // 如果范围内的办理人只有一个，且，默认办理人为空的时候，将这个人员设置到默认主办人里面
        if ($scopeUserCountFlag == 1) {
            if ($process_default_manage == "") {
                if (isset($nodeInfo->process_transact_type) && $nodeInfo->process_transact_type > 0) {
                    // 非第一种办理方式，将这个人员设置到默认办理人里面
                    $userInThisFlownode["default"]["handle"]["user_id"] = [$userInfo->pluck("user_id")->first()];
                } else {
                    $userInThisFlownode["default"]["host"]["user_id"] = $userInfo->pluck("user_id")->first();
                }
            }
            // if(!count($process_default_user)) {
            //     $userInThisFlownode["default"]["handle"]["user_id"] = $userInfo->pluck("user_id");
            // }
        }
        return $userInThisFlownode;
    }

    /**
     * 为了解决流程提交框里面的选择器，传递用户id字符串太长的问题
     * return "" -- 表示全体，
     * return ['user_id' => []] -- 表示范围内没人，
     * return ['user_id' => ['WV00000001','WV00000002']] -- 表示正常设置范围，
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function flowSubmitModalHostUserSelectDirector($param)
    {
        // 缓存先去掉，现在办理人员范围是可变的，会有问题，比如来自于某个表单字段
        // if (isset($param['run_id']) && isset($param['target_process_id']) && isset($param['flow_process'])) {
        //     $cacheKey = $param['run_id'] . $param['target_process_id'] . $param['flow_process'];
        //     if (Cache::has($cacheKey)) {
        //         return Cache::get($cacheKey);
        //     }
        // }
        // if(isset($param['free']) && $param['free']) {
        //     $userId = [];
        //     $nextProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($param['run_id'],$param['target_process_id'],$param['step_id']);
        //     $freeProcessRunInfo = app($this->flowRunProcessRepository)->getRunFreeNodeStep($param['run_id'],$param['target_process_id'],$param['step_id']);
        //     if($freeProcessRunInfo) {
        //         $userId[] = $freeProcessRunInfo->user_id;
        //     }
        //     if($nextProcessInfo) {
        //         $userId = array_merge($userId, explode(",",$nextProcessInfo->user_id));
        //     }
        //     return ['user_id' => $userId];
        // }
        $data = "";
        $transactUser = $this->getFixedFlowTransactUser($param);
        if (!empty($transactUser["scope"]["user_id"])) {
            if ($transactUser["scope"]["user_id"] != "ALL") {
                if (!is_array($transactUser["scope"]["user_id"])) {
                    $transactUser["scope"]["user_id"] = $transactUser["scope"]["user_id"]->toArray();
                }
                $userIdArray = $transactUser["scope"]["user_id"];
                $data = ['user_id' => $userIdArray];
            } else {
                // 全体
                $data = "";
            }
        } else {
            // 范围内没人
            $data = ['user_id' => []];
        }
        // if (isset($param['run_id']) && isset($param['target_process_id']) && isset($param['flow_process'])) {
        //     Cache::add($cacheKey, $data, 60);
        // }
        return $data;
    }

    /**
     * 为了解决流程抄送提交框里面的选择器，传递用户id字符串太长的问题
     * return "" -- 表示全体，
     * return ['user_id' => []] -- 表示范围内没人，
     * return ['user_id' => ['WV00000001','WV00000002']] -- 表示正常设置范围，
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function flowCopyModalUserSelectDirector($param)
    {
        $data = ['user_id' => []];
        if (!isset($param['node_id'])) {
            return $data;
        }

        if (isset($param['run_id']) && isset($param['node_id'])) {
            $cacheKey = 'copy_' . $param['node_id'] . '_' . $param['run_id'];
            if (Cache::has($cacheKey)) {
                return Cache::get($cacheKey);
            }
        }
        $data = "";
        $copyUser = $this->getFixedFlowCopyUser($param);
        if ($copyUser["user_id"]) {
            if ($copyUser["user_id"] != "ALL") {
                $userIdArray = $copyUser["user_id"]->toArray();
                $data = ['user_id' => $userIdArray];
            } else {
                // 全体
                $data = "";
            }
        } else {
            // 范围内没人
            $data = ['user_id' => []];
        }
        if (isset($param['run_id']) && isset($param['node_id'])) {
            Cache::add($cacheKey, $data, 60);
        }
        return $data;
    }

    /**
     * 【流程运行】 【提交流程】 固定&自由流程，提交页面提交下一步按钮、结束流程都是这个;
     * 【参数说明】
     * 1、结束流程时:如果经办人拼接主办人之后，还是去逗号(,)为空，则为结束。
     * 2、自由流程参数：参数：$TO_ID【所有办理人id串】;$PRCS_ID【当前步骤id】;$FLOW_PRCS【当前节点id，自由流程等于prcs_id】;$DOC_ID【！删除！保存关联文档的，提交流程的时候，关联文档优先调用其他路由保存】;$PRCS_OP_USER【主办人id】;$LIMIT_DATE【催办时间】;$monitor【是否是监控人提交，验证办理人是否提交时用到】;$sms_select,$smstel_select,$email_select【三种提醒】
     * 3、固定流程参数：参数：$FLOW_PRCS【要提交到的节点id】;$PRCS_ID【流程当前所在步骤】;$PRCS_USER【流程所有办理人】;$PRCS_OP_USER【流程主办人】;$DOC_ID【！删除！保存关联文档的，提交流程的时候，关联文档优先调用其他路由保存】;$OP【！删除！没用了】;$subFlowRunIds【子流程id】;$LIMIT_DATE【催办时间】;$monitor【是否是监控人提交，验证办理人是否提交时用到】;$sms_select,$smstel_select,$email_select【三种提醒】;$FLOW_PRCS_UP【流程当前所在节点】
     *$isAutoSubmit 相临节点合并提交专用
     * @param  [type]              $param [description]
     *
     * @return [type]      [description]
     * @author dingpeng
     *
     */
    public function postFlowTurning($param = [], $userInfo, $isAutoSubmit = false, $submitUuid= '')
    {
        $runId = $param["run_id"]; // 必填
        // 所在步骤
        $processId = $param["process_id"]; // 必填
        // 办理人id
        $process_transact_user = isset($param['process_transact_user']) ? $param['process_transact_user'] : ''; // [TO_ID]
        $flowFormData = $param['flow_form_data'] ?? '';
        // 主办人id--判断是否数组!
        if (isset($param['process_host_user'])) {
            if (getType($param['process_host_user']) == "array") {
                $process_host_user = implode(",", $param['process_host_user']);
            } else if (getType($param['process_host_user']) == "string") {
                $process_host_user = $param['process_host_user'];
            }
        } else {
            $process_host_user = "";
        }
        // 固定流程才会传的，必填的，目标节点ID $next_flow_process[flow_process]
        $next_flow_process = isset($param['next_flow_process']) ? $param['next_flow_process'] : '';
        // 固定流程才会传的，当前节点ID
        $flowProcess = isset($param['flow_process']) ? $param['flow_process'] : '';
        // 提交人id，必填
        $userId = $param["user_id"];

        $runObject = app($this->flowRunRepository)->getDetail($runId);
        if (!$runObject) {
            // 流程不存在
            return ['code' => ['0x030001', 'flow']];
        }

        $flowId = $runObject->flow_id;
        $creator = $runObject->creator;
        $maxProcessId = $runObject->max_process_id;

        $param['flow_run_info'] = $runObject;
        $param["flow_id"] = $flowId;
        $param['run_object'] = $runObject;
        $param['user_name'] = $userInfo['user_name'] ?? '';

        $flowEndParam["run_seq"] = $runObject->run_seq;
        $flowEndParam["run_seq_strip_tags"] = $runObject->run_seq_strip_tags;
        $flowEndParam["run_name"] = $runObject->run_name;
        $flowEndParam["link_doc"] = $runObject->link_doc;

        // 流程其他配置
        $flowTypeObject = app($this->flowTypeRepository)->getFlowTypeInfoRepository(["flow_id" => $flowId], ['flow_others']);
        $param['flow_type_info'] = $flowTypeObject;
        $param['flowSubmitHandRemindToggle'] = $flowTypeObject->flowTypeHasOneFlowOthers->flow_submit_hand_remind_toggle ?? 0;

        // 结束后归档标识
        $flowOthersInfo = $flowTypeObject->flowTypeHasOneFlowOthers->toArray();
        $flowToDoc = $flowTypeObject->flowTypeHasOneFlowOthers->flow_to_doc;

        $flowEndParam = array_merge($flowEndParam, $flowOthersInfo);
        $flowEndParam["file_folder_id"] = $param["file_folder_id"] ?? $flowTypeObject->flowTypeHasOneFlowOthers->file_folder_id;
        $flowEndParam["creator"] = $creator;
        $flowEndParam["user_id"] = $userId;

        $nodeId = "";
        $flowNodeInfo = '';
        // 流程类型
        $flow_type = $flowTypeObject->flow_type;

        if ($flow_type == "1") {
            $nodeId = $flowProcess;
            $flowNodeInfo =app($this->flowProcessRepository)->getDetail($flowProcess , false , ['process_transact_type' ,'flow_outsend_toggle' , 'end_workflow','process_concourse', 'process_concourse', 'auto_submit_todo_flow']);
        }

        $formId = isset($flowTypeObject->form_id) ? $flowTypeObject->form_id : "";

        $flowFormDataParam = [
            'status' => 'handle',
            'runId'  => $runId,
            'formId' => $formId,
            'flowId' => $flowId,
            'nodeId' => $nodeId,
            'flow_type_info' => $flowTypeObject
        ];
        // 需要流程归档
        if (
            isset($flowEndParam["flow_to_doc"]) &&
            $flowEndParam["flow_to_doc"] &&
            (
                (
                    $flowEndParam["flow_filing_conditions_setting_toggle"] &&
                    (
                        ($flowEndParam["flow_filing_conditions_verify_mode"] == "1" && $flowEndParam["flow_filing_conditions_setting_value"]) ||
                        ($flowEndParam["flow_filing_conditions_verify_mode"] == "2" && $flowEndParam["flow_filing_conditions_verify_url"])
                    )
                ) ||
                (
                    $flowEndParam["flow_filing_folder_rules_toggle"] &&
                    $flowEndParam["flow_filing_folder_rules"]
                )
            )
        ) {
            // 获取流程表单数据存入$flowEndParam
            // 判断param是否已有表单结构数据
            if (empty($flowFormData)) {
                $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $userInfo);
            }
            $flowEndParam["formData"] = isset($flowFormData['parseData']) ? $flowFormData['parseData'] : [];
            $flowEndParam["form_structure"] = isset($flowFormData['parseFormStructure']) ? $flowFormData['parseFormStructure'] : [];
            $flowEndParam["process_id"] = $processId;
        }

        // 组织抄送参数
        $submitCopyParam = "";
        if (!empty($param["process_copy_user"])) {
            $submitCopyParam = [
                "by_user_id" => $param["process_copy_user"],
                "run_id" => $runId,
                "process_id" => $processId,
                "copy_user" => $userId,
                "flow_process" => $processId,
                "feedback_content" => $param['process_copy_feedback'] ?? "",
            ];
        }

        // 主办人流程提交权限验证
        $flowTurningPermissionParams = [
            'run_id' => $runId,
            'process_id' => $processId,
            'host_user' => $process_host_user,
            'transact_user' => $process_transact_user,
            'flow_process' => $flowProcess,
            'next_flow_process' => $next_flow_process,
            'flow_run_info' => $runObject,
            'flow_type_info' => $flowTypeObject,
            'flow_turn_type' => $param['flowTurnType'] ?? '',
            'isWithoutRequired' => $param['isWithoutRequired'] ?? false,
            'monitor' => $param['monitor'] ?? '',
            'process_copy_user' => $param["process_copy_user"] ?? '',
            'limit_date' => $param['limit_date'] ?? '',
            'flow_form_data' => $flowFormData ?? '',
            'overtime' => $param['overhandleTime'] ?? '',
            'flow_process_info' => $flowNodeInfo,
            'flow_others_info'  =>$flowTypeObject->flowTypeHasOneFlowOthers,
            'concurrent_node_id' => $param['concurrent_node_id'] ?? '',
            "freeProcessStep" => $param['free_process_current_step'] ?? ($param['free_process_step'] ?? 0),
            'flow_run_process_id' => $param['flow_run_process_id'] ?? 0
        ];
        $nextDetailResult = false;
        // 下一节点配置
        if (!empty($next_flow_process)) {
            $nextDetailResult = app($this->flowRunService)->getFlowNodeDetail($next_flow_process, $formId)->toArray();
        }
        // 提交至自由节点时 暂不需要验证
        if($nextDetailResult && $nextDetailResult['process_type'] == 'common') {
            $flowTurningPermission = app($this->flowPermissionService)->verifyFlowTurningPermission($flowTurningPermissionParams, $userInfo);
            if (isset($flowTurningPermission['code']) && $isAutoSubmit == false) {
                return $flowTurningPermission;
            }
        }else {// 自由节点暂时之加入数据验证 ， 结束节点也要走数据验证
            $flowTurningPermission = [];
            $dataValidateInfo = app($this->flowParseService)->getFlowValidateData(['node_id' => $flowProcess]);
            if (!$flowTurningPermissionParams['monitor'] && ($flowTurningPermissionParams['flow_turn_type'] != 'back') && !empty($dataValidateInfo)) {
                $dataValidate = app($this->flowParseService)->validateFlowDataAchieve($userInfo, $flowId, $formId, $flowProcess, $processId, $runId);
                if ((!isset($dataValidate['validate']) || !$dataValidate['validate']) ) {
                    if (isset($dataValidate['flow_data_valid_mode'])) {
                        $promptText = $dataValidate['prompt_text'] ?? trans('flow.0x030168');
                        // 数据权限验证不通过，返回设置的提示文字
                        $flowTurningPermission =  ['code' => ['0x030168', 'flow'], 'dynamic' => $promptText];
                    } else {
                        $dataValidateTemplate = '';
                        if (!empty($dataValidate) && is_array($dataValidate) && empty($dataValidate[0]['flow_data_valid_mode'])) {
                            foreach ($dataValidate as $dataValidateKey => $dataValidateValue) {
                                if (!empty($dataValidateValue['prompt_text'])) {
                                    $dataValidateTemplate .= $dataValidateValue['prompt_text'] . ';';
                                }
                            }
                            $dataValidateTemplate = trim($dataValidateTemplate, ';');
                            $flowTurningPermission =  ['code' => ['0x030168', 'flow'], 'dynamic' => $dataValidateTemplate];
                        }
                        if (!empty($flowTurningPermissionParams['overtime']) && !empty($dataValidate) && is_array($dataValidate) && isset($dataValidate[0]['flow_data_valid_mode'])) {
                            $flowTurningPermission =  ['code' => ['0x030168', 'flow'], 'dynamic' => $dataValidateTemplate];
                        }
                    }
                }
            }
            if (isset($flowTurningPermission['code']) && $isAutoSubmit == false) {
                return $flowTurningPermission;
            }
            // 结束验证一下会签经办人
            if (!$nextDetailResult && $flow_type == '1') {
                if (!$flowTurningPermissionParams['monitor'] && ($flowTurningPermissionParams['flow_turn_type'] != 'back') && !(empty($flowNodeInfo->process_concourse)) ) {
                            $haveNotTransactPersonObjectParams = [
                                'run_id'     => $runId,
                                'process_id' => $processId,
                                'search'     => [
                                'user_id' => [$userInfo['user_id'] ?? '', '!=']
                                ],
                                'flow_process' => $flowProcess
                            ];
                            $haveNotTransactPersonObject = app($this->flowRunProcessRepository)->getHaveNotTransactPersonRepository($haveNotTransactPersonObjectParams);
                            if (!$haveNotTransactPersonObject->isEmpty()) {
                                // 当前节点需要会签且有人员未办理
                                return ['code' => ['0x030128', 'flow']];
                            }
                }
            }
        }

        app($this->flowParseService)->markUnreadMessagesAsRead($flowId, $runId, $userInfo['user_id']);
        // 自由流程
        if ($flow_type == 2) {
            $handleWay = $flowTypeObject->handle_way;
            if ($handleWay == 3) {
                app($this->flowRunService)->setDynamicHostFlag(["run_id" => $runId, "handle_way" => $handleWay, "process_id" => $processId, "flow_process" => $processId, "user_id" => $userId]);
            }
            // if($handleWay == 0 && strpos($process_transact_user,$process_host_user.",") === false && $process_host_user != "") {
            //     $process_transact_user .= $process_host_user.",";
            //     // $param["process_transact_user"] = $process_transact_user;
            // }
            $turnResult = "";
            // 结束自由流程
            if (trim($process_transact_user, ",") . $process_host_user == "") {
                $turnResult = app($this->flowRunService)->freeFlowRunTurnEnd($param, $flowEndParam);
            } else {
                $turnResult = app($this->flowRunService)->freeFlowRunTurnNext($param);
            }
            // 执行抄送
            if ($submitCopyParam) {
                $this->addFlowCopy($submitCopyParam);
            }
            //保存超时
            if ( $turnResult == 1 ) {
                //超时保存
                $param['flowType'] = 2;
                $this->saveFlowSubmitOverInfo($param,$flowTypeObject->toArray()  , 'turnNext');
                //更新flow_countersign转台为提交
                app($this->flowCountersignRepository)->updateFlowCountersignData(["data" => ["save_type" => 2], "wheres" => ["run_id" => [$runId], "countersign_user_id" => [$userId], "process_id" => [ $processId]]]);
            }
            return $turnResult;
        }

        // 固定流程
        if ($flow_type == "1") {
            // 取当前节点办理方式
            $flowNodeInfo = $this->getFlowNodeInfo($flowProcess, $formId);
            $param['is_merge'] = $flowNodeInfo['merge'];
            // 如果为合并节点，不论是强制合并节点还是非强制合并节点，判断合并节点是否完全汇总
            if ($flowNodeInfo['merge']) {
                $param['is_merge_finished'] = app($this->flowParseService)->isFinishedMergeProcess($flowId, $runId, $flowProcess, $flowNodeInfo['sort']);
            }

            $param["flow_process"] = $flowProcess;

            //如果是第三种方式，则动态设置主办人
            $processTransactType = $flowNodeInfo["process_transact_type"];
            if ($processTransactType == 3) {
                app($this->flowRunService)->setDynamicHostFlag(["run_id" => $runId, "handle_way" => $processTransactType, "process_id" => $processId, "flow_process" => $flowProcess, "user_id" => $userId]);
            }
            // 合并办理人员和主办人员
            // if($processTransactType == 0 && strpos($process_transact_user,$process_host_user.",") === false && $process_host_user != "") {
            //     $process_transact_user .= $process_host_user.",";
            //     // $param["process_transact_user"] = $process_transact_user;
            // }
            // $nextDetailResult = app($this->flowRunService)->getFlowNodeDetail($next_flow_process, $formId)->toArray();
            $param['press_add_hour_turn'] = $nextDetailResult['press_add_hour_turn'] ?? 0;

            $turnResult = "";
            // 结束固定流程，这两个方法极为重要，如果主办人是空了，说明结束流程，如果主办人不为空则说明往下一步提交，那么催办学
            $is_end = trim($process_transact_user, ",") . $process_host_user ? false : true;
            if ($is_end) {
                if ($flowNodeInfo['branch']) {
                    // 分支上节点提交结束，只有所有的分支都提交了才算是完成
                    $canFinished =   app($this->flowParseService)->isCanFinishedOnBranch($flowId, $runId, $processId);
                    if (!$canFinished) {
                        $param['unforcedMergeNodeSubmitted'] =  1;
                    }
                }
                // 如果非强制合并节点已提交，其他分支再往此合并节点提交时，直接将当前步骤标记为已提交，不产生新步骤
                if (!empty($param['unforcedMergeNodeSubmitted']) && $flowNodeInfo['branch']) {
                    $turnResult = app($this->flowRunService)->fixedFlowRunMarkSubmitted($param);
                } else {
                    $turnResult = app($this->flowRunService)->fixedFlowRunTurnEnd($param, $flowEndParam);
                }
            } else {
                $turnResult = app($this->flowRunService)->fixedFlowRunTurnNext($param, $submitUuid);
            }
            //此处等待验证
            if ($isAutoSubmit) {
                //增加自动提交标识
                app($this->flowRunProcessRepository)->updateData(["auto_submit" => 1], ["run_id" => [$runId], "process_id" => [$processId], "user_id" => [$process_host_user]]);
            }

            // 提交至普通节点时或提交结束时 触发
            if (
                !isset($turnResult['code']) && // 提交成功
                (
                    ( // 提交至下一节点
                        (
                            $nextDetailResult && // 有出口节点
                            (
                                ($nextDetailResult['process_type'] == 'common') || // 普通节点
                                (
                                    ($nextDetailResult['process_type'] == 'free') && // 自由节点
                                    isset($param['free_process_next_step']) &&
                                    ($param['free_process_next_step'] == 0)
                                )
                            )
                        )
                    ) ||
                    empty($nextDetailResult) // 提交结束
                )
            ) {
                // 创建子流程，数据外发
                if (!empty($param["sonFlowInfo"])) {
                    $sunflowParam = [
                        "flow_id" => $flowId,
                        "node_id" => $flowProcess,
                        "run_id" => $runId,
                        "process_id" => $processId,
                        "user_id" => $param["sonFlowInfo"]["user_id"] ?? $userId,
                        "run_name" => $runObject->run_name,
                        "sonFlowInfo" => $param["sonFlowInfo"],
                    ];
                    if (empty($param["branch_type"]) || !empty($param["branch_complete"])) {
                        if (!empty($runObject->parent_id)) {
                        $sunflowParam['pid'] = $runObject->run_id . "," .$runObject->parent_id;
                        } else {
                            $sunflowParam['pid'] = $runObject->run_id;
                        }
                        $sunflowCreateResult = $this->createSunflow($sunflowParam, $userInfo);
                    }
                }

                // 根据数据外发设置触发数据外发
                // 获取当前节点和目标节点数据外发设置
                $nextProcessOutsendParam = $currentProcessOutsendParam = [
                    "flow_id" => $flowId,
                    "node_id" => $flowProcess,
                    "run_id" => $runId,
                    "user_id" => $userId,
                    "run_name" => $runObject->run_name,
                    "is_back" => 0,
                    "type" => 'current',
                    "process_id" => $processId,
                    'insert_res' => $turnResult,
                ];
                // 下一节点信息和外发配置
                $nextProcessOutsendParam["node_id"] = $next_flow_process;
                $nextProcessOutsendParam["type"] = 'next';
                $nextProcessOutsendParam["process_id"] = isset($turnResult[0]['process_id']) ? $turnResult[0]['process_id'] : 0; // 下一节点的process_id需要使用flow_run_porocess表插入数据返回的值

                // 是否是退回提交
                if (isset($param["flowTurnType"]) && $param["flowTurnType"] == "back") {
                    $nextProcessOutsendParam['is_back'] = $currentProcessOutsendParam['is_back'] = 1;
                }

                $flowOutsendFlag = true;
                //查询当前节点外发设置
                //获取节点详情
                $detailResult = app($this->flowRunService)->getFlowNodeDetail($flowProcess, $formId)->toArray();
                if ($detailResult) {
                    //数据外发开关
                    $flowOutsendToggle = $detailResult['flow_outsend_toggle'];
                    //外发数据
                    $detailResult = app($this->flowProcessRepository)->getFlowNodeOutsendDetail($flowProcess)->toArray();
                    $outsend = $detailResult["flow_process_has_many_outsend"];
                    if (($flowOutsendToggle == 1) && $outsend && count($outsend)) {
                        $branchComplete = $param["branch_complete"] ?? null;
                        if (empty($param["branch_type"]) || $branchComplete ) {
                            //当前节点数据外发
                            app($this->flowOutsendService)->flowOutsend($currentProcessOutsendParam, $userInfo);
                        } else {
                            $flowOutsendFlag = false;
                        }
                    }
                }
                //查询目标节点外发设置
                //获取节点详情
                if ($nextDetailResult) {
                    //数据外发开关
                    $nextNodeFlowOutsendToggle = $nextDetailResult['flow_outsend_toggle'];
                    //外发数据
                    $nextNodeOutsend = $nextDetailResult["flow_process_has_many_outsend"];
                    if (($nextNodeFlowOutsendToggle == 1) && $nextNodeOutsend && count($nextNodeOutsend)) {
                        // 判断外发
                        if ($flowOutsendFlag) {
                            if (!(isset($param["flowTurnType"]) && $param["flowTurnType"] == "back")) {
                                if (trim($process_transact_user, ",") . $process_host_user == "") {
                                    $flowOutsendFlag = true;
                                } else {
                                    $processInfo = app($this->flowParseService)->getProcessInfo($next_flow_process);
                                    if (!empty($processInfo['merge'])) {
                                        if ($processInfo['merge'] == 2) {
                                            $isForceMerge = app($this->flowParseService)->isForceMerge($runId,$next_flow_process);
                                            if ($isForceMerge) {
                                                $flowOutsendFlag = false;
                                            }
                                        }
                                        if ($processInfo['merge'] == 1) {
                                            if (isset($isFlowProcessReceive) && $isFlowProcessReceive == true) {
                                                $flowOutsendFlag = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        //当前节点数据外发
                        if ($flowOutsendFlag) {
                            app($this->flowOutsendService)->flowOutsend($nextProcessOutsendParam, $userInfo);
                        }
                    }
                }

                // 获取流程表单数据
                $flowFormDataParam = [
                    'status' => 'handle',
                    'runId' => $runId,
                    'formId' => $formId,
                    'flowId' => $flowId,
                    'nodeId' => $flowProcess,
                    'flow_type_info' => $flowTypeObject,
                    "freeProcessStep" => $param['free_process_current_step'] ?? 0
                ];
                $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $userInfo);
                $flowData = isset($flowFormData['parseData']) ? $flowFormData['parseData'] : [];
                // if ($flowOutsendFlag){
                    // app($this->electronicSignService)->syncFlowOutsend($param['flowTurnType'] ?? '', $flowId, $runId, $flowProcess, $processId, $next_flow_process, $flowData, $flowFormDataParam, $userInfo);
                // }

                app($this->electronicSignService)->syncFlowOutsend($param['flowTurnType'] ?? '', $flowId, $runId, $flowProcess, $processId, $next_flow_process, $flowData, $flowFormDataParam, $userInfo);
                // 报销发票 更改发票状态
                app($this->invoiceService)->syncFlowOutsendInvoice($param['flowTurnType'] ?? '', $flowId, $runId, $flowProcess, $processId, $next_flow_process, $flowData, $flowFormDataParam, ['user_id' => $userId], $runObject->run_name);
            }

            if (!isset($turnResult['code'])) {
                $param['flowType'] = 1;
                $param["next_process_id"] = isset($turnResult[0]['process_id']) ? $turnResult[0]['process_id'] : 0;
                app($this->flowRunProcessRepository)->updateData(["press_add_hour_turn" => 2], ["run_id" => [$runId], "process_id" => [$processId] ]);
                //获取新生成的
                $this->saveFlowSubmitOverInfo($param , $nextDetailResult , 'turnNext');
                //更新flow_countersign转台为提交
                 app($this->flowCountersignRepository)->updateFlowCountersignData(["data" => ["save_type" => 2], "wheres" => ["run_id" => [$runId], "countersign_user_id" => [$userId], "process_id" => [ $processId]]]);
                // 自动提交未办理的经办人流程
                if ($flowNodeInfo['auto_submit_todo_flow'] == 1) {
                    $this->submitOtherUnHandleFlow(['run_id'=> $runId, 'flow_id' => $flowId, 'process_id'=> $processId, 'is_end'=> $is_end, 'branch_serial' => $param['branch_serial'] ?? 0]);
                }
                // 更新上节点的process_flag为4， 比如像超时自动提交，流程监控，跨节点提交会导致process_flag值为3，导致收回功能有问题
                $orginProcessId = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'process_id' => [$processId]], 'returntype' => 'first']);
                if ($orginProcessId) {
                    $updateFlowRunProcessdata['wheres'] = ["process_id" => [$orginProcessId->origin_process_id]  , "run_id" => [$runId] ];
                    $updateFlowRunProcessdata['data'] =  ['process_flag' => 4 ];
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData($updateFlowRunProcessdata);
                }
            }

            //【当前提交节点】提交到【当前目标节点】 满足条件时 则以【当前目标节】点为提交节点找到下一个目标节点自动提交
            //触发条件:（开启了合并提交）
            //1、【当前提交节】点没有触发子流程 或者子流程不需要办理完毕就可往下运转
            //2、【当前目标节点】没有需要触发的子流程
            //3、【当前目标节点】选择了唯一主办人，或者只选了一个办理人
            //4、【当前目标节点】没有勾选会签，或者提交到【当前目标节点】时只选择了一个人
            //5、【当前目标节点】满足必填
            //6、满足以上条件时，则以【当前目标节】点为提交节点找到【下一个目标节点】，并且目标节点需要满足以下条件才能作为【下一个目标节点】
            // a、【下一个目标节点】有唯一主办人且办理人不可编辑，或者有唯一的办理人，且此人需要跟【当前目标节点】的主办人相同
            // b、满足出口条件
            // 判断是否开启合并提交
            $continuous_submission = $flowTypeObject->flowTypeHasOneFlowOthers->continuous_submission;
            $without_back = $flowTypeObject->flowTypeHasOneFlowOthers->without_back;
            $without_required = $flowTypeObject->flowTypeHasOneFlowOthers->without_required;
            $inheritance_sign = $flowTypeObject->flowTypeHasOneFlowOthers->inheritance_sign;
            // 开启了合并提交时的处理
            if (
                !isset($turnResult['code']) &&
                isset($param["flowTurnType"]) &&
                $param["flowTurnType"] == "turn" &&
                ($continuous_submission == 2) &&
                !empty($param['next_flow_process'])
            ) {
                if (empty($process_host_user)) {
                    if (!empty($process_transact_user) && count(explode(',', trim($process_transact_user, ","))) == 1) {
                        $process_host_user = trim($process_transact_user, ",");
                    }
                }

                $nextProcessId = isset($turnResult[0]['process_id']) ? $turnResult[0]['process_id'] : $processId + 1;
                // 手动提交的节点触发了子流程 且需要子流程完成才可提交的 不往下走
                $_nodeInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'process_id' => [$processId]], 'returntype' => 'array']);
                if (!empty($_nodeInfo) && isset($_nodeInfo[0]['sub_flow_run_ids']) && !empty($_nodeInfo[0]['sub_flow_run_ids'])) {
                    $sunWorkflowInfo = app($this->flowSunWorkflowRepository)->getLists(['search' => ['node_id' => [$flowProcess], 'run_ways' => [1]]]);
                    if (!empty($sunWorkflowInfo)) {
                        return $turnResult;
                    }
                }

                // 如果下一节点主办人为空则不再继续
                if (!$process_host_user) {
                    return isset($turnResult['code']) ? $turnResult : 1;
                }

                $hostUserInfo = $this->getHostUserInfo($process_host_user);
                // 判断当前节点当前人是否可以提交
                // 这里判断当前人是否为下个节点唯一办理人
                // 如果是唯一办理人 则可以提交，找出下一个唯一出口
                // 以流程提交的目标节点为当前节点
                $currentProcess = $param['next_flow_process'];
                // 获取当前节点是否唯一出口且此出口有唯一办理人且是当前人且满足提交条件
                $nextSubmitInfo = $this->getNextSubmitInfo($currentProcess, $param, ['flow_id' => $flowId, 'form_id' => $flowTypeObject->form_id, 'run_id' => $runId, 'user_id' => $process_host_user, 'process_id' => $nextProcessId, 'inheritance_sign' => $inheritance_sign, "flowTurnType" => "turn"], $hostUserInfo, $without_back, $without_required);
                if (!empty($nextSubmitInfo)) {
                    // 按照办理模式获取当前人的参与信息，包括主办人信息等
                    $nextNodeInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$runId], 'process_id' => [$nextProcessId]],'order_by'   => ['host_flag'=>'desc'], 'returntype' => 'first']);
                    // 如果产生了委托 以被委托人为主题获取数据 ，否则无权限
                    if ($nextNodeInfo->by_agent_id) {
                        $process_host_user = $nextNodeInfo->user_id;
                        $hostUserInfo = $this->getHostUserInfo($process_host_user);
                        $nextSubmitInfo['user_id'] = $nextNodeInfo->user_id;
                    }
                    $flowHandlePageFlowRunInfo = $this->getFlowHandlePageFlowRunInfo($runId, ["user_id" => $process_host_user, "user_name" => "", "flow_run_process_id" => $nextNodeInfo->flow_run_process_id]);
                    if (isset($flowHandlePageFlowRunInfo['code'])) {
                        return $turnResult;
                    }
                    $isAutoSubmit = true;
                    if (isset($nextSubmitInfo['press_add_hour']) && !empty($nextSubmitInfo['press_add_hour'])) {
                        $limit_date = date('Y-m-d H:i:s' , floatval($nextSubmitInfo['press_add_hour'])*3600+time());
                        if (isset($nextSubmitInfo['overtime_except_nonwork']) && $nextSubmitInfo['overtime_except_nonwork'] ==1) {
                            $hostuser = $nextSubmitInfo['process_host_user'] ?? '';
                            $handleuser = $nextSubmitInfo['process_transact_user'] ?? '';
                            if ($hostuser || $handleuser) {
                                $overparam['users'] =  $hostuser ? $hostuser : $handleuser;
                                $overparam['press_add_hour'] =  $nextSubmitInfo['press_add_hour'];
                                $result = $this->getOvertimeBySelectedUser($overparam);
                                $limit_date = isset($result['limit_date']) ? $result['limit_date']:$limit_date;
                            }
                        }
                    }
                    $nextSubmitInfo['limit_date'] =  $limit_date ?? '';
                    $processFlowRunInfo = app($this->flowParseService)->getProcessFlowRun($runId,$nextSubmitInfo['flow_process'], $nextProcessId);
                    if(!empty($processFlowRunInfo['concurrent_node_id'])){
                        $nextSubmitInfo['concurrent_node_id'] = $processFlowRunInfo['concurrent_node_id'];
                    }
                    //调用提交流程方法
                    return $this->postFlowTurning($nextSubmitInfo, $hostUserInfo, $isAutoSubmit, $submitUuid);
                }
            }

            return isset($turnResult['code']) ? $turnResult : 1;
        }
    }

    /**
     * 【流程运行】 【提交流程】 超时提醒保存下一节点数据
     *saveType =>保存类型，agent委托保存 turnNext流转保存
     */
    public function saveFlowSubmitOverInfo ($param , $detailResult , $saveType) {
        //根据超时时间来得到超时提醒数据
        $limit_date = $param['limit_date']??'';
        $processId = isset($param['next_process_id'])  && $param['next_process_id'] ? $param['next_process_id'] : $param['process_id']+1;
        if (empty($limit_date)) {
            return false;
        }
        $limit_date = strtotime($limit_date);
        $overtimeDatas = $detailResult['flow_process_has_many_over_time_remind']??[];
        $param['remindFlowInfo'] = [];
        foreach ($overtimeDatas as $k => $v) {
            $param['remindFlowInfo'][$k] = $v;
            if ($v['overtime_ways'] == 0) {
                $param['remindFlowInfo'][$k]['time_format'] = date('Y-m-d H:i:s' , $limit_date - $v['remind_time']*3600);
            } else if ($v['overtime_ways'] == 1) {
                $param['remindFlowInfo'][$k]['time_format'] = date('Y-m-d H:i:s' , $limit_date + $v['remind_time']*3600);
            }
        }
        if (isset($detailResult['press_add_hour_remind']) && $detailResult['press_add_hour_remind'] == 1 && $param['flowType'] == 1) {
            $currentremind = [];
            $currentremind['overtime_ways'] =  2;
            $currentremind['time_format']   =  $param['limit_date'];
            $currentremind['node_id']       =  $detailResult['node_id'];
            array_push($param['remindFlowInfo'], $currentremind);
        }
        if (empty($param['remindFlowInfo'])) {
            return false;
        }
        $insertData = [];
        $time = date('Y-m-d H:i:s' , time());
        foreach ($param['remindFlowInfo'] as $remindKey => $remindValue) {
                //超时提醒时间和当前时间比较
                if ( time() > strtotime($remindValue['time_format'])) {
                    continue;
                }
               //更新超时提醒数据
                $insertData[] = [
                    'node_id'               => isset($remindValue['node_id']) && !empty($remindValue['node_id']) ? $remindValue['node_id']:'',
                    'overtime_ways'         => isset($remindValue['overtime_ways'])  ? $remindValue['overtime_ways'] : 0,
                    'remind_time'           => $remindValue['time_format'],
                    'send_method'           => isset($param['sendMethod']) && !empty($param['sendMethod']) ? json_encode($param['sendMethod']) : '' ,
                    'run_id'                =>$param['run_id'],
                    'process_id'            =>$processId,
                    'flow_id'               => $param['flow_id'],
                    'created_at'            => $time,
                    'updated_at'            => $time,
                ];
        }
        if (!empty($insertData)) {
             app($this->flowRunOverTimeRepository)->insertMultipleData($insertData);
        }
    }

    /**
     * 【流程运行】 【提交流程】 获取下个节点提交信息
     */
    public function getNextSubmitInfo($currentProcess, $param, $flowInfo, $userInfo, $withoutBack, $withoutRequired)
    {
        if (empty($currentProcess)) {
            return [];
        }
        //表单结构
        $formStructure = [];

        // 获取流程表单数据
        $flowFormDataParam = [
            'status' => 'handle',
            'runId' => $flowInfo['run_id'],
            'formId' => $flowInfo['form_id'],
            'flowId' => $flowInfo['flow_id'],
            'nodeId' => $currentProcess,
        ];
        $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $userInfo);
        $parseData = $flowFormData['parseData'];
        // 表单结构信息

        if (isset($flowFormData['parseFormStructure']) && !empty($flowFormData['parseFormStructure'])) {
            foreach ($flowFormData['parseFormStructure'] as $formStructureKey => $formStructureValue) {
                $formStructure[$formStructureKey] = isset($formStructureValue['control_type']) ? $formStructureValue['control_type'] : '';
            }
        }
        $currentProcessInfo = app($this->flowRunService)->getFlowNodeDetail($currentProcess);
        $currentProcessSort = $currentProcessInfo->toArray()['sort'] ?? '';
        // 默认办理人
        $process_default_user = $currentProcessInfo->flowProcessHasManyDefaultUser->pluck("user_id");
        $process_default_user = $process_default_user->toArray();

        // 默认主办人
        if (empty($currentProcessInfo->flowProcessDefaultUserHostHasOneUser)) {
            $currentProcessInfo->process_default_manage = "";
        }
        $process_default_manage = $currentProcessInfo->process_default_manage;
        //验证数据验证，不通过则停止
        $validateParams = [];
        $validateParams['run_id'] = $flowInfo['run_id'];
        $validateParams['node_id'] = $currentProcess;
        $validateParams['flow_id'] = $flowInfo['flow_id'];
        $validateParams['form_id'] = $flowInfo['form_id'];
        // $validateParams['formData'] = $parseData; // 20181213-dp修改，这里传 getFlowFormParseData 函数的返回值，到了验证里面就不需要再获取了
        $validateParams['flowFormData'] = $flowFormData;
        $validateResult = app($this->flowParseService)->validateFlowData($validateParams, $userInfo);
        if (isset($validateResult['validate']) && !$validateResult['validate']) {
            return [];
        }else {
            // 设置了提示并可提交时，不能合并提交
            if(!isset($validateResult['validate']) && count($validateResult)) {
                return [];
            }
        }
        // 自由节点停止提交
        if (isset($currentProcessInfo->process_type) && $currentProcessInfo->process_type == 'free') {
            return [];
        }
        //有需要触发的子流程,则停止提交
        if (isset($currentProcessInfo->sun_flow_toggle) && $currentProcessInfo->sun_flow_toggle == 1) {
            // 需要触发子流程
            return [];
        }
        if (isset($currentProcessInfo->process_concourse) && $currentProcessInfo->process_concourse == 1) {
            // 需要会签
            $_nodeInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => ['run_id' => [$flowInfo['run_id']], 'process_id' => [$flowInfo['process_id']]], 'returntype' => 'array']);
            if (count($_nodeInfo) > 1) {
                return [];
            }
        }
        //获取下个节点可流出节点
        if ($currentProcessInfo && $currentProcessInfo->process_to) {
            $processTo = explode(',', $currentProcessInfo->process_to);
            if (count($processTo)) {
                $canProcessTo = [];
                foreach ($processTo as $next_process) {
                    //忽略退回节点
                    if ($withoutBack == 1) {
                        $currentProcessSortNumber = app($this->flowProcessRepository)->findFlowNode($currentProcess, 'sort');
                        $nextProcessSortNumber = app($this->flowProcessRepository)->findFlowNode($next_process, 'sort');
                        if ($currentProcessSortNumber > $nextProcessSortNumber) {
                            continue;
                        }
                    }
                    //出口条件
                    $condition = app($this->flowTermRepository)->getFlowNodeOutletList(['flow_id' => $flowInfo['flow_id'], 'search' => ['source_id' => [$currentProcess], 'target_id' => [$next_process]]]);
                    if ($condition) {
                        $condition = $condition[0]['condition'];
                        //验证出口条件
                        $verify = app($this->flowRunService)->verifyFlowFormOutletCondition($condition, $flowFormData['parseData'], ['form_structure' => $formStructure, 'user_id' => $flowInfo['user_id'], 'process_id' => $currentProcess]);
                        if ($verify) {
                            $canProcessTo[] = $next_process;
                        }
                    } else {
                        $canProcessTo[] = $next_process;
                    }
                }
                //只有一个出口时 判断出口办理人
                if (count($canProcessTo) == 1) {
                    $_next_process = $canProcessTo[0];

                    $nextProcessInfo = app($this->flowRunService)->getFlowNodeDetail($_next_process);
                    $nextProcessSort = $nextProcessInfo['sort'];
                    if ($currentProcessSort > $nextProcessSort) {
                        return [];
                    }
                    // 默认办理人
                    $process_default_user = $nextProcessInfo->flowProcessHasManyDefaultUser->pluck("user_id");
                    $process_default_user = $process_default_user->toArray();
                    // 默认主办人
                    if (empty($nextProcessInfo->flowProcessDefaultUserHostHasOneUser)) {
                        $nextProcessInfo->process_default_manage = "";
                    }
                    $process_default_manage = $nextProcessInfo->process_default_manage;
                    $targetUserInfo = $this->getFixedFlowUser($flowInfo['run_id'], $flowInfo['flow_id'], $_next_process, $nextProcessInfo, $process_default_user, $process_default_manage);
                    $handle_user = '';
                    $process_transact_user = '';
                    //判断当前办理人是否是可流出节点主办人
                    if (isset($targetUserInfo['scope']['user_id']) && $targetUserInfo['scope']['user_id']  != 'ALL' && !empty($targetUserInfo['scope']['user_id']) && count($targetUserInfo['scope']['user_id']) == 1) {
                        $handle_user = $targetUserInfo['scope']['user_id'][0];
                    } else {
                        //如果办理人不唯一 且可编辑 则停止提交
                        if ($nextProcessInfo->process_default_type == 1) {
                            return [];
                        } else {
                            if (isset($targetUserInfo['default']['host']) && !empty(($targetUserInfo['default']['host'])) && count($targetUserInfo['default']['host']) == 1) {
                                $handle_user = $targetUserInfo['default']['host']['user_id'];
                            }
                            if (isset($targetUserInfo['default']['handle']['user_id']) && !empty($targetUserInfo['default']['handle']['user_id'])) {
                                $defaultHandle = $targetUserInfo['default']['handle']['user_id'];
                                $process_transact_user = implode(',', $defaultHandle);
                                if (empty($handle_user) && count($targetUserInfo['default']['handle']['user_id']) == 1) {
                                    $handle_user = implode(',', $defaultHandle);
                                }
                            }
                        }
                    }


                    if ($handle_user && $handle_user == $flowInfo['user_id']) {
                        //设置了跨节点提交忽略必填
                        $isWithoutRequired = false;
                        if ($withoutRequired != 1) {
                            //验证必填，不通过则停止提交
                            $verifyFormDataRequireParams = [
                                'run_id' => $flowInfo['run_id'],
                                'flow_process' => $currentProcess,
                                'process_id' => $flowInfo['process_id'],
                                'flow_submit_status' => 'host',
                            ];
                            // 1、验证流程数据必填
                            $verifyFormDataResult = app($this->flowPermissionService)->verifyFormDataRequired($verifyFormDataRequireParams, $userInfo);
                            if (isset($verifyFormDataResult['code'])) {
                                return [];
                            }
                        } else {
                            $isWithoutRequired = true;
                        }
                        return [
                            "flowTurnType" => "turn",
                            "flow_process" => $currentProcess,
                            "press_add_hour" => $nextProcessInfo['press_add_hour'],
                            "overtime_except_nonwork" => $nextProcessInfo['overtime_except_nonwork'],
                            "next_flow_process" => $_next_process,
                            "process_copy_user" => "",
                            "process_host_user" => $handle_user,
                            "process_id" => $flowInfo['process_id'],
                            "process_transact_user" => isset($process_transact_user) ? $process_transact_user : $handle_user,
                            "run_id" => $flowInfo['run_id'],
                            "user_id" => $handle_user,
                            "isWithoutRequired" => $isWithoutRequired,
                            'merge' => $param['merge'],
                            'branch_serial' => $param['branch_serial'],
                            'flow_serial' => $param['flow_serial']
                        ];
                    }
                }
            }
        }
        return [];
    }
    /**
     * 【流程运行】 【提交流程】 固定&自由流程，提交页面经办人提交流程
     *
     * @method postFlowTurningOther
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function postFlowTurningOther($param, $loginUserInfo)
    {
        // 必填
        $runId = $param["run_id"] ?? '';
        // 必填
        $userId = $param["user_id"] ?? '';
        $flowId = $param['flow_id'] ?? '';
        // 必填
        $processId = $param["process_id"] ?? '';
        app($this->flowParseService)->markUnreadMessagesAsRead($flowId, $runId, $userId);
        // 验证是否系统自动提交
        $currentUserJoinInfoParams = [
            'search'     => [
                'run_id'        => [$runId],
                'user_id'       => [$loginUserInfo['user_id']],
                'process_id'    => [$processId],
                'host_flag'     => [0],
                'system_submit' => [1]
            ],
            'order_by'   => ['process_id' => 'desc'],
            'returntype' => 'count',
        ];
        $currentUserLatestJoinInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList($currentUserJoinInfoParams);
        if ($currentUserLatestJoinInfo) {
            return 'system_submit';
        }
        // 经办人提交流程权限验证
        $verifyFlowTurningOtherPermissionParams = [
            'run_id' => $runId,
        ];
        $flowTurningOtherPermission = app($this->flowPermissionService)->verifyFlowTurningOtherPermission($verifyFlowTurningOtherPermissionParams, $loginUserInfo);

        if (isset($flowTurningOtherPermission['code'])) {
            return $flowTurningOtherPermission;
        }
        // 选填，是否改变此用户的流程运行状态
        // 此参数说明：1.不是第四种办理方式 2.且是主办人 3.且需要会签且未办理人员大于1 ，此时，不能将此流程放到已办事宜里，这里传个值.
        $updateUserRunType = isset($param["update_user_run_type"]) ? $param["update_user_run_type"] : "";
        // 先查flow_run，判断流程是否已经结束
        if ($runObject = app($this->flowRunRepository)->getDetail($runId)) {
            $currentStep = $runObject->current_step;
            $currentTime = date("Y-m-d H:i:s", time());
            // 第一种办理方式下 ，但未确定主办人情况下经办人不能再提交，可能是由流程办理方式切换导致的
            if (isset($param['flow_type']) && $param['flow_type'] == 1 && isset($param['flow_process'])) {
                $flowProcess = app($this->flowProcessRepository)->getDetail($param['flow_process'], false, ['process_transact_type']);
                if (!empty($flowProcess) && $flowProcess->process_transact_type == 0) {
                    $currentFlowParams = [
                        'search'     => [
                            'run_id'        => [$runId],
                            'process_id'    => [$processId],
                            'host_flag'     => [1],
                        ],
                        'returntype' => 'count',
                    ];
                    $currentFlowInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList($currentFlowParams);
                    if (empty(  $currentFlowInfo )) {
                        return ['code' => ['process_cannot_find_the_sponsor', 'flow']];
                    }
                }
            }
            // 判断在如果其他所有经办人都已经提交办理了，则最后一个经办人为主办人提交，这种情况一般在第四种办理方式+会签的情况下同时提交会出现
            // 全是经办人提交，导致流程不会运转到下一步。避免出现这种情况，这里需要判断！
            if ($this->checkOthersHandleIsSubmitted($runId, $processId, $userId)) {
                // 返回 true 则提示用户手动刷新，走主办人提交接口
                return ['code' => ['0x030178', 'flow']];
            }

            return lock(function () use ($currentStep, $updateUserRunType, $runObject, $currentTime, $param, $runId, $userId, $flowId, $processId) {
                // 流程结束
                $todu_push_params = [];
                if ($currentStep == "0") {
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time" => $currentTime, "transact_time" => $currentTime, "process_flag" => "4","user_run_type" => '3'], "wheres" => ["run_id" => [$runId], "user_id" => [$userId], "host_flag" => '0'], "whereRaw" => ["((saveform_time = '0000-00-00 00:00:00') OR (saveform_time IS NULL))"]]);
                } else {
					$processWheres = ["run_id" => [$runId], "user_id" => [$userId], "host_flag" => '0'];
					if(!empty($param['flow_process'])){
						$processWheres['flow_process'] = [$param['flow_process']];
					}
                    // app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time" => $currentTime,"transact_time" => $currentTime,"user_run_type" => '2'], "wheres" => $processWheres, "whereRaw" => ["((saveform_time = '0000-00-00 00:00:00') OR (saveform_time IS NULL)) AND process_time != '0000-00-00 00:00:00' AND process_time IS NOT NULL "]]);
					/*
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time" => $currentTime], "wheres" => ["run_id" => [$runId], "user_id" => [$userId], "host_flag" => '0'], "whereRaw" => ["((saveform_time = '0000-00-00 00:00:00') OR (saveform_time IS NULL)) AND process_time != '0000-00-00 00:00:00' AND process_time IS NOT NULL "]]);
                    if ($updateUserRunType == "") {
                        app($this->flowRunStepRepository)->updateFlowRunStepData(["data" => ["user_run_type" => '2'], "wheres" => ["run_id" => [$runId], "user_id" => [$userId] , "host_flag" =>'0']] );
                    }
					*/

                }
                $todu_push_params['receiveUser'] = $userId;
                $todu_push_params['deliverTime'] = $currentTime;
                $todu_push_params['deliverUser'] = $userId;
                $todu_push_params['operationType'] = 'reduce';
                $todu_push_params['operationId'] = ($currentStep == "0") ? '4' : '2';
                $todu_push_params['flowId'] = $flowId;
                $todu_push_params['runId'] = $runId;
                $todu_push_params['processId'] = $processId;

                // 更新办理时间
                // 检查当前提交是否在并发分支上，如果在分支上，就只提交当前分支上的数据，且包含当前process_id之前的普通节点上如果有待办也同步更新，其他分支的状态不变
                $currentProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' => ['flow_serial','branch_serial' , 'flow_process','flow_run_process_id'], 'search' => ['process_id' => [$processId], 'run_id' => [$runId]],'returntype' => 'first']);
                if (empty($currentProcessInfo)) {
                    return ['code' => ['0x000006', 'common']];
                }
                $todu_push_params['flowRunProcessId'] = $currentProcessInfo->flow_run_process_id;
                // 操作推送至集成中心
                app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                $currentProcessAtFlowSerial = $currentProcessInfo->flow_serial;
                $currentProcessAtBranchSerial = $currentProcessInfo->branch_serial;
                if (!empty($currentProcessInfo->branch_serial)) {
                    // 更新当前分支上的经办人待办数据
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time"=>$currentTime, 'transact_time' => $currentTime, 'user_run_type' => 2], "wheres" => ["run_id" => [$runId], "user_id" => [$userId],"flow_serial" =>[$currentProcessAtFlowSerial], 'branch_serial' => [$currentProcessAtBranchSerial],"host_flag" => '0'], "whereRaw" => ["((transact_time = '0000-00-00 00:00:00') OR (transact_time IS NULL)) "]]);
                    // 更新当前大序号之前的所有经办人待办数据
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time"=>$currentTime, 'transact_time' => $currentTime, 'user_run_type' => 2], "wheres" => ["run_id" => [$runId], "user_id" => [$userId],"flow_serial" =>[$currentProcessAtFlowSerial , '<'],"host_flag" => '0' ], "whereRaw" => ["((transact_time = '0000-00-00 00:00:00') OR (transact_time IS NULL)) "]]);
                    // 如果当前节点是合并节点，则直接还需要直接将合并节点的经办人同时更新
                    $flowProcess =  app($this->flowProcessRepository)->getDetail($currentProcessInfo->flow_process  , false , ['merge']);
                    if  (isset($flowProcess->merge) && $flowProcess->merge > 0) {
                        app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time"=>$currentTime, 'transact_time' => $currentTime, 'user_run_type' => 2], "wheres" => ["run_id" => [$runId], "user_run_type" =>[1] , "user_id" => [$userId],"flow_process" =>[$currentProcessInfo->flow_process], "flow_serial" =>[$currentProcessAtFlowSerial],"host_flag" => '0']]);
                    }
                } else {
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["saveform_time"=>$currentTime, 'transact_time' => $currentTime, 'user_run_type' => 2], "wheres" => ["run_id" => [$runId], "user_id" => [$userId],"process_id" =>[$processId , '<='],"host_flag" => '0' ], "whereRaw" => ["((transact_time = '0000-00-00 00:00:00') OR (transact_time IS NULL)) "]]);
                }
                if (isset($param["process_copy_user"]) && !empty($param["process_copy_user"]) && isset($param["process_id"])) {
                    // 组织抄送参数
                    $submitCopyParam = [
                        "by_user_id" => $param["process_copy_user"],
                        "run_id" => $runId,
                        "process_id" => $param["process_id"],
                        "copy_user" => $userId,
                        "feedback_content" => $param['process_copy_feedback']
                    ];
					if(!empty($param['flow_process'])){
						$submitCopyParam['flow_process'] = $param['flow_process'];
					}
                    // 执行抄送
                    $this->addFlowCopy($submitCopyParam);
                }
                //更新会签状态
                app($this->flowCountersignRepository)->updateFlowCountersignData(["data" => ["save_type" => 2], "wheres" => ["run_id" => [$runId], "countersign_user_id" => [$userId], "process_id" => [ $processId]]]);
                if ($currentStep != "0") {
                    // 当会签经办人全部提交了则给主办人发送消息通知 会签已开启，并且会签提醒也已开启
                    $flowType = app($this->flowTypeRepository)->getDetail($flowId, false, ['flow_type', 'countersign', 'countersign_remind']);
                    if ($flowType && isset($flowType->flow_type)) {
                        // 固定流程
                        if ($flowType->flow_type == '1') {
                            $flowProcess = app($this->flowProcessRepository)->getDetail($runObject->current_step, false, ['process_concourse', 'process_concourse_remind']);
                            if ($flowProcess) {
                                if ($flowProcess->process_concourse == 1 && $flowProcess->process_concourse_remind == 1) {
                                    $this->concourseSubmitSendMessage($flowId, $runId, $processId, $userId, $runObject->run_name);
                                }
                            }
                        } else if ($flowType->flow_type == '2') { // 自由流程
                            if ($flowType->countersign == 1 && $flowType->countersign_remind == 1) {
                                $this->concourseSubmitSendMessage($flowId, $runId, $processId, $userId, $runObject->run_name);
                            }
                        }
                    }
                }
                // 重新计算提交人的user_last_setp_flag
                app($this->flowParseService)->updateUserLastStepsFlag($runId, [$userId]);

                return "1";
            }, ['code' => ['0x030178', 'flow']]);
        }
    }

    /**
     * 主办人提交流程时根据设置同步提交经办人未提交的流程
     * @param $param
     * @return bool
     */
    public function submitOtherUnHandleFlow($param)
    {
        if (!isset($param['run_id']) || !isset($param['process_id'])) {
            return false;
        }
        $runId = $param['run_id'];
        $flowId = $param['flow_id'];
        $processId = $param['process_id'];
        $isEnd = $param['is_end'] ?? false;
        // 查找当前节点未办理的流程

        // 更新经办人数据
        $currentTime = date("Y-m-d H:i:s", time());

        $unSubmitDataParams = [
            'search'     => [
                'run_id'     => [$runId],
                'host_flag'  => [0],
                'user_run_type'=> [1]
            ],
            'order_by'   => ['process_id' => 'desc'],
            'whereRaw'   => ["((saveform_time = '0000-00-00 00:00:00') OR (saveform_time IS NULL))"],
            'returntype' => 'array',
            'relationFlowRunInfo' => 2
        ];
        // 增加分支查询
        if ($param['branch_serial']) {
            $unSubmitDataParams['search']['branch_serial'] = [$param['branch_serial']];
        }
        $unSubmitData = app($this->flowRunProcessRepository)->getFlowRunProcessList($unSubmitDataParams);
        if (count($unSubmitData)) {
            $currentUser = [];
            foreach ($unSubmitData as $value) {
                // 查找本步骤其他未办理的办理人数据
                if ($processId == $value['process_id']) {
                    $data = [];
                    if ($isEnd) {
                        if ($value['process_time']) {
                            $data = ["saveform_time" => $currentTime,"transact_time" => $currentTime ,"process_flag" => "4", "user_run_type" => '3', "system_submit" => 1];
                        }else {
                            $data = ["saveform_time" => $currentTime,"transact_time" => $currentTime, "process_flag" => "4", "user_run_type" => '3', "process_time" => $currentTime, "system_submit" => 1];
                        }
                    } else {
                        if ($value['process_time']) {
                            $data = ["saveform_time" => $currentTime, "transact_time" => $currentTime, "user_run_type" => '2', "process_flag" => "3", "system_submit" => 1];
                        }else {
                            $data = ["saveform_time" => $currentTime, "transact_time" => $currentTime, "user_run_type" => '2', "process_flag" => "3", "process_time" => $currentTime, "system_submit" => 1];
                        }
                    }
                    $todu_push_params = [];
                    $todu_push_params['receiveUser'] = $value['user_id'] ?? '';
                    $todu_push_params['deliverTime'] = $currentTime;
                    $todu_push_params['deliverUser'] = $param['user_id'] ?? '';
                    $todu_push_params['operationType'] = 'reduce';
                    $todu_push_params['operationId'] = $isEnd ? '4' :'2';
                    $todu_push_params['flowId'] = $value['flow_id'] ?? '';
                    $todu_push_params['runId'] = $runId;
                    $todu_push_params['processId'] = $value['process_id'] ?? '';
                    $todu_push_params['flowRunProcessId'] = $value['flow_run_process_id'] ?? '';
                    // 操作推送至集成中心
                    app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                    app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => $data, "wheres" => ["flow_run_process_id" => [$value['flow_run_process_id']]]]);
                    if (!in_array($value['user_id'], $currentUser)) {
                        // 消息提醒
                        $sendData['remindMark'] = 'flow-autoSubmit';
                        $userName = app($this->userService)->getUserName($value['user_id']);
                        $sendData['toUser'] = $value['user_id'];
                        $sendData['contentParam'] = ['flowTitle' => $value['run_name'], 'userName' => $userName];
                        $sendData['stateParams'] = ["flow_id" => intval($value['flow_id']), "run_id" => intval($runId)];
                        $sendData['module_type'] = app($this->flowTypeRepository)->getFlowSortByFlowId($value['flow_id']);
						$flowRunProcessId = app($this->flowParseService)->getFlowRunProcessId($runId,null,$value['user_id']);
						if (!empty($flowRunProcessId)) {
							$sendData['stateParams']['flow_run_process_id'] = intval($flowRunProcessId);
						}
                        Eoffice::sendMessage($sendData);
                    }
                    array_push($currentUser, $value['user_id']);
                }else {
                    // 如果其他步骤也有当前人的未提交数据，则一并提交
                    if (in_array($value['user_id'], $currentUser)) {
                        $data = [];
                        if ($isEnd) {
                            if ($value['process_time']) {
                                $data = ["saveform_time" => $currentTime, "process_flag" => "4", "system_submit" => 1];
                            }else {
                                $data = ["saveform_time" => $currentTime, "process_flag" => "4", "process_time" => $currentTime, "system_submit" => 1];
                            }
                        } else {
                            if ($value['process_time']) {
                                $data = ["saveform_time" => $currentTime, "system_submit" => 1];
                            }else {
                                $data = ["saveform_time" => $currentTime, "process_time" => $currentTime, "system_submit" => 1];
                            }
                        }
                        $todu_push_params = [];
                        $todu_push_params['receiveUser'] = $value['user_id'] ?? '';
                        $todu_push_params['deliverTime'] = $currentTime;
                        $todu_push_params['deliverUser'] = $param['user_id'] ?? '';
                        $todu_push_params['operationType'] = 'reduce';
                        $todu_push_params['operationId'] = $isEnd ? '4' :'2';
                        $todu_push_params['flowId'] = $value['flow_id'] ?? '';
                        $todu_push_params['runId'] = $runId;
                        $todu_push_params['processId'] = $value['process_id'] ?? '';
                        $todu_push_params['flowRunProcessId'] = $value['flow_run_process_id'] ?? '';
                        // 操作推送至集成中心
                        app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                        app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => $data, "wheres" => ["flow_run_process_id" => [$value['flow_run_process_id']]]]);
                    }
                }
            }
            if (!empty($currentUser)) {
                app($this->flowParseService)->markUnreadMessagesAsRead($flowId, $runId, $currentUser);
            }
        }

    }
    /**
     * 第四种办理方式加会签存在的情况下，检查除自己以外所有其他经办人是否都已办理
     * @param $runId
     * @param $processId
     * @param $userId
     * @return bool
     */
    public function checkOthersHandleIsSubmitted($runId, $processId, $userId)
    {
        $result = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => [
            'run_id'  => [$runId],
            'process_id' => [$processId]
        ]]);
        // 如果已经确定主办人了，不需要再判断了
        if ($result->isNotEmpty()) {
            foreach ($result as $item) {
                if ($item->host_flag == 1) {
                    return false;
                }
            }
        }
        $result = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => [
            'run_id'  => [$runId],
            'process_id' => [$processId],
            'user_id'  => [$userId, '<>'],
        ]]);
        if ($result->isNotEmpty()) {
            foreach ($result as $item) {
                if ($item->host_flag == 1) {
                    return false;
                }
                if ($item->saveform_time == null || $item->saveform_time == '0000-00-00 00:00:00') {
                    return false;
                }
            }
            return true;
        }
        return false;

    }

    /**
     * 最后一个会签经办人提交后消息通知主办人来办理
     * @param $flowId
     * @param $runId
     * @param $processId
     * @param $userId
     * @param $flowTitle
     */
    public function concourseSubmitSendMessage($flowId, $runId, $processId, $userId, $flowTitle)
    {
        $flowRunProcessParam = [
            "search" => ["run_id" => [$runId], "user_run_type" => [1], 'process_id' => [$processId]],
        ];
        $count = app($this->flowRunProcessRepository)->getFlowRunProcessList(array_merge($flowRunProcessParam, ['returntype' => 'count']));
        if ($count == 1) {
			$remindUserId = app($this->flowRunProcessRepository)->getFlowRunProcessList(array_merge($flowRunProcessParam, ['returntype' => 'first']))->user_id;
            $remindUserIdString =  $remindUserId. ',';
            $userName                 = app($this->userService)->getUserName($userId);
            $sendData['remindMark']   = 'flow-concourse';
            $sendData['toUser']       = $remindUserIdString;
            $sendData['contentParam'] = ['flowTitle' => $flowTitle, 'userName' => $userName];
            $sendData['stateParams']  = ["flow_id" => intval($flowId), "run_id" => intval($runId)];
            $sendData['module_type']  = app($this->flowTypeRepository)->getFlowSortByFlowId($flowId);
			$flowRunProcessId = app($this->flowParseService)->getFlowRunProcessId($runId,null,$remindUserId);
			if (!empty($flowRunProcessId)) {
				$sendData['stateParams']['flow_run_process_id'] = intval($flowRunProcessId);
			}
            Eoffice::sendMessage($sendData);
        }
    }

    /**
     * 【流程运行】 【提交流程】 固定流程批量提交
     *
     * @method flowMultiTurning
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function flowMultiTurning($param, $loginUserInfo, $submitUuid= '')
    {
        $flowMultiTurningResult = [];
        $name = 'flow_form_detail_layout_change_' . date('Ymd');
        // 参数处理
        if (!empty($param) && is_array($param)) {
            foreach ($param as $key => $value) {
                if (!empty($value) && is_array($value)) {

                    $userId = isset($loginUserInfo['user_id']) ? $loginUserInfo['user_id'] : '';
                    $runId = isset($value['run_id']) ? $value['run_id'] : '';
                    $flowId = isset($value['flow_id']) ? $value['flow_id'] : '';
                    $formId = isset($value['form_id']) ? $value['form_id'] : '';
                    $hostFlag = isset($value['host_flag']) ? $value['host_flag'] : '';
                    $runName = isset($value['run_name']) ? $value['run_name'] : '';
                    $flowProcess = isset($value['flow_process']) ? $value['flow_process'] : '';
                    $processId = isset($value['process_id']) ? $value['process_id'] : '';
                    $maxProcessId = isset($value['max_process_id']) ? $value['max_process_id'] : '';
                    $handleWay = isset($value['process_transact_type']) ? $value['process_transact_type'] : '';
                    $isConcourse = isset($value['process_concourse']) ? $value['process_concourse'] : '';
                    $singleSubmit = isset($value['single_submit']) ? $value['single_submit'] : '';
                    $flowToDoc = isset($value['flow_to_doc']) ? $value['flow_to_doc'] : '';
					$stepId = isset($value['step_id']) ? $value['step_id'] : '';
					$flowRunProcessId = isset($value['flow_run_process_id']) ? $value['flow_run_process_id'] : '';

                    // 获取流程其他设置；后面用来判断是否设置了不选人提交&判断流程流转、结束时，手动选择提醒方式
                    $flowOthersInfo = app($this->flowOthersRepository)->getFlowOthersInfo($flowId);

                    // 按照办理模式获取当前人的参与信息，包括主办人信息等
                    $handlePageParams = [
                        'currentUser' => $userId,
                        'flow_id' => $flowId,
                        'page' => 'handle',
                        'run_id' => $runId,
                        'user_name' => "",
						'step_id' => $stepId,
                        'flow_run_process_id' => $value['flow_run_process_id'] ?? ''
                    ];
                    $flowHandlePageFlowRunInfo = $this->getFlowHandlePageMainData($handlePageParams, $loginUserInfo);
                    if (isset($flowHandlePageFlowRunInfo['code'])) {
                        return ['code' => $flowHandlePageFlowRunInfo['code']];
                    }
                    $freeProcessStep = isset($flowHandlePageFlowRunInfo['freeProcessStep']) ? $flowHandlePageFlowRunInfo['freeProcessStep'] : '';
                    $freeProcessNextStep = isset($flowHandlePageFlowRunInfo['freeProcessNextStep']) ? $flowHandlePageFlowRunInfo['freeProcessNextStep'] : '';
                    $hostFlag = isset($flowHandlePageFlowRunInfo['hostFlag']) ? $flowHandlePageFlowRunInfo['hostFlag'] : '';
                    $nodeOperation = isset($flowHandlePageFlowRunInfo['node_operation']) ? $flowHandlePageFlowRunInfo['node_operation'] : [];
                    $flowType = isset($flowHandlePageFlowRunInfo['flowType']) ? $flowHandlePageFlowRunInfo['flowType'] : '';
                    $endWorkflow = isset($flowHandlePageFlowRunInfo['endWorkflow']) ? $flowHandlePageFlowRunInfo['endWorkflow'] : 0;
                    // handle / host
                    $flowSubmitStatus = isset($flowHandlePageFlowRunInfo['flowSubmitStatus']) ? $flowHandlePageFlowRunInfo['flowSubmitStatus'] : '';
                    $flowMultiTurningResult[$key]['end_workflow'] = $endWorkflow;
                    $flowMultiTurningResult[$key]['user_id'] = $userId;
                    $flowMultiTurningResult[$key]['run_id'] = $runId;
                    $flowMultiTurningResult[$key]['flow_id'] = $flowId;
                    $flowMultiTurningResult[$key]['run_name'] = $runName;
                    $flowMultiTurningResult[$key]['host_flag'] = $hostFlag;
                    $flowMultiTurningResult[$key]['flowSubmitStatus'] = $flowSubmitStatus;
                    $flowMultiTurningResult[$key]['flow_process'] = $flowProcess;
                    $flowMultiTurningResult[$key]['flow_run_process_id'] = $flowRunProcessId;
                    $flowMultiTurningResult[$key]['process_id'] = $processId;
                    $flowMultiTurningResult[$key]['flow_to_doc'] = $flowToDoc;
                    $flowMultiTurningResult[$key]['process_concourse'] = $isConcourse;
                    $flowMultiTurningResult[$key]['process_transact_type'] = $handleWay;
                    $flowMultiTurningResult[$key]['single_submit'] = $singleSubmit;
                    $flowMultiTurningResult[$key]['free_process_step'] = $freeProcessStep;
                    $flowMultiTurningResult[$key]['free_process_next_step'] = $freeProcessNextStep;
                    $flowMultiTurningResult[$key]['limit_date'] = isset($flowHandlePageFlowRunInfo['limit_date']) ? $flowHandlePageFlowRunInfo['limit_date'] : '';
                    $flowMultiTurningResult[$key]['isback_and_not_verify_condition'] = 0;

                    // 查看/办理页面初始化的时候，当前人员接收流程
                    //$this->saveReceiveFlowRun($runId, ["user_id" => $userId, "process_id" => $processId]);
                    // 查看/办理页面初始化的时候，记录最后查看时间
                    //$this->saveLastVisitdTime($runId, ["user_id" => $userId, "process_id" => $processId]);

                    // 表单模板检测
                    if (isset($flowHandlePageFlowRunInfo['formTemplateRuleInfo']['run']['code'])) {
                        $flowMultiTurningResult[$key]['form_template_check'] = 1;
                        continue;
                    }
                     if (isset($flowHandlePageFlowRunInfo['openDebug'])  && $flowHandlePageFlowRunInfo['openDebug'] == 1 && $singleSubmit != 1) {
                        $flowMultiTurningResult[$key]['open_debug_checked'] = 1;
                    }

                    // 获取流程表单数据
                    $flowFormDataParam = [
                        'status' => 'handle',
                        'runId'  => $runId,
                        'formId' => $formId,
                        'flowId' => $flowId,
                        'nodeId' => $flowProcess,
                        'formTemplateRuleInfo' => $flowHandlePageFlowRunInfo['formTemplateRuleInfo'] ?? [],
                        "freeProcessStep" => $freeProcessStep
                    ];
                    $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $loginUserInfo);
                    if ($singleSubmit) {
                        $flowMultiTurningResult[$key]['form_data'] = $flowFormData['parseData'];
                    }
                    $flowMultiTurningResult[$key]['flow_form_data'] = $flowFormData ;
                    // 设置了默认内容的会签控件
                    $hasDefaultValueCountersign = [];
                    // 表单结构信息
                    $formStructure = [];
                    if (isset($flowFormData['parseFormStructure']) && !empty($flowFormData['parseFormStructure'])) {
                        foreach ($flowFormData['parseFormStructure'] as $formStructureKey => $formStructureValue) {
                            $formStructure[$formStructureKey] = isset($formStructureValue['control_type']) ? $formStructureValue['control_type'] : '';
                            // 记录设置了默认内容的会签控件
                            if (!empty($formStructure[$formStructureKey]) && $formStructure[$formStructureKey] == 'countersign') {
                                if (isset($formStructureValue['control_attribute']) && !empty($formStructureValue['control_attribute'])) {
                                    if (!is_array($formStructureValue['control_attribute'])) {
                                        $formStructureValue['control_attribute'] = json_decode($formStructureValue['control_attribute'], true);
                                    }
                                    if (isset($formStructureValue['control_attribute']['data-efb-use-default'])) {
                                        if ($formStructureValue['control_attribute']['data-efb-use-default'] == 'true' || $formStructureValue['control_attribute']['data-efb-use-default'] == 'all') {
                                            if (isset($formStructureValue['control_attribute']['data-efb-selected-options']) && !empty($formStructureValue['control_attribute']['data-efb-selected-options'])) {
                                                $hasDefaultValueCountersign[$formStructureKey] = $formStructureValue['control_attribute']['data-efb-selected-options'];
                                                $flowFormData['parseData'][$formStructureKey . '_default_value'] = $formStructureValue['control_attribute']['data-efb-selected-options'];
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                    if (!empty($hasDefaultValueCountersign)) {
                        // 当前节点有编辑权限的会签控件
                        $hasEditPermissionsCountersign = [];
                        // 设置了默认内容的会签控件ID
                        $hasDefaultValueCountersignId = array_keys($hasDefaultValueCountersign);
                        // 搜集需要赋默认值的会签控件
                        $setDefaultValueCountersignId = [];
                        if (!empty($hasDefaultValueCountersignId)) {
                            if ($flowType == '1') {
                                $searchCountersignIdParams = [
                                    'search' => [
                                        'node_id' => [$flowProcess],
                                        'control_id' => [$hasDefaultValueCountersignId, 'in'],
                                    ],
                                ];
                                $hasEditPermissionsCountersign = app($this->flowProcessControlOperationRepository)->getHasEditControlId($searchCountersignIdParams);
                                if (!empty($hasEditPermissionsCountersign)) {
                                    $hasEditPermissionsCountersign = $hasEditPermissionsCountersign->pluck("control_id")->toArray();
                                    $setDefaultValueCountersignId = array_intersect($hasDefaultValueCountersignId, $hasEditPermissionsCountersign);
                                }
                            } else {
                                $setDefaultValueCountersignId = $hasDefaultValueCountersignId;
                            }
                        }

                        if (!empty($setDefaultValueCountersignId)) {
                            foreach ($setDefaultValueCountersignId as $defaultKey => $defaultValue) {
                                // 历史会签内容
                                $countersignContent = "";
                                if (isset($flowFormData['parseData'][$defaultValue])) {
                                    $countersignValueArray = $flowFormData['parseData'][$defaultValue];
                                    // 判断历史数据里有没有会签内容
                                    if (!empty($countersignValueArray) && is_array($countersignValueArray) && count($countersignValueArray) > 0) {
                                        foreach ($countersignValueArray as $cKey => $cValue) {
                                            if (isset($cValue['countersign_user_id']) && $userId && $processId && isset($cValue['process_id'])) {
                                                if ($cValue && $cValue['countersign_user_id'] == $userId && $cValue['process_id'] == $processId) {
                                                    $countersignContent = isset($cValue["countersign_content"]) ? $cValue["countersign_content"] : "";

                                                }
                                            }
                                        }
                                    }
                                }
                                if (empty($countersignContent) && isset($hasDefaultValueCountersign[$defaultValue])) {
                                    // 如果当前节点办理人没有会签内容且会签控件设置了默认值且会签控件有编辑权限，给当前办理人会签内容加上默认值
                                    $countersignParam = [
                                        'run_id' => $runId,
                                        'process_id' => $processId,
                                        'flow_process' => $flowProcess,
                                        'form_data' => [
                                            $defaultValue . '_COUNTERSIGN' => [
                                                'countersign_user_id' => $userId,
                                                'countersign_content' => '<h2>' . $hasDefaultValueCountersign[$defaultValue] . '</h2>',
                                            ],
                                        ],
                                    ];
                                    $countersignControlIdArray = [['control_id' => $defaultValue]];
                                    app($this->flowRunService)->formDataCountersignDataSave($countersignParam, $countersignControlIdArray);

                                    // 重新获取表单值
                                    $flowFormDataNew = $this->getFlowFormParseData($flowFormDataParam, $loginUserInfo);
                                    if ($singleSubmit) {
                                        $flowMultiTurningResult[$key]['form_data'] = $flowFormDataNew['parseData'];
                                    }
                                    $flowMultiTurningResult[$key]['flow_form_data'] = $flowFormDataNew;
                                    if (isset($flowFormData['parseData'][$defaultValue])) {
                                        $flowFormData['parseData'][$defaultValue] = $flowFormDataNew['parseData'][$defaultValue] ?? '';
                                    }

                                }
                            }
                        }
                    }
                    $value['form_structure'] = $formStructure;
                    $value['flowSubmitStatus'] = $flowSubmitStatus;
                    if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
                    // 记录保存表单的值
                    // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
                        app($this->flowLogService)->addFlowDataLogs($name.'.txt', "[".date("Y-m-d H:i:s",time())."]multi_turn_get_form_data\r\n".json_encode(["run_id" => $runId, "form_data" => $flowFormData])."\r\n");
                    }
                    // 必填验证
                    if (isset($value["flow_process"])) {
                        $verifyFormDataRequireParams = [
                            'run_id' => $runId,
                            'flow_process' => $flowProcess,
                            'process_id' => $processId,
                            'flow_submit_status' => $flowSubmitStatus,
                            'flow_form_data' => $flowFormData,
                            'flow_handle_page_flow_run_info' => $flowHandlePageFlowRunInfo
                        ];
                        // 1、验证流程数据必填 , 优化：发现一些重复查询，将重复查询的数据放入params中，以减少查询
                        $verifyFormDataResult = app($this->flowPermissionService)->verifyFormDataRequired($verifyFormDataRequireParams, $loginUserInfo );
                        if (isset($verifyFormDataResult['code'])) {
                            $flowMultiTurningResult[$key]['required_checked'] = 1;
                        }
                    }
                    // 如果是办理人就直接提交
                    if ($flowSubmitStatus == "handle") {
                        if (isset($flowMultiTurningResult[$key]['required_checked']) && $flowMultiTurningResult[$key]['required_checked'] == 1) {
                            $flowMultiTurningResult[$key]['submit_status'] = 0;
                            continue;
                        }
                        $flowTurnParams = [
                            'run_id' => $runId,
                            'user_id' => $userId,
                            'process_id' => $processId,
                            'flow_id' => $flowId,
                            'flow_type' => $flowType,
                            'flow_process' =>  $flowProcess
                        ];
                        $submitStatus = $this->postFlowTurningOther($flowTurnParams, $loginUserInfo);
                        if (isset($submitStatus['code'])) {
                            return $submitStatus;
                        }
                        if ($submitStatus == '1') {
                            // 提交成功
                            $flowMultiTurningResult[$key]['submit_status'] = 1;
                        } else {
                            // 验证通过但提交的时候失败
                            $flowMultiTurningResult[$key]['submit_status'] = 2;
                        }
                        continue;
                    } else {
                        // 节点和出口条件验证
                        $flowTransactProcess = $this->getFlowTransactProcess($value, $loginUserInfo);
                        $turnToEndFlag = "";
                        // 自由节点可自定义步骤时 不可提交
                        if (isset($flowTransactProcess['free']) && $flowTransactProcess['free'] == "able") {
                            $flowMultiTurningResult[$key]['free_process_can_not_submit'] = 1;
                        }
                        // 只有一个前进节点的时候，里面可能是提交结束的参数
                        if (isset($flowTransactProcess["turn"])) {
                            if (count($flowTransactProcess["turn"]) == 1) {
                                $currentProcessInfo = $flowTransactProcess["turn"][0];
                                if (isset($currentProcessInfo["submitEnd"])) {
                                    $turnToEndFlag = "end";
                                }
                            }
                        }
                        if (!empty($flowTransactProcess['unforcedMergeNodeSubmitted'])) {
                            $flowMultiTurningResult[$key]['unforcedMergeNodeSubmitted'] = 1;
                        }
                        if (!isset($flowTransactProcess['turn']) || empty($flowTransactProcess['turn']) || $turnToEndFlag == "end") {
                            // 结束流程
                            if ($singleSubmit && $singleSubmit == '1') {
                                if ($flowToDoc && $flowToDoc == '1') {
                                    // 可选归档文件夹
                                    $flowMultiTurningResult[$key]['flowToDoc_checked'] = 1;
                                }
                            }
                            // 数据验证
                            $dataValidateInfo = app($this->flowParseService)->getFlowValidateData(['node_id' => $flowProcess]);
                            if (!empty($dataValidateInfo)) {
                                $dataValidate = app($this->flowParseService)->validateFlowDataAchieve($loginUserInfo, $flowId, $formId, $flowProcess, $processId, $runId);
                                if (!isset($dataValidate['validate']) || !$dataValidate['validate']) {
                                    if (!isset($dataValidate['flow_data_valid_mode'])) {
                                        $flowMultiTurningResult[$key]['dataValidate_checked'] = 2;
                                        $flowMultiTurningResult[$key]['dataValidate_checked_result'] = $dataValidate;
                                    } else {
                                        $flowMultiTurningResult[$key]['dataValidate_checked'] = 1;
                                        $flowMultiTurningResult[$key]['dataValidate_checked_result'] = $dataValidate['prompt_text'] ?? '';
                                    }
                                    continue;
                                }
                            }
                            if (isset($flowTransactProcess['concourse']) && $flowTransactProcess['concourse'] == 'concourse') {
                                if ($handleWay == '3') {
                                    // 会签且第四种办理方式，且有人未办理，以经办人身份提交
                                    if (isset($flowMultiTurningResult[$key]['required_checked']) && $flowMultiTurningResult[$key]['required_checked'] == 1) {
                                        $flowMultiTurningResult[$key]['submit_status'] = 0;
                                        continue;
                                    }
                                    $flowTurnParams = [
                                        'run_id' => $runId,
                                        'user_id' => $userId,
                                        'process_id' => $processId,
                                        'flow_id' => $flowId,
                                        'flow_type' => $flowType,
                                        'flow_process' =>  $flowProcess
                                    ];
                                    $submitStatus = $this->postFlowTurningOther($flowTurnParams, $loginUserInfo);
                                    if (isset($submitStatus['code'])) {
                                        return $submitStatus;
                                    }
                                    if ($submitStatus == '1') {
                                        // 提交成功
                                        $flowMultiTurningResult[$key]['submit_status'] = 1;
                                    } else {
                                        // 验证通过但提交的时候失败
                                        $flowMultiTurningResult[$key]['submit_status'] = 2;
                                    }
                                    $flowMultiTurningResult[$key]['flowSubmitStatus'] = 'handle';
                                    continue;
                                } else {
                                    $flowMultiTurningResult[$key]['concourse_checked'] = 1;
                                }
                            }
                            // 还有是否需要触发子流程判断
                            if ($flowSubmitStatus == "host" && $flowType == "1") {
                                $nodeInfo = app($this->flowPermissionService)->getProcessInfo($flowProcess);
                                if (!empty($nodeInfo) && isset($nodeInfo->sun_flow_toggle) && $nodeInfo->sun_flow_toggle == '1') {
                                    // 需要触发子流程
                                    $flowMultiTurningResult[$key]['needTriggerSunFlow_checked'] = 1;
                                }
                                // 只有一个前进节点的时候，里面可能是提交结束的参数
                                if (isset($flowTransactProcess["turn"])) {
                                    if (count($flowTransactProcess["turn"]) == 1) {
                                        $currentProcessInfo = $flowTransactProcess["turn"][0];
                                        if (isset($currentProcessInfo['step_id']) && $currentProcessInfo['step_id']) {
                                            // 提交到自由步骤不需要验证子流程
                                            unset($flowMultiTurningResult[$key]['needTriggerSunFlow_checked']);
                                        }
                                    }
                                }
                            }

                            $flowMultiTurningResult[$key]['process_host_user'] = '';
                            $flowMultiTurningResult[$key]['process_transact_user'] = '';
                            // 最后一个节点的情况下，结束流程不需要判断是否设置了不选人提交，直接结束流程
                            // 判断不选人提交
                            // if ($flowType == "1") {
                            //     if (!empty($flowOthersInfo)) {
                            //         if (isset($flowOthersInfo[0]->submit_without_dialog) && $flowOthersInfo[0]->submit_without_dialog == '1') {
                            //         } else {
                            //             $flowMultiTurningResult[$key]['submitWithoutDialog_checked'] = 1;
                            //         }
                            //     } else {
                            //         $flowMultiTurningResult[$key]['submitWithoutDialog_checked'] = 1;
                            //     }
                            // }
                        } else {
                            if (!empty($flowTransactProcess['turn'])) {

                                //退回直接提交的流程
                                if (isset($flowTransactProcess['isBack']) && $flowTransactProcess['isBack'] == 1) {
                                    //数据验证
                                    $dataValidateInfo = app($this->flowParseService)->getFlowValidateData(['node_id' => $flowProcess]);
                                    if (!empty($dataValidateInfo)) {
                                        $dataValidate = app($this->flowParseService)->validateFlowDataAchieve($loginUserInfo, $flowId, $formId, $flowProcess, $processId, $runId);
                                        if (!isset($dataValidate['validate']) || !$dataValidate['validate']) {
                                            if (!isset($dataValidate['flow_data_valid_mode'])) {
                                                $flowMultiTurningResult[$key]['dataValidate_checked'] = 2;
                                                $flowMultiTurningResult[$key]['dataValidate_checked_result'] = $dataValidate;
                                            } else {
                                                $flowMultiTurningResult[$key]['dataValidate_checked'] = 1;
                                                $flowMultiTurningResult[$key]['dataValidate_checked_result'] = $dataValidate['prompt_text'] ?? '';
                                            }
                                            if (isset($flowMultiTurningResult[$key]['submitWithoutDialog_checked'])) {
                                                unset($flowMultiTurningResult[$key]['submitWithoutDialog_checked']);
                                            }
                                            continue;
                                        }
                                    }
                                    if (isset($flowOthersInfo[0]) && isset($flowOthersInfo[0]->flow_send_back_submit_method) && $flowOthersInfo[0]->flow_send_back_submit_method == 1) {
                                        $is_free_step = false;
                                        // 退回提交不再验证
                                        $back_verify_condition = $flowTransactProcess['back_verify_condition']?? 1;
                                        if ($back_verify_condition == 0) {
                                            $flowMultiTurningResult[$key]['isback_and_not_verify_condition'] = 1;
                                        }
                                        if (isset($flowTransactProcess["turn"])) {
                                            if (count($flowTransactProcess["turn"]) == 1) {
                                                $currentProcessInfo = $flowTransactProcess["turn"][0];
                                                if ( (isset($currentProcessInfo['condition']) && $currentProcessInfo['condition'] !== '') && $back_verify_condition==1 ) {
                                                    $flowTermCheckedResult = app($this->flowRunService)->verifyFlowFormOutletCondition($currentProcessInfo['condition'], $flowFormData['parseData'], $value);
                                                    if (!$flowTermCheckedResult) {
                                                        // 没有可流出的节点就是不满足所有的出口条件
                                                        $flowMultiTurningResult[$key]['term_checked'] = 1;
                                                        continue;
                                                    }
                                                }
                                                if (isset($currentProcessInfo['step_id']) && $currentProcessInfo['step_id']) {
                                                    // 提交到自由步骤不需要验证子流程
                                                    $is_free_step = true;
                                                }
                                            }
                                        }
                                        if (isset($flowOthersInfo[0]->alow_select_handle) && $flowOthersInfo[0]->alow_select_handle == 0) {
                                            $flowMultiTurningResult[$key]['flowTurnType'] = 'send_back_submit';
                                            // 被退回的流程再次提交时直接提交至退回节点直接提交给退回人
                                            $nodeInfo = app($this->flowPermissionService)->getProcessInfo($flowProcess);
                                            if ($is_free_step || (!empty($nodeInfo) && isset($nodeInfo->sun_flow_toggle) && $nodeInfo->sun_flow_toggle != '1')) {
                                                // 重设退回提交需要的参数
                                                $flowMultiTurningResult[$key]['next_flow_process'] = isset($flowTransactProcess['sendBackProcess']) ? $flowTransactProcess['sendBackProcess'] : '';
                                                $flowMultiTurningResult[$key]['process_host_user'] = isset($flowTransactProcess['sendBackUser']) ? $flowTransactProcess['sendBackUser'] : '';
                                                $flowMultiTurningResult[$key]['free_process_step'] = isset($value['free_process_step']) ? $value['free_process_step'] : 0;
                                                $flowMultiTurningResult[$key]['free_process_next_step'] = isset($flowTransactProcess['sendBackProcessStep']) ? $flowTransactProcess['sendBackProcessStep'] : '';
                                                // $monitor_user_id = app($this->flowRunProcessRepository)->entity->where('run_id' ,$runId )->where('process_id' ,$maxProcessId -1)->where('monitor_submit',$flowMultiTurningResult[$key]['process_host_user'])->where('host_flag' , 1)->pluck('user_id')->toArray();
                                                // if (!empty($monitor_user_id)) {
                                                //     $notMonitorSendBackUser = $monitor_user_id[0];
                                                // } else {
                                                //     $notMonitorSendBackUser =  $flowMultiTurningResult[$key]['process_host_user'];
                                                // }
                                                $notMonitorSendBackUser =  $flowMultiTurningResult[$key]['process_host_user'];
                                                // 退回再提交时判断主办人是否离职
                                                if (!empty($notMonitorSendBackUser)) {
                                                    $status =app($this->userSystemInfoRepository)->getDetail($notMonitorSendBackUser , false , ['user_status']);
                                                    if ($status && ($status->user_status ==2 || $status->user_status ==0)) {
                                                        if ($singleSubmit == 1) {
                                                          $flowMultiTurningResult[$key]['userUnique_checked'] = 1;
                                                        } else {
                                                          $flowMultiTurningResult[$key]['hostLeave_checked'] = 1;
                                                        }
                                                    }
                                                }
                                                if (isset($flowTransactProcess['turn'][0]['press_add_hour']) && !empty($flowTransactProcess['turn'][0]['press_add_hour'])) {
                                                        $limit_date = date('Y-m-d H:i:s' , floatval($flowTransactProcess['turn'][0]['press_add_hour'])*3600+time());
                                                        if ($flowTransactProcess['turn'][0]['overtime_except_nonwork'] == 1) {
                                                            $param['users'] =  $flowMultiTurningResult[$key]['process_host_user'];
                                                            if (!empty($param['users'])) {
                                                                $param['press_add_hour'] = $flowTransactProcess['turn'][0]['press_add_hour'];
                                                                $result = $this->getOvertimeBySelectedUser($param);
                                                                $limit_date = isset($result['limit_date']) ? $result['limit_date']:$limit_date;
                                                            }
                                                        }
                                                       $flowMultiTurningResult[$key]['limit_date'] =  $limit_date;
                                                }
                                            } else {
                                                $flowMultiTurningResult[$key]['needTriggerSunFlow_checked'] = 1;
                                            }
                                            continue;
                                        } else {
                                            if ($flowType == '1') {
                                                $nextFlowProcess = isset($flowTransactProcess['turn'][0]['node_id']) ? $flowTransactProcess['turn'][0]['node_id'] : '';
                                                $nextProcessInfo = $flowTransactProcess["turn"][0] ?? [];

                                                // 被退回流程原路径提交且可选择办理人，如果办理人唯一则直接提交，不唯一则弹出选人框
                                                $targetVerifyResult = $this->targetProcessVerifyWithoutSelectUser(["flowProcess" => $flowProcess, "runId" => $runId, "flowId" => $flowId, "node_id" => $nextFlowProcess, "nodeInfo" => $nextProcessInfo, "userId" => $userId, "processId" => $processId, "submit_type" =>'turn']);
                                                $turnSubmitWithoutDialog = $targetVerifyResult["submitWithoutDialog"] ?? false;
                                                $turnSubmitInfo = $targetVerifyResult["submitInfo"] ?? [];
                                                if ($turnSubmitWithoutDialog === true) {
                                                    $flowMultiTurningResult[$key]['process_host_user'] = isset($turnSubmitInfo["process_host_user"]) ? $turnSubmitInfo["process_host_user"] : "";
                                                    $flowMultiTurningResult[$key]['next_flow_process'] = isset($flowTransactProcess['sendBackProcess']) ? $flowTransactProcess['sendBackProcess'] : '';
                                                    $flowMultiTurningResult[$key]['free_process_step'] = isset($value['free_process_step']) ? $value['free_process_step'] : 0;
                                                    $flowMultiTurningResult[$key]['free_process_next_step'] = isset($flowTransactProcess['sendBackProcessStep']) ? $flowTransactProcess['sendBackProcessStep'] : '';
                                                    if (isset($nextProcessInfo['press_add_hour']) && !empty($nextProcessInfo['press_add_hour'])) {
                                                        $limit_date = date('Y-m-d H:i:s' , floatval($nextProcessInfo['press_add_hour'])*3600+time());
                                                        if ($nextProcessInfo['overtime_except_nonwork'] == 1) {
                                                            $param['users'] = $flowMultiTurningResult[$key]['process_host_user'];
                                                            if (!empty($param['users'])) {
                                                                $param['press_add_hour'] = $nextProcessInfo['press_add_hour'];
                                                                $result = $this->getOvertimeBySelectedUser($param);
                                                                $limit_date = isset($result['limit_date']) ? $result['limit_date']:$limit_date;
                                                            }
                                                        }
                                                        $flowMultiTurningResult[$key]['limit_date'] =  $limit_date;
                                                    }
                                                } else {

                                                    if ($singleSubmit) {
                                                        // 如果是单个的列表提交，弹出选人框
                                                        $flowMultiTurningResult[$key]['userUnique_checked'] = 1;
                                                    } else {
                                                        // 批量提交的就提示被退回的流程再次提交时直接提交至退回节点可选择办理人，且有多个办理人
                                                        $flowMultiTurningResult[$key]['returnDirectlySubmitAllowSelectHandle_checked'] = 1;
                                                        $flowMultiTurningResult[$key]['userUnique_checked'] = 1;
                                                    }
                                                    continue;
                                                }
                                            }
                                        }
                                        // return $flowMultiTurningResult;
                                    }
                                    // else{
                                    // $flowMultiTurningResult[$key]['submitWithoutDialog_checked'] = 2;
                                    // }
                                }
                                $flowTransactProcessCount = count($flowTransactProcess['turn']);
                                $nextNodeId = '';
                                if ($flowTransactProcessCount > 1) {
                                    // 向下可流转节点不止一个
                                    // 验证每个节点的出口条件
                                    $canTransactProcessCount = 0;
                                    foreach ($flowTransactProcess['turn'] as $flowTransactKey => $flowTransactValue) {
                                        $condition = isset($flowTransactValue['condition']) ? $flowTransactValue['condition'] : '';
                                        if (!empty($condition)) {
                                            $flowTermCheckedResult = app($this->flowRunService)->verifyFlowFormOutletCondition($condition, $flowFormData['parseData'], $value);
                                            if ($flowTermCheckedResult) {
                                                $nextProcessInfo = $flowTransactValue;
                                                $nextNodeId = $flowTransactValue['node_id'];
                                                $canTransactProcessCount++;
                                            }
                                        } else {
                                            // 自由流程这里增加了提交结束 判断一下
                                            if (isset($flowTransactValue['submitEnd']) && $flowTransactValue['submitEnd'] == 'submitEnd') {
                                                $nextNodeId = 'submitEnd';
                                            }else {
                                                $nextNodeId = $flowTransactValue['node_id'];
                                            }
                                            $nextProcessInfo = $flowTransactValue;
                                            $canTransactProcessCount++;
                                        }
                                    }
                                    if ($canTransactProcessCount == 0 ) {
                                        // 没有可流出的节点就是不满足所有的出口条件
                                        $flowMultiTurningResult[$key]['term_checked'] = 1;
                                    }
                                    if ($canTransactProcessCount > 1) {
                                        $flowMultiTurningResult[$key]['node_checked'] = 1;
                                    }
                                }
                                if ($flowTransactProcessCount == 1 || !isset($flowMultiTurningResult[$key]['node_checked'])) {
                                    if (!empty($nextNodeId)) {
                                        $nextFlowProcess = $nextNodeId;
                                    } else {
                                        $nextFlowProcess = isset($flowTransactProcess['turn'][0]['node_id']) ? $flowTransactProcess['turn'][0]['node_id'] : '';
                                    }

                                    // 可流出节点只有一个
                                    $flowMultiTurningResult[$key]['next_flow_process'] = $nextFlowProcess;

                                    $nextProcessInfo = $nextProcessInfo ?? $flowTransactProcess["turn"][0];
                                    $flowMultiTurningResult[$key]['free_process_next_step'] = $nextProcessInfo['step_id'] ?? 0;
                                    if ($flowType == "1") {
                                        // 判断不选人提交
                                        if (!empty($flowOthersInfo)) {
                                            if (isset($flowOthersInfo[0]->submit_without_dialog) && $flowOthersInfo[0]->submit_without_dialog == '1') {
                                            } else {
                                                $flowMultiTurningResult[$key]['submitWithoutDialog_checked'] = 1;
                                            }
                                        } else {
                                            $flowMultiTurningResult[$key]['submitWithoutDialog_checked'] = 1;
                                        }
                                        if ($nextFlowProcess == 'submitEnd') {
                                            $turnSubmitWithoutDialog = true;
                                        }else{
                                            $targetVerifyResult = $this->targetProcessVerifyWithoutSelectUser(["flowProcess" => $flowProcess, "runId" => $runId, "flowId" => $flowId, "node_id" => $nextFlowProcess, "nodeInfo" => $nextProcessInfo, "userId" => $userId, "processId" => $processId, "submit_type" =>'turn']);
                                            $turnSubmitWithoutDialog = $targetVerifyResult["submitWithoutDialog"] ?? false;
                                            $turnSubmitInfo = $targetVerifyResult["submitInfo"] ?? [];
                                            if ($turnSubmitWithoutDialog === true) {
                                                $flowMultiTurningResult[$key]['process_host_user'] = isset($turnSubmitInfo["process_host_user"]) ? $turnSubmitInfo["process_host_user"] : "";
                                                $flowMultiTurningResult[$key]['process_transact_user'] = isset($turnSubmitInfo["process_transact_user"]) ? $turnSubmitInfo["process_transact_user"] : "";
                        						if ( !empty($nextProcessInfo['press_add_hour']) ) {
                        						     $users = !empty($flowMultiTurningResult[$key]['process_host_user']) ?$flowMultiTurningResult[$key]['process_host_user']: $flowMultiTurningResult[$key]['process_transact_user'];
                        						     $flowMultiTurningResult[$key]['limit_date'] = date('Y-m-d H:i:s' ,floatval($nextProcessInfo['press_add_hour'])*3600+time() ) ;
                        						     if (!empty($users) && $nextProcessInfo['overtime_except_nonwork'] ==1) {
                        						        //判断是否开启不统计节假日
                        						       $result =  $this->getOvertimeBySelectedUser(['press_add_hour' =>$nextProcessInfo['press_add_hour'] , 'users'=>  $users ]);
                        						       $flowMultiTurningResult[$key]['limit_date'] =  $result['limit_date'];
                        						     }
                        						}
                                            } else {
                                                $flowMultiTurningResult[$key]['userUnique_checked'] = 1;
                                            }
                                        }

                                    } else {
                                        $flowMultiTurningResult[$key]['userUnique_checked'] = 1;
                                    }
                                    if ($flowTransactProcessCount == 1) {
                                        // 如果向下流转节点本来总共只有一个验证出口条件
                                        $condition = isset($flowTransactProcess['turn'][0]['condition']) ? $flowTransactProcess['turn'][0]['condition'] : '';
                                        if (!empty($condition)) {
                                            $flowTermCheckedResult = app($this->flowRunService)->verifyFlowFormOutletCondition($condition, $flowFormData['parseData'], $value);
                                            if ($flowTermCheckedResult) {
                                            } else {
                                                $flowMultiTurningResult[$key]['term_checked'] = 1;
                                            }
                                        }
                                    }

                                    // 会签判断
                                    if ($isConcourse == 1) {
                                        $haveNotTransactPersonObject = app($this->flowRunProcessRepository)->getHaveNotTransactPersonRepository(['run_id' => $runId, 'process_id' => $processId]);
                                        if (!$haveNotTransactPersonObject->isEmpty()) {
                                            // 需要会签且有办理人未办理
                                            $haveNotTransactPersonArray = $haveNotTransactPersonObject->toArray();
                                            foreach ($haveNotTransactPersonArray as $haveNotTransactKey => $haveNotTransactValue) {
                                                if ($haveNotTransactValue['user_id'] == $userId) {
                                                    unset($haveNotTransactPersonArray[$haveNotTransactKey]);
                                                }
                                            }
                                            if (!empty($haveNotTransactPersonArray)) {
                                                if ($handleWay == '3') {
                                                    // 会签且第四种办理方式，且有人未办理，以经办人身份提交
                                                    if (isset($flowMultiTurningResult[$key]['required_checked']) && $flowMultiTurningResult[$key]['required_checked'] == 1) {
                                                        $flowMultiTurningResult[$key]['submit_status'] = 0;
                                                        continue;
                                                    }
                                                    if ($hostFlag == '1') {
                                                        // 如果已经确定了主办人
                                                        $flowMultiTurningResult[$key]['concourse_checked'] = 1;
                                                        continue;
                                                    }
                                                    $flowTurnParams = [
                                                        'run_id' => $runId,
                                                        'user_id' => $userId,
                                                        'process_id' => $processId,
                                                        'flow_id' => $flowId,
                                                        'flow_type' => $flowType,
                                                        'flow_process' =>  $flowProcess
                                                    ];
                                                    $submitStatus = $this->postFlowTurningOther($flowTurnParams, $loginUserInfo);
                                                    if (isset($submitStatus['code'])) {
                                                        return $submitStatus;
                                                    }
                                                    if ($submitStatus == '1') {
                                                        // 提交成功
                                                        $flowMultiTurningResult[$key]['submit_status'] = 1;
                                                    } else {
                                                        // 验证通过但提交的时候失败
                                                        $flowMultiTurningResult[$key]['submit_status'] = 2;
                                                    }
                                                    $flowMultiTurningResult[$key]['flowSubmitStatus'] = 'handle';
                                                    continue;
                                                } else {
                                                    $flowMultiTurningResult[$key]['concourse_checked'] = 1;
                                                }
                                            }
                                        }
                                    }
                                    // 还有是否需要触发子流程判断 -提交至自由节点不需要验证
                                    if ($flowSubmitStatus == 'host' && $flowType == "1") {
                                        $nodeInfo = app($this->flowPermissionService)->getProcessInfo($flowProcess);
                                        if (!empty($nodeInfo) && isset($nodeInfo->sun_flow_toggle) && $nodeInfo->sun_flow_toggle == '1') {
                                            // 需要触发子流程
                                            $flowMultiTurningResult[$key]['needTriggerSunFlow_checked'] = 1;
                                        }
                                        if (isset($flowTransactProcess["turn"])) {
                                            if (count($flowTransactProcess["turn"]) == 1) {
                                                $currentProcessInfo = $flowTransactProcess["turn"][0];
                                                if (isset($currentProcessInfo['step_id']) && $currentProcessInfo['step_id']) {
                                                    // 提交到自由步骤不需要验证子流程
                                                    unset($flowMultiTurningResult[$key]['needTriggerSunFlow_checked']);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // 判断子流程是否办理完毕，进而判断父流程是否可以流转
                        if ($processId > 1) {
                            $sonFlowEndParam = [
                                "run_id" => $runId,
                                "process_id" => $processId - 1,
								"flow_process" => $flowProcess
                            ];
                            $sonFlowUnfinished = app($this->flowRunService)->getUnfinishedSunflowList($sonFlowEndParam);
                            if (!empty($sonFlowUnfinished)) {
                                // 需要子流程办理完毕才可向下流转
                                $flowMultiTurningResult[$key]['sunFlowUnfinished_checked'] = 1;
                            }
                        }
                        $dataValidateInfo = app($this->flowParseService)->getFlowValidateData(['node_id' => $flowProcess]);
                        if (!empty($dataValidateInfo)) {
                            $dataValidate = app($this->flowParseService)->validateFlowDataAchieve($loginUserInfo, $flowId, $formId, $flowProcess, $processId, $runId);
                            if (!isset($dataValidate['validate']) || !$dataValidate['validate']) {
                                if (!isset($dataValidate['flow_data_valid_mode'])) {
                                    $flowMultiTurningResult[$key]['dataValidate_checked'] = 2;
                                    $flowMultiTurningResult[$key]['dataValidate_checked_result'] = $dataValidate;
                                } else {
                                    $flowMultiTurningResult[$key]['dataValidate_checked'] = 1;
                                    $flowMultiTurningResult[$key]['dataValidate_checked_result'] = $dataValidate['prompt_text'] ?? '';
                                }
                                if (isset($flowMultiTurningResult[$key]['submitWithoutDialog_checked'])) {
                                    unset($flowMultiTurningResult[$key]['submitWithoutDialog_checked']);
                                }
                                // if(isset($flowMultiTurningResult[$key]['needTriggerSunFlow_checked'])){
                                //     unset($flowMultiTurningResult[$key]['needTriggerSunFlow_checked']);
                                // }
                                // if(isset($flowMultiTurningResult[$key]['node_checked'])){
                                //     unset($flowMultiTurningResult[$key]['node_checked']);
                                // }
                                // if(isset($flowMultiTurningResult[$key]['userUnique_checked'])){
                                //     unset($flowMultiTurningResult[$key]['userUnique_checked']);
                                // }
                                // if(isset($flowMultiTurningResult[$key]['returnDirectlySubmitAllowSelectHandle_checked'])){
                                //     unset($flowMultiTurningResult[$key]['returnDirectlySubmitAllowSelectHandle_checked']);
                                // }
                            }
                        }
                        // 可以考虑从前端直接传过来
                        if ($flowType == "1") {
                            $flowProcessArray = app($this->flowParseService)->getProcessInfo($flowProcess);
                            if ($flowProcessArray['merge'] == 2) {
                                $isForceMerge = app($this->flowParseService)->isFinishedMergeProcess($flowProcessArray['flow_id'], $runId, $flowProcess, $flowProcessArray['sort']);
                                if(!$isForceMerge) {
                                    $flowMultiTurningResult[$key]['dataValidate_checked'] = 1;
                                    $flowMultiTurningResult[$key]['is_force_merge'] = 1; // 强制并发节点
                                    $flowMultiTurningResult[$key]['dataValidate_checked_result'] = trans("flow.0x030183");
                                }
                            }
                        }
                    }
                }
            }
        }
        if (!empty($flowMultiTurningResult)) {
            foreach ($flowMultiTurningResult as $key => $value) {
                if ($singleSubmit && isset($value['end_workflow']) && $value['end_workflow'] == 1 && isset($flowMultiTurningResult[$key]['term_checked'])) {
                     //此时可以选人结束
                     $flowMultiTurningResult[$key]['userUnique_checked'] = 1;
                     $value['userUnique_checked'] = 1;
                     unset($value['term_checked']);
                     unset($flowMultiTurningResult[$key]['term_checked']);
                }
                if ($flowMultiTurningResult[$key]['isback_and_not_verify_condition'] == 1) {
                     unset($value['term_checked']);
                }
                if ($value['flowSubmitStatus'] == 'host') {
                    if (!isset($value['form_template_check'])
                        && !isset($value['required_checked'])
                        && !isset($value['submitWithoutDialog_checked'])
                        && !isset($value['node_checked'])
                        && !isset($value['userUnique_checked'])
                        && !isset($value['term_checked'])
                        && !isset($value['concourse_checked'])
                        && !isset($value['needTriggerSunFlow_checked'])
                        && !isset($value['sunFlowUnfinished_checked'])
                        && !isset($value['flowToDoc_checked'])
                        && !isset($value['returnDirectlySubmitAllowSelectHandle_checked'])
                        && !isset($value['dataValidate_checked'])
                        && !isset($value['free_process_can_not_submit'])
                        && !isset($value['open_debug_checked'])
                        && !isset($value['hostLeave_checked'])
                        && !isset($value['is_force_merge'])) {

                        // 拼装提交需要的参数
                        $flowTurnParams = [
                            'run_id' => $value['run_id'],
                            'user_id' => $value['user_id'],
                            'flowTurnType' => $value['flowTurnType'] ?? 'turn',
                            'flow_process' => $value['flow_process'],
                            'process_id' => $value['process_id'],
                            'limit_date' => $value['limit_date']??'',
                            'process_copy_user' => '',
                            'next_flow_process' => isset($value['next_flow_process']) ? $value['next_flow_process'] : '',
                            'process_host_user' => isset($value['process_host_user']) ? $value['process_host_user'] : "",
                            'process_transact_type' => $value['process_transact_type'],
                            'process_transact_user' => isset($value['process_transact_user']) ? $value['process_transact_user'] : "",
                            'multi_turn' => true,
                            'free_process_step'=> $value['free_process_step'],
                            'free_process_next_step'=> $value['free_process_next_step'],
                            'flow_form_data' => isset($value['flow_form_data']) ? $value['flow_form_data'] : "",
                            'unforcedMergeNodeSubmitted' => $value['unforcedMergeNodeSubmitted'] ?? 0,
                            'flow_run_process_id' => $value['flow_run_process_id'] ?? 0
                        ];
                        if (empty($flowTurnParams['next_flow_process'])) { // 没有流出节点时，办理方式设置为end，用于默认抄送人的触发时机判断
                            $flowTurnParams['flowTurnType'] = 'end';
                        }
                        $submitStatus = app($this->flowParseService)->postBranchTurning($flowTurnParams, $loginUserInfo);
                        if (isset($submitStatus['code'])) {
                            return $submitStatus;
                        }
                        if ($submitStatus == '1') {
                            // 提交成功
                            $flowMultiTurningResult[$key]['submit_status'] = 1;
                            // 保存流程表单数据
                            if (!empty($value['flow_form_data']['parseData'])) {
                                $saveFormDataParams = [
                                    'run_id'       => $value['run_id'],
                                    'flow_process' => $value['flow_process'],
                                    'process_id' => $value['process_id'],
                                    'form_data'    => $value['flow_form_data']['parseData']
                                ];
                                if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
                                // 记录保存表单的值
                                // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
                                    app($this->flowLogService)->addFlowDataLogs($name.'.txt', "[".date("Y-m-d H:i:s",time())."]multi_turn_save_form_data\r\n".json_encode(["run_id" => $value['run_id'], "form_data" => $saveFormDataParams, "user_id" => $loginUserInfo['user_id']])."\r\n");
                                }
                                app($this->flowRunService)->saveFlowRunFormData($saveFormDataParams, $loginUserInfo);
                            }
                        } else {
                            // 验证通过但提交的时候失败
                            $flowMultiTurningResult[$key]['submit_status'] = 2;
                        }
                    } else {
                        // 验证不通过的不满足直接提交的条件的
                        $flowMultiTurningResult[$key]['submit_status'] = 0;
                    }
                }

                $flowMultiTurningResult[$key]['submit_result_reason'] = [];
                if (isset($flowMultiTurningResult[$key]['submit_status']) && $flowMultiTurningResult[$key]['submit_status'] == 1) {
                    $flowMultiTurningResult[$key]['submit_result'] = trans("flow.0x030121"); // 成功
                } else {
                    $flowMultiTurningResult[$key]['submit_result'] = trans("flow.0x030122"); // 失败
                    /**
                     *  表单中有必填字段未填写
                     *  该流程未开启“流程提交可以不选办理人”
                     *  该流程下个步骤有多个节点
                     *  下个节点有多个办理人，只能手动选择后提交
                     *  不满足出口条件
                     *  当前节点需要会签且有人员未办理
                     *  当前节点需要触发子流程
                     *  当前节点需要子流程办理完成才可向下流转
                     *  满足直接提交条件，但提交过程失败
                     *  未能找到正确的流程表单，请联系管理员打开模板规则设置里的其他人员规则！
                     *  强制合并节点需要等来分支全部汇总后才能列表直接提交
                     *
                     */
                    if (isset($value['required_checked']) && $value['required_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030123"); // 表单中有必填字段未填写
                    }
                    if (isset($value['submitWithoutDialog_checked']) && $value['submitWithoutDialog_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030124"); // 该流程未开启隐藏选择办理人页面
                    }
                    if (isset($value['node_checked']) && $value['node_checked'] == '1' && $value['single_submit'] != '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030125"); // 该步骤向下有多个满足出口条件的流出节点
                    }
                    if (isset($value['returnDirectlySubmitAllowSelectHandle_checked']) && $value['returnDirectlySubmitAllowSelectHandle_checked'] == '1' && $value['single_submit'] != '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030152"); // 被退回的流程再次提交时直接提交至退回节点可选择办理人
                    }
                    if (isset($value['userUnique_checked']) && $value['userUnique_checked'] == '1' && $value['single_submit'] != '1') {
                        // single_submit 单个提交的不需要提示此项
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030126"); // 下个节点有多个办理人，只能手动选择后提交
                    }
                    if (isset($value['term_checked']) && $value['term_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030127"); // 不满足出口条件
                    }
                    if (isset($value['concourse_checked']) && $value['concourse_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030128"); // 当前节点需要会签且有人员未办理
                    }
                    if (isset($value['needTriggerSunFlow_checked']) && $value['needTriggerSunFlow_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030129"); // 当前节点需要触发子流程
                    }
                    if (isset($value['sunFlowUnfinished_checked']) && $value['sunFlowUnfinished_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030130"); // 当前节点需要子流程办理完成才可向下流转
                    }
                    if (isset($value['dataValidate_checked']) && !empty($value['dataValidate_checked'])) {
                        if (!empty($value['dataValidate_checked_result']) && is_array($value['dataValidate_checked_result'])) {
                            $dataValidataCheckedTemplate = '';
                            foreach ($value['dataValidate_checked_result'] as $templateKey => $templateValue) {
                                if (!empty($templateValue['prompt_text'])) {
                                    // 数据验证提示信息有多个时，前端展示失败原因时多行展示
                                    $flowMultiTurningResult[$key]['submit_result_reason'][] = $templateValue['prompt_text'];
                                }
                            }
                        } else {
                            $flowMultiTurningResult[$key]['submit_result_reason'][] = $value['dataValidate_checked_result'];
                        }
                    }
                    if (isset($flowMultiTurningResult[$key]['submit_status']) && $flowMultiTurningResult[$key]['submit_status'] == '2') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030131"); // 满足直接提交条件，但提交过程失败
                    }
                    if (isset($value['free_process_can_not_submit']) && $value['free_process_can_not_submit'] == '1' && $value['single_submit'] != '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.free_process_can_not_submit");
                    }
                    if (isset($value['form_template_check']) && $value['form_template_check'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.0x030140"); // 未能找到正确的流程表单，请联系管理员打开模板规则设置里的其他人员规则！
                    }
                    if (isset($value['open_debug_checked']) && $value['open_debug_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.open_debug_mode"); // 未能找到正确的流程表单，请联系管理员打开模板规则设置里的其他人员规则！
                    }
                    if (isset($value['hostLeave_checked']) && $value['hostLeave_checked'] == '1') {
                        $flowMultiTurningResult[$key]['submit_result_reason'][] = trans("flow.host_already_leave"); // 未能找到正确的流程表单，请联系管理员打开模板规则设置里的其他人员规则！
                    }
                }
                if(isset($flowMultiTurningResult[$key]['flow_form_data'])) unset($flowMultiTurningResult[$key]['flow_form_data']);
            }
        }

        return $flowMultiTurningResult;
    }

    /**
     * 【流程运行】 【提交流程】 固定流程批量结束
     *
     * @method flowMultiEnd
     *
     * @param  [type]             $param [description]
     *
     * @return [type]                   [description]
     */
    public function flowMultiEnd($param, $loginUserInfo)
    {
        $flowMultiEndResult = [];
        $sameMerge = [];
        // 参数处理
        if (!empty($param) && is_array($param)) {
            foreach ($param as $key => $value) {
                if (!empty($value) && is_array($value)) {

                    $userId = isset($loginUserInfo['user_id']) ? $loginUserInfo['user_id'] : '';
                    $runId = isset($value['run_id']) ? $value['run_id'] : '';
                    $flowId = isset($value['flow_id']) ? $value['flow_id'] : '';
                    $formId = isset($value['form_id']) ? $value['form_id'] : '';
                    $hostFlag = isset($value['host_flag']) ? $value['host_flag'] : '';
                    $runName = isset($value['run_name']) ? $value['run_name'] : '';
                    $flowProcess = isset($value['flow_process']) ? $value['flow_process'] : '';
                    $processId = isset($value['process_id']) ? $value['process_id'] : '';
                    $maxProcessId = isset($value['max_process_id']) ? $value['max_process_id'] : '';
                    $endWorkflow = isset($value['end_workflow']) ? $value['end_workflow'] : '';
                    $handleWay = isset($value['process_transact_type']) ? $value['process_transact_type'] : '';
                    $flowToDoc = isset($value['flow_to_doc']) ? $value['flow_to_doc'] : '';
                    $singleEnd = isset($value['single_end']) ? $value['single_end'] : '';
                    $flowRunProcessId = isset($value['flow_run_process_id']) ? $value['flow_run_process_id'] : '';
                    $flowSerial = isset($value['flow_serial']) ? $value['flow_serial'] : '';
                    $merge = isset($value['merge']) ? $value['merge'] : '';

                    // 过滤一下相同的合并节点同时提交
                    $mergeInfo = $merge."_".$runId."_".$flowSerial."_".$flowProcess;
                    if ($merge ) {
                        if  (!in_array($mergeInfo, $sameMerge)) {
                            array_push($sameMerge, $mergeInfo);
                        } else {
                            continue; // 此时说明已经有相同的合并节点提交了，无需再次提交
                        }
                    }
                    if ($endWorkflow != '1') {
                        // 本节点没有设置可结束流程，不满足直接结束条件
                        $flowMultiEndResult[$key]['setEndWorkflow_checked'] = 1;
                    }
                    $flowRunProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(['fields' => ['branch_serial', 'flow_process'],'search' => ['flow_run_process_id' => [$flowRunProcessId]], 'returntype' => 'first', 'relationNodeInfo' => true]);
                    if (!empty($flowRunProcessInfo->branch_serial) && empty($flowRunProcessInfo->flowRunProcessHasOneFlowProcess->merge)) {
                        // 分支上的节点除了合并节点外暂不支持结束
                        $flowMultiEndResult[$key]['branchNode_checked'] = 1;
                    }

                    // 按照办理模式获取当前人的参与信息，包括主办人信息等
                    $handlePageParams = [
                        'currentUser' => $userId,
                        'flow_id' => $flowId,
                        'page' => 'handle',
                        'run_id' => $runId,
                        'user_name' => "",
                        'flow_run_process_id' => $value['flow_run_process_id'] ?? ''
                    ];
                    $flowHandlePageFlowRunInfo = $this->getFlowHandlePageMainData($handlePageParams, $loginUserInfo);
                    if (isset($flowHandlePageFlowRunInfo['code'])) {
                        return ['code' => ['0x000006', 'common']];
                    }
                    $hostFlag = isset($flowHandlePageFlowRunInfo['hostFlag']) ? $flowHandlePageFlowRunInfo['hostFlag'] : '';
                    $nodeOperation = isset($flowHandlePageFlowRunInfo['node_operation']) ? $flowHandlePageFlowRunInfo['node_operation'] : [];
                    $flowType = isset($flowHandlePageFlowRunInfo['flowType']) ? $flowHandlePageFlowRunInfo['flowType'] : '';
                    // handle / host
                    $flowSubmitStatus = isset($flowHandlePageFlowRunInfo['flowSubmitStatus']) ? $flowHandlePageFlowRunInfo['flowSubmitStatus'] : '';
                    // // 混合条件，判断是主办人提交还是经办人提交；在需要的时候设置主办人
                    // $statusParam = [
                    //     "processId"    => $processId,
                    //     "maxProcessId" => $maxProcessId,
                    //     "hostFlag"     => $hostFlag,
                    //     "handleWay"    => $handleWay,
                    //     "runId"        => $runId
                    // ];

                    // if ($handleWay == '3') {
                    //     // 第四种办理方式 如果没有主办人临时设置为主办人，用于后面的提交
                    //     if ($processId == $maxProcessId) {
                    //         $hostFlag = 1;
                    //     } else {
                    //         $opFlagIsExistResult = app($this->flowRunService)->opFlagIsExist(["run_id" => $runId, "process_id" => $processId]);
                    //         if (!$opFlagIsExistResult) {
                    //             $hostFlag = 1;
                    //         } else {
                    //             $hostFlag = 0;
                    //         }
                    //     }

                    // } else {
                    //     $handleTypeInfo = $this->decideFlowSubmitStatus($statusParam);
                    //     if ($handleTypeInfo["needSetHost"] == "true") {
                    //         // 当前人员是最新步骤，且，当前流程没有主办人，且，是前三种办理方式；此时，需要设置主办人
                    //         $setHostFlagParam = [
                    //             "user_id" => $userId,
                    //             "flow_process" => $flowProcess,
                    //             "process_id" => $processId,
                    //             "handle_way" => $handleWay,
                    //             "run_id" => $runId
                    //         ];
                    //         $result = app($this->flowRunService)->setHostFlag($setHostFlagParam);
                    //         if ($result == "1") {
                    //             // 当前人员被成功设置成主办人
                    //             $hostFlag = 1;
                    //         } else {
                    //             $hostFlag = 0;
                    //         }
                    //     }
                    // }

                    $flowMultiEndResult[$key]['user_id'] = $userId;
                    $flowMultiEndResult[$key]['run_id'] = $runId;
                    $flowMultiEndResult[$key]['flow_id'] = $flowId;
                    $flowMultiEndResult[$key]['run_name'] = $runName;
                    $flowMultiEndResult[$key]['host_flag'] = $hostFlag;
                    $flowMultiEndResult[$key]['flowSubmitStatus'] = $flowSubmitStatus;
                    $flowMultiEndResult[$key]['flow_process'] = $flowProcess;
                    $flowMultiEndResult[$key]['process_id'] = $processId;
                    $flowMultiEndResult[$key]['single_end'] = $singleEnd;
                    $flowMultiEndResult[$key]['process_transact_type'] = $handleWay;
                    $flowMultiEndResult[$key]['flow_run_process_id'] = $flowRunProcessId;

                    $value['flowSubmitStatus'] = $flowSubmitStatus;

                    // 查看/办理页面初始化的时候，当前人员接收流程
                    $this->saveReceiveFlowRun($runId, ["user_id" => $userId, "process_id" => $processId]);
                    // 查看/办理页面初始化的时候，记录最后查看时间
                    $this->saveLastVisitdTime($runId, ["user_id" => $userId, "process_id" => $processId]);

                    if ($flowSubmitStatus == "handle") {
                        // 当前用户不是此节点主办人，不满足直接结束条件
                        $flowMultiEndResult[$key]['notHostFlag_checked'] = 1;
                        $flowMultiEndResult[$key]['submit_status'] = 0;
                    } else {
                        // 获取流程表单数据
                        $flowFormDataParam = [
                            'status' => 'handle',
                            'runId'  => $runId,
                            'formId' => $formId,
                            'flowId' => $flowId,
                            'nodeId' => $flowProcess,
                            'formTemplateRuleInfo' => $flowHandlePageFlowRunInfo['formTemplateRuleInfo'] ?? []
                        ];
                        $flowFormData = $this->getFlowFormParseData($flowFormDataParam, $loginUserInfo);
                        $flowMultiEndResult[$key]['flow_form_data'] = $flowFormData;

                        // 设置了默认内容的会签控件
                        $hasDefaultValueCountersign = [];
                        // 表单结构信息
                        $formStructure = [];
                        if (isset($flowFormData['parseFormStructure']) && !empty($flowFormData['parseFormStructure'])) {
                            foreach ($flowFormData['parseFormStructure'] as $formStructureKey => $formStructureValue) {
                                $formStructure[$formStructureKey] = isset($formStructureValue['control_type']) ? $formStructureValue['control_type'] : '';
                                // 记录设置了默认内容的会签控件
                                if (!empty($formStructure[$formStructureKey]) && $formStructure[$formStructureKey] == 'countersign') {
                                    if (isset($formStructureValue['control_attribute']) && !empty($formStructureValue['control_attribute'])) {
                                        if (!is_array($formStructureValue['control_attribute'])) {
                                            $formStructureValue['control_attribute'] = json_decode($formStructureValue['control_attribute'], true);
                                        }
                                        if (isset($formStructureValue['control_attribute']['data-efb-use-default'])) {
                                            if ($formStructureValue['control_attribute']['data-efb-use-default'] == 'true' || $formStructureValue['control_attribute']['data-efb-use-default'] == 'all') {
                                                if (isset($formStructureValue['control_attribute']['data-efb-selected-options']) && !empty($formStructureValue['control_attribute']['data-efb-selected-options'])) {
                                                    $hasDefaultValueCountersign[$formStructureKey] = $formStructureValue['control_attribute']['data-efb-selected-options'];
                                                    $flowFormData['parseData'][$formStructureKey . '_default_value'] = $formStructureValue['control_attribute']['data-efb-selected-options'];
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        if (!empty($hasDefaultValueCountersign)) {
                            // 当前节点有编辑权限的会签控件
                            $hasEditPermissionsCountersign = [];
                            // 设置了默认内容的会签控件ID
                            $hasDefaultValueCountersignId = array_keys($hasDefaultValueCountersign);
                            // 搜集需要赋默认值的会签控件
                            $setDefaultValueCountersignId = [];
                            if (!empty($hasDefaultValueCountersignId)) {
                                if ($flowType == '1') {
                                    $searchCountersignIdParams = [
                                        'search' => [
                                            'node_id' => [$flowProcess],
                                            'control_id' => [$hasDefaultValueCountersignId, 'in'],
                                        ],
                                    ];
                                    $hasEditPermissionsCountersign = app($this->flowProcessControlOperationRepository)->getHasEditControlId($searchCountersignIdParams);
                                    if (!empty($hasEditPermissionsCountersign)) {
                                        $hasEditPermissionsCountersign = $hasEditPermissionsCountersign->pluck("control_id")->toArray();
                                        $setDefaultValueCountersignId = array_intersect($hasDefaultValueCountersignId, $hasEditPermissionsCountersign);
                                    }
                                } else {
                                    $setDefaultValueCountersignId = $hasDefaultValueCountersignId;
                                }
                            }
                            if (!empty($setDefaultValueCountersignId)) {
                                foreach ($setDefaultValueCountersignId as $defaultKey => $defaultValue) {
                                    // 历史会签内容
                                    $countersignContent = "";
                                    if (isset($flowFormData['parseData'][$defaultValue])) {
                                        $countersignValueArray = $flowFormData['parseData'][$defaultValue];
                                        // 判断历史数据里有没有会签内容
                                        if (!empty($countersignValueArray) && is_array($countersignValueArray) && count($countersignValueArray) > 0) {
                                            foreach ($countersignValueArray as $cKey => $cValue) {
                                                if (isset($cValue['countersign_user_id']) && $userId && $processId && isset($cValue['process_id'])) {
                                                    if ($cValue && $cValue['countersign_user_id'] == $userId && $cValue['process_id'] == $processId) {
                                                        $countersignContent = isset($cValue["countersign_content"]) ? $cValue["countersign_content"] : "";

                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (empty($countersignContent) && isset($hasDefaultValueCountersign[$defaultValue])) {
                                        // 如果当前节点办理人没有会签内容且会签控件设置了默认值且会签控件有编辑权限，给当前办理人会签内容加上默认值
                                        $countersignParam = [
                                            'run_id' => $runId,
                                            'process_id' => $processId,
                                            'flow_process' => $flowProcess,
                                            'form_data' => [
                                                $defaultValue . '_COUNTERSIGN' => [
                                                    'countersign_user_id' => $userId,
                                                    'countersign_content' => '<h2>' . $hasDefaultValueCountersign[$defaultValue] . '</h2>',
                                                ],
                                            ],
                                        ];
                                        $countersignControlIdArray = [['control_id' => $defaultValue]];
                                        app($this->flowRunService)->formDataCountersignDataSave($countersignParam, $countersignControlIdArray);
                                    }
                                }
                            }
                        }

                        // 必填验证
                        if (isset($value["flow_process"])) {
                            $verifyFormDataRequireParams = [
                                'run_id' => $runId,
                                'flow_process' => $flowProcess,
                                'process_id' => $processId,
                                'flow_submit_status' => 'host',
                            ];
                            // 1、验证流程数据必填
                            $verifyFormDataResult = app($this->flowPermissionService)->verifyFormDataRequired($verifyFormDataRequireParams, $loginUserInfo);
                            if (isset($verifyFormDataResult['code'])) {
                                $flowMultiEndResult[$key]['required_checked'] = 1;
                            }
                        }

                        // 单个直接结束的需要归档判断
                        if ($singleEnd && $singleEnd == '1' && $flowToDoc == '1') {
                            $flowMultiEndResult[$key]['flowToDoc_checked'] = 1;
                        }

                        // 判断子流程是否办理完毕，进而判断父流程是否可以流转
                        // if ($processId > 1) {
                        //     $sonFlowEndParam = [
                        //         "run_id"     => $runId,
                        //         "process_id" => $processId - 1,
                        //     ];
                        //     $sonFlowUnfinished = app($this->flowRunService)->getUnfinishedSunflowList($sonFlowEndParam);
                        //     if (!empty($sonFlowUnfinished)) {
                        //         // 需要子流程办理完毕才可向下流转
                        //         $flowMultiEndResult[$key]['sunFlowUnfinished_checked'] = 1;
                        //     }
                        // }
                        $dataValidateInfo = app($this->flowParseService)->getFlowValidateData(['node_id' => $flowProcess]);
                        if (!empty($dataValidateInfo)) {
                            $dataValidate = app($this->flowParseService)->validateFlowDataAchieve($loginUserInfo, $flowId, $formId, $flowProcess, $processId, $runId);
                            if (!isset($dataValidate['validate']) || !$dataValidate['validate']) {
                                if (!isset($dataValidate['flow_data_valid_mode'])) {
                                    $flowMultiEndResult[$key]['dataValidate_checked'] = 2;
                                    $flowMultiEndResult[$key]['dataValidate_checked_result'] = $dataValidate;
                                } else {
                                    $flowMultiEndResult[$key]['dataValidate_checked'] = 1;
                                    $flowMultiEndResult[$key]['dataValidate_checked_result'] = $dataValidate['prompt_text'] ?? '';
                                }
                            }
                        }
                        if ($flowType == '1') {
                            $isForceMerge = app($this->flowParseService)->isForceMerge($runId,$flowProcess);
                            if($isForceMerge) {
                                $flowMultiEndResult[$key]['dataValidate_checked'] = 1;
                                $flowMultiEndResult[$key]['is_force_merge'] = 1; // 强制并发节点
                                $flowMultiEndResult[$key]['dataValidate_checked_result'] = trans("flow.0x030183");
                            }
                            //
                            $flowProcessInfo = app($this->flowProcessRepository)->getDetail($flowProcess , false , ['merge']);
                            if (isset($flowProcessInfo->merge) && $flowProcessInfo->merge == 2) {
                                 $finished = app($this->flowParseService)->isFinishedMergeProcess($flowId, $runId, $flowProcess);
                            } else {
                                $finished =  true;
                            }
                            $flowMultiEndResult[$key]['merge_finished'] =  $finished ;
                        }

                    }
                }
            }
        }
        if (!empty($flowMultiEndResult)) {
            foreach ($flowMultiEndResult as $key => $value) {
                if ($value['flowSubmitStatus'] == 'host') {
                    if ($value['single_end'] != '1') {
                        if (!isset($value['setEndWorkflow_checked']) && !isset($value['branchNode_checked']) && !isset($value['notHostFlag_checked']) && !isset($value['required_checked']) && !isset($value['flowToDoc_checked']) && !isset($value['dataValidate_checked'])) {
                            // 拼装提交需要的参数
                            $flowTurnParams = [
                                'run_id' => $value['run_id'],
                                'user_id' => $value['user_id'],
                                'flow_process' => $value['flow_process'],
                                'process_id' => $value['process_id'],
                                'limit_date' => '',
                                'process_copy_user' => '',
                                'next_flow_process' => isset($value['next_flow_process']) ? $value['next_flow_process'] : '',
                                'process_host_user' => '',
                                'process_transact_type' => $value['process_transact_type'],
                                'flow_run_process_id' => $value['flow_run_process_id'],
                                'process_transact_user' => '',
                                'multi_turn' => true,
                            ];

                            // 验证通过调用结束流程
                            $submitStatus = app($this->flowParseService)->postBranchTurning($flowTurnParams, $loginUserInfo);
                            if (isset($submitStatus['code'])) {
                                return $submitStatus;
                            }
                            if ($submitStatus == '1') {
                                // 结束成功
                                $flowMultiEndResult[$key]['submit_status'] = 1;
                                // 保存流程表单数据
                                if (!empty($value['flow_form_data']['parseData'])) {
                                    $saveFormDataParams = [
                                        'run_id'       => $value['run_id'],
                                        'flow_process' => $value['flow_process'],
                                        'process_id' => $value['process_id'],
                                        'form_data'    => $value['flow_form_data']['parseData']
                                    ];
                                    app($this->flowRunService)->saveFlowRunFormData($saveFormDataParams, $loginUserInfo);
                                }
                            } else {
                                // 验证通过但结束的时候失败
                                $flowMultiEndResult[$key]['submit_status'] = 2;
                            }
                        } else {
                            // 验证不通过的不满足直接结束的条件的
                            $flowMultiEndResult[$key]['submit_status'] = 0;
                        }
                    } else {
                        // 单个提交的特殊处理
                        if (!isset($value['setEndWorkflow_checked']) && !isset($value['notHostFlag_checked']) && !isset($value['required_checked']) && !isset($value['dataValidate_checked'])) {
                            $flowMultiEndResult[$key]['submit_status'] = 1;
                        } else if (isset($value['is_force_merge'])) { // 强制并发节点未完全汇总的时候当成正常结束流程处理，复用 end-component，在里面给出对应提示
                            $flowMultiEndResult[$key]['submit_status'] = 1;
                        } else {
                            $flowMultiEndResult[$key]['submit_status'] = 0;
                        }
                    }
                }
                $flowMultiEndResult[$key]['submit_result_reason'] = [];
                if (isset($flowMultiEndResult[$key]['submit_status']) && $flowMultiEndResult[$key]['submit_status'] == 1) {
                    $flowMultiEndResult[$key]['submit_result'] = trans("flow.0x030121"); // 成功
                } else {
                    $flowMultiEndResult[$key]['submit_result'] = trans("flow.0x030122"); // 失败
                    // ① 当前节点未设置可结束流程
                    // ② 当前用户不是此节点主办人
                    // ③ 表单中有必填字段未填写
                    // ④ 当前节点需要子流程办理完成才可向下流转
                    // ⑤ 满足直接结束条件，但结束过程失败
                    if (isset($value['setEndWorkflow_checked']) && $value['setEndWorkflow_checked'] == '1') {
                        $flowMultiEndResult[$key]['submit_result_reason'][] = trans("flow.0x030132"); // 当前节点未设置可结束流程
                    }
                    if (isset($value['branchNode_checked']) && $value['branchNode_checked'] == '1') {
                        $flowMultiEndResult[$key]['submit_result_reason'][] = trans("flow.branch_node_can_not_end"); // 并发分支上的节点除合并节点外暂不支持结束
                    }
                    if (isset($value['notHostFlag_checked']) && $value['notHostFlag_checked'] == '1') {
                        $flowMultiEndResult[$key]['submit_result_reason'][] = trans("flow.0x030133"); // 当前用户不是此节点主办人
                    }
                    if (isset($value['required_checked']) && $value['required_checked'] == '1') {
                        $flowMultiEndResult[$key]['submit_result_reason'][] = trans("flow.0x030123"); // 表单中有必填字段未填写
                    }
                    // if (isset($value['flowToDoc_checked']) && $value['flowToDoc_checked'] == '1' && $value['single_end'] != '1') {
                    //     $flowMultiEndResult[$key]['submit_result_reason'][] = '流程结束需要归档，归档文件夹可选；<br>';
                    // }
                    // if (isset($value['sunFlowUnfinished_checked']) && $value['sunFlowUnfinished_checked'] == '1') {
                    //     $flowMultiEndResult[$key]['submit_result_reason'][] = trans("flow.0x030130"); // 当前节点需要子流程办理完成才可向下流转
                    // }
                    if (isset($value['dataValidate_checked']) && !empty($value['dataValidate_checked'])) {
                        if (!empty($value['dataValidate_checked_result']) && is_array($value['dataValidate_checked_result'])) {
                            $dataValidataCheckedTemplate = '';
                            foreach ($value['dataValidate_checked_result'] as $templateKey => $templateValue) {
                                if (!empty($templateValue['prompt_text'])) {
                                    $flowMultiEndResult[$key]['submit_result_reason'][] = $templateValue['prompt_text'];
                                }
                            }
                        } else {
                            $flowMultiEndResult[$key]['submit_result_reason'][] = $value['dataValidate_checked_result'];
                        }
                    }
                    if (isset($flowMultiEndResult[$key]['submit_status']) && $flowMultiEndResult[$key]['submit_status'] == '2') {
                        $flowMultiEndResult[$key]['submit_result_reason'][] = trans("flow.0x030134"); // 满足直接结束条件，但结束过程失败
                    }
                }
                if(isset($flowMultiEndResult[$key]['flow_form_data'])) unset($flowMultiEndResult[$key]['flow_form_data']);
            }
        }

        return $flowMultiEndResult;
    }

    /**
     * 【流程运行】 获取流程flow_run为主表的所有相关流程运行信息
     *
     * @method getFlowRunningInfo
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function getFlowRunningInfo($runId, $data)
    {
        $data["getType"] = "simple";
        $flowRunInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, $data);
        $max_process_id = $flowRunInfo->max_process_id;
        // 最新步骤主办人
        $currentStepHostUser = "";
        $flowRunInfo["current_step_host_user"] = [];
        // 计算步骤耗时
        if ($flowRunInfo->flowRunHasManyFlowRunProcess->count()) {
            foreach ($flowRunInfo->flowRunHasManyFlowRunProcess as $key => $value) {
                $hostFlag = $value->host_flag;
                $processTime = $value->process_time;
                $deliverTime = $value->deliver_time;
                $saveFormTime = $value->saveform_time;
                $timeConsume = "";
                if ($processTime) {
                    if ($hostFlag == "1") {
                        if ($deliverTime) {
                            $timeConsume = strtotime($deliverTime) - strtotime($processTime);
                        } else {
                            $timeConsume = time() - strtotime($processTime);
                        }
                    } else {
                        if ($saveFormTime) {
                            $timeConsume = strtotime($saveFormTime) - strtotime($processTime);
                        } else {
                            $timeConsume = time() - strtotime($processTime);
                        }
                    }
                }
                $timeConsumeString = "";
                if ($timeConsume) {
                    $day = floor($timeConsume / 86400);
                    $hour = floor(($timeConsume % 86400) / 3600);
                    $min = floor(($timeConsume % 3600) / 60);
                    $sec = floor($timeConsume % 60);
                    if ($day > 0) {
                        $timeConsumeString .= $day . trans("flow.0x030059");
                    }
                    //天
                    if ($hour > 0) {
                        $timeConsumeString .= $hour . trans("flow.0x030059");
                    }
                    //小时
                    if ($min > 0) {
                        $timeConsumeString .= $min . trans("flow.0x030059");
                    }
                    //分钟
                    if ($sec > 0) {
                        $timeConsumeString .= $sec . trans("flow.0x030059");
                    }
                    //秒
                }
                $flowRunInfo->flowRunHasManyFlowRunProcess[$key]["time_consume_string"] = $timeConsumeString;
                if ($max_process_id == $value->process_id && $hostFlag == "1") {
                    $currentStepHostUser = $value->user_id;
                }
                // 自由节点时，获取所在步骤的名称
                if (isset($value->process_type) && $value->process_type == 'free') {
                    $freeProcessStep = $value->free_process_step;
                    $nodeId = $value->flow_process;
                    if ($freeProcessStep) {
                        $freeProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($value->run_id,$nodeId,$freeProcessStep);
                        if ($freeProcessInfo && $max_process_id == $value->process_id && $value->free_process_step) {
                            $flowRunInfo['free_process_name'] = $freeProcessInfo->process_name;
                        }
                    }
                }
            }
        }
        if ($currentStepHostUser) {
            if ($userName = app($this->userService)->getUserName($currentStepHostUser)) {
                $flowRunInfo["current_step_host_user"] = ["user_id" => $currentStepHostUser, "user_name" => $userName];
            }
        }
        //获取催办时间
        $flowRunProcessArray = $flowRunInfo->toArray();
        $flowtype = isset($flowRunProcessArray['flow_run_has_one_flow_type']['flow_type']) ? $flowRunProcessArray['flow_run_has_one_flow_type']['flow_type']:'';
        $flowRunInfo['limit_date'] = '';
        if (!empty($flowtype)) {
            if ($flowtype == 1) {
                foreach ($flowRunProcessArray['flow_run_has_many_flow_run_step'] as $stepKey => $stepValue) {
                    if ($stepValue['process_id'] == $max_process_id ) {
                        $flowRunInfo['limit_date'] = isset($stepValue['flow_run_step_has_one_flow_process']['press_add_hour']) ? $stepValue['flow_run_step_has_one_flow_process']['press_add_hour']: '';
                        $flowRunInfo['overtime_except_nonwork'] = $stepValue['flow_run_step_has_one_flow_process']['overtime_except_nonwork'];
                        break;
                    }
                }
            } else if($flowtype == 2) {
                $flowRunInfo['limit_date'] = isset($flowRunProcessArray['flow_run_has_one_flow_type']['press_add_hour']) ? $flowRunProcessArray['flow_run_has_one_flow_type']['press_add_hour']: '';
                $flowRunInfo['overtime_except_nonwork'] = $flowRunProcessArray['flow_run_has_one_flow_type']['overtime_except_nonwork'];
            }

        }
        // 关联 $systemSecurityService 获取"工作流办理时流程表单自动保存频率"
        $autoSaveFrequency = app($this->flowSettingService)->getFlowSettingsParamValueByParamKey("form_refresh_frequency");
        $flowRunInfo["form_refresh_frequency"] = $autoSaveFrequency;
        $flowRunInfo->flowRunHasOneFlowType->flow_type_has_one_flow_others = $flowRunInfo->flowRunHasOneFlowType->flowTypeHasOneFlowOthers;
        $flowRunInfo->flowRunHasOneFlowType->flow_type_has_many_flow_process = $flowRunInfo->flowRunHasOneFlowType->flowTypeHasManyFlowProcess;
        $flowRunInfo["attachments"] = app($this->attachmentService)->getAttachmentIdsByEntityId(['entity_table' => 'flow_run', 'entity_id' => ["run_id" => [$runId]]]);
        return $flowRunInfo;
    }

    /**
     * 【流程运行】 【流程数据】 获取某条流程解析后的formdata
     * 参数：
     * status:表单状态[preview - 预览;new - 新建，传 historyId 的时候，要处理;handle - 办理;view - 查看;]
     * nodeId:节点id
     * flowId:流程id
     * runId:运行流程id
     * formId:表单id
     * historyRunId:历史/子流程数据id
     *
     * @method getFlowFormParseData
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function getFlowFormParseData($data, $userInfo)
    {
        $status = isset($data["status"]) ? $data["status"] : "";
        $formId = isset($data["formId"]) ? $data["formId"] : "";
        $flowId = isset($data["flowId"]) ? $data["flowId"] : "";
        $nodeId = isset($data["nodeId"]) ? $data["nodeId"] : "";
        $runId  = isset($data["runId"]) ? $data["runId"] : "";
        $ruleId = isset($data["ruleId"]) ? $data["ruleId"] : "";
        $historyFormId = isset($data["historyFormId"]) ? $data["historyFormId"] : 0;
        $freeProcessStep = isset($data["freeProcessStep"]) ? $data["freeProcessStep"] : 0;
        // 20180126-dp-流程查询的时候，传这个参数，同时传 formTemplateRuleInfo ，此时会判断每条流程的权限和表单模板
        // 可选值[flow_query][historyDataFlag]
        $getDataType = isset($data["getDataType"]) ? $data["getDataType"] : "";
        $historyRunId = isset($data["historyRunId"]) ? $data["historyRunId"] : "";
        // 父表单id--子表单预览页面，也会走这里。
        $parentId = isset($data["parentId"]) ? $data["parentId"] : "";
        // pageMain 解析出来的表单模板规则的info
        $formTemplateRuleInfo = isset($data["formTemplateRuleInfo"]) ? $data["formTemplateRuleInfo"] : "";
        if ($formTemplateRuleInfo) {
            if (!is_array($formTemplateRuleInfo)) {
                $formTemplateRuleInfo = json_decode($formTemplateRuleInfo, true);
            }
            if (empty($ruleId)) {
                $ruleId = $formTemplateRuleInfo['run'] ?? '';
            }
        }
        $templateId = '';
        //如果有rule_id,那么就判断template_id是否大于0
        if (!empty($ruleId)) {
            $ruleInfo = app($this->flowFormTemplateRuleRepository)->getDetail($ruleId);
            $templateId = (isset($ruleInfo["template_id"]) && $ruleInfo["template_id"]) ? $ruleInfo["template_id"] : "";
        }
        if ($historyRunId || $getDataType == "flow_query") {
            // 根据 $formTemplateRuleInfo ，获取子表单详情，返回
            // 传 history / 流程查询-导出 的时候，是新建页面，应该用 run 规则
            $ruleId = isset($formTemplateRuleInfo["run"]) ? $formTemplateRuleInfo["run"] : "";
            if ($ruleId) {
                $ruleInfo = $this->getFlowFormTemplateRuleInfo(["rule_id" => $ruleId]);
                // 这里取structure返回
                $formControlStructure = $ruleInfo["structure"];
            } else {
                $formControlStructure = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(["search" => ["form_id" => [$formId]]]);
            }
        } else if ($formId && $parentId) {
            $formControlStructure = app($this->flowChildFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$formId]]]);
        } else if ($ruleId && $templateId >0 ) {
            $formControlStructure = app($this->flowChildFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$templateId]]]);
        } else {
            // 如果是历史表单
            if ($historyFormId) {
                $formControlStructure = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["history_form_id" => [$historyFormId]]]);
                if (!$formId) {
                    $historyFormInfo = app($this->flowFormEditionRepository)->getDetail($historyFormId, false, ['form_id']);
                    $formId = $historyFormInfo->form_id ?? 0;
                }
            // 缓存表单结构
            } else if (!Redis::exists('hand_page_form_control_structure_' . $formId)) {
                // 获取原生的表单控件结构
                $formControlStructure = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$formId]]]);
                Redis::set('hand_page_form_control_structure_' . $formId, serialize($formControlStructure));
            } else {
                $formControlStructure = unserialize(Redis::get('hand_page_form_control_structure_' . $formId));
            }
        }
        // 返回值接收函数
        $parseData = [];
        $parseFormStructure = [];
        if ($formControlStructure && count($formControlStructure)) {
             // 获取流程相关数据，用于宏控件取值,只有是
            $flowRunInfo = [];
            $flowRunInfo["run_id"] = $runId;
            $flowType = "";
            if ($flowId) {
                $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
                $flowType = $flowTypeInfo->flow_type;
                if (!$formId) {
                    $formId = $flowTypeInfo->form_id;
                }
                $flowRunInfo["flow_name"] = $flowTypeInfo->flow_name;
                $flowRunInfo["flow_id"] = $flowTypeInfo->flow_id;
                $flowRunInfo["form_name"] = '';
                $flowRunInfo["form_id"] = $flowTypeInfo->form_id;
                $flowRunInfo["user_name"] = $userInfo['user_name'] ?? '';
                $flowRunInfo["flow_type"] = $flowType;
                $flowRunInfo["flow_type_name"] = "";
                $flowRunInfo["flow_process"] = $nodeId;
                if ($flowTypeInfo->flow_sort) {
                    $flowsortInfo = app($this->flowSortRepository)->getDetail($flowTypeInfo->flow_sort ,false , ['title']);
                    $flowRunInfo["flow_type_name"] = $flowsortInfo->title;
                }
            }
            // 自由流程省去字段控制查询
            if ($flowType == 1) {
                $collectControlPurviewInfo = $this->getParseFormDataControlPurviewInfo($formControlStructure, $nodeId );
            } else {
                 $collectControlPurviewInfo = [];
            }
            // 重新组装表单结构数组
            $formControlStructure = app($this->flowParseService)->handleFlowFormStructure($formControlStructure);
            // 获取流程 $runId/$historyRunId 的数据库的值
            $flowRunDatabaseData = $this->getParseFormDataFlowRunDatabaseData($formControlStructure, $runId, $formId , '' , $userInfo);
            if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
            // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
                app($this->flowLogService)->addFlowDataLogs('get_flow_form_parse_data_'.date('Ymd').'.txt', "[".date("Y-m-d H:i:s",time())."]runId:".$runId."userId:".($userInfo['user_id']??'')."解析前数据库值\r\n".json_encode($flowRunDatabaseData)."\r\n");
            }
            if ($historyRunId) {
                $historyFormId = app($this->flowRunService)->getFormIdByRunId($historyRunId);
                $historyFlowRunDatabaseData = $this->getParseFormDataFlowRunDatabaseData($formControlStructure, $historyRunId, $historyFormId, $getDataType);
                if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
                // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
                    app($this->flowLogService)->addFlowDataLogs('get_flow_form_parse_data_'.date('Ymd').'.txt', "[".date("Y-m-d H:i:s",time())."]historyRunId:".$historyRunId."userId:".($userInfo['user_id']??'')."解析前数据库值\r\n".json_encode($historyFlowRunDatabaseData)."\r\n");
                }
            } else {
                $historyFlowRunDatabaseData = [];
            }
            // 合并
            $databaseData = ["flowRunData" => $flowRunDatabaseData, "historyFlowRunData" => $historyFlowRunDatabaseData];
            if ($formId) {
                if ($parentId) {
                    $flowFormInfo = app($this->flowChildFormTypeRepository)->getDetail($formId);
                } else {
                    $flowFormInfo = app($this->flowFormTypeRepository)->getDetail($formId);
                }
                $flowRunInfo["form_name"] = $flowFormInfo['form_name'];
            }
            if ($runId && $runObject = $data['flow_run_info'] ?? app($this->flowRunRepository)->getDetail($runId)) {
                $flowRunInfo["run_seq_strip_tags"] = $runObject->run_seq_strip_tags;
                $flowRunInfo["run_name"] = $runObject->run_name;
                $flowRunInfo["create_time"] = $runObject->create_time;
                $max_process_id = $runObject->max_process_id;
                $flowRunInfo["max_process_id"] = $max_process_id;
                $flowRunInfo["current_step"] = $runObject->current_step;
            }
            // 记录每个明细的初始行数
            $detailLayoutInitRowsArray = [];
            // 20200110,zyx,记录历史流程导入后的明细控件
            $detailLayoutHistoryRunControlArray = [];
            // 获取字段控制
            $collectControlPurviewInfo = [];
            if ((empty($flowType) || $flowType == '1') && !empty($nodeId)) {
                $collectControlPurviewInfo = $this->getParseFormDataControlPurviewInfo($formControlStructure, $nodeId, $formId);
            }
            $secondControlData = [];
            $flowTitleControl = [];
            foreach ($formControlStructure as $controlKey => $controlValue) {
                $controlId = $controlValue["control_id"];

                $parseFormStructure[$controlId]["control_id"] = $controlId;
                $parseFormStructure[$controlId]["control_title"] = $controlValue["control_title"];
                $parseFormStructure[$controlId]["control_type"] = $controlValue["control_type"];
                $controlParentId = $parseFormStructure[$controlId]["control_parent_id"] = $controlValue["control_parent_id"];
                // 如果是明细二级子项则将父级ID改为祖父级ID
                if (isset($controlValue["control_grandparent_id"]) && $controlValue["control_grandparent_id"]) {
                    $controlParentId = $controlValue["control_parent_id"] = $parseFormStructure[$controlId]["control_parent_id"] = $controlValue["control_grandparent_id"];
                }
                $controlPurview = $collectControlPurviewInfo[$controlId] ?? ["edit" => "", "empty" => "", "always" => "", "countersignVisible" => ""];
                $parseFormStructure[$controlId]["control_purview"] = $controlPurview;
                $parseFormStructure[$controlId]["control_attribute"] = $controlValue["control_attribute"];
                $controlType = $controlValue["control_type"] ?? "";
                $controlPrototype = $controlValue["control_prototype"] ?? "";
                // 20200831,zyx,电子签章控件，在表单模板设置时处理成不能编辑状态
                if (($controlType == 'electronic-signature') && !$formTemplateRuleInfo && ($status == 'new')) {
                    $parseFormStructure[$controlId]["control_purview"]['edit'] = $controlPurview['edit'] = '';
                }

                // 控件的最终值
                $controlData = "";
                // 取值类型
                $getControlDataType = "";
                $controlOriginalData = "";
                if ($controlValue["control_attribute"]) {
                    $controlAttribute = $controlValue["control_attribute"];
                    $controlAttribute = json_decode($controlAttribute, true);
                    $efbSource = $controlAttribute["data-efb-source"] ?? "";
                    $efbSourceValue = $controlAttribute["data-efb-source-value"] ?? "";

                    // 控件初始值
                    if ($this->isMacroControl($controlType, $efbSource)) {
                        if ($status == 'new'  && $efbSourceValue == 'flow_flowRunName' && !empty($flowTypeInfo->flow_name_rules)) {
                            $flowTitleControl[$controlId] = $controlParentId;
                            $controlOriginalData = '';
                        } else {
                            $controlOriginalData = $this->parseMacroSource(["sourceValue" => $efbSourceValue, "id" => $controlId], $userInfo, $flowRunInfo);
                        }
                    } else {
                        $controlOriginalData = $this->getParseFormDataControlDefaultValue($controlValue, $userInfo);
                    }

                    if ($controlType != "detail-layout") {
                        if ($status == "preview") {
                            if ($this->isMacroControl($controlType, $efbSource)) {
                                $getControlDataType = "dynamic";
                            } else {
                                $getControlDataType = "default";
                            }
                        } else if ($status == "new") {
                            // 带历史数据/子流程的新建
                            if ($historyRunId) {
                                // 这里取权限的时候，如果是_TEXT的，$controlId处理一下
                                if ($controlPrototype) {
                                    if (isset($collectControlPurviewInfo[$controlPrototype])) {
                                        $controlPurview = $collectControlPurviewInfo[$controlPrototype];
                                    }
                                } else {
                                    if (isset($collectControlPurviewInfo[$controlId])) {
                                        $controlPurview = $collectControlPurviewInfo[$controlId];
                                    }
                                }

                                if ($this->isMacroControl($controlType, $efbSource)) {
                                    if ($flowType == "1") {
                                        if (isset($controlPurview["empty"]) && $controlPurview["empty"]) {
                                            $getControlDataType = "macroControlGetDataBaseValue";
                                        } else if (isset($controlPurview["always"]) && $controlPurview["always"]) {
                                            // $getControlDataType = "dynamic";
                                            $getControlDataType = "macroControlGetDynamicValue";
                                        } else {
                                            $getControlDataType = $controlPurview["edit"] ? "macroControlGetDataBaseValue" : "getNoneValue"; // 宏控件没有设置获值方式改为不获取值，原值为database wz // 20201014,zyx,宏控件，有编辑权限时允许导入，没有编辑权限不能导入
                                        }
                                    } else {
                                        $getControlDataType = "macroControlGetDataBaseValue";
                                    }
                                } else if ($controlType == 'countersign') {
                                    // 会签控件不需要导入
                                    $getControlDataType = "getNoneValue";
                                } else {
                                    if ($flowType == "1") {
                                        if (isset($controlPurview["edit"]) && $controlPurview["edit"]) {
                                            $getControlDataType = "database";
                                        } else {
                                            if($controlType == 'column') {
                                                $getControlDataType = "database";
                                            }
                                            // 有[只读]属性的时候，用default的值，现在只有编辑器是这样的
                                            if (isset($controlAttribute["data-efb-readonly"]) && $controlAttribute["data-efb-readonly"] == "true") {
                                                $getControlDataType = "default";
                                            }
                                            if (($controlType == 'select') && (isset($controlPurview["edit"]) && ($controlPurview["edit"] == ''))) {
                                                $controlOriginalData = "getNoneValue";
                                            }

                                        }
                                        //20191209 wz如果是隐藏控件，则获取数据库
                                        if (isset($controlAttribute["data-efb-hide"]) && $controlAttribute["data-efb-hide"]) {
                                            $getControlDataType = "database";
                                        }
                                    } else {
                                        $getControlDataType = "database";
                                    }
                                }
                            } else {
                                // 正常新建
                                if ($this->isMacroControl($controlType, $efbSource)) {
                                    if ($flowType == "1") {
                                        if (isset($collectControlPurviewInfo[$controlId]) && $collectControlPurviewInfo[$controlId]) {
                                            $controlPurview = $collectControlPurviewInfo[$controlId];
                                            if ((isset($controlPurview["empty"]) && $controlPurview["empty"]) || (isset($controlPurview["always"]) && $controlPurview["always"])) {
                                                $getControlDataType = "dynamic";
                                            } else {
                                                // 没设置为空获值/始终获值的时候，将默认信息清空
                                                if (is_array($controlOriginalData)) {
                                                    $controlOriginalData = [];
                                                } else {
                                                    $controlOriginalData = "";
                                                }
                                            }
                                        }
                                    } else {
                                        $getControlDataType = "dynamic";
                                    }
                                } else {
                                    // 获取默认值
                                    $getControlDataType = "default";

                                    //20191129，zyx,下拉框均取消默认值
                                    //20191216,仅在没有编辑权限时取消下拉框默认值
                                    if (($controlType == 'select') && (isset($controlPurview["edit"]) && ($controlPurview["edit"] == ''))) {
                                        $controlOriginalData = "";
                                    }
                                }
                            }
                        } else if ($status == "handle") {
                            // 是宏控件
                            if ($this->isMacroControl($controlType, $efbSource)) {
                                if ($flowType == "1") {
                                    if (isset($collectControlPurviewInfo[$controlId]) && $collectControlPurviewInfo[$controlId]) {
                                        $controlPurview = $collectControlPurviewInfo[$controlId];
                                        if (isset($controlPurview["empty"]) && $controlPurview["empty"]) {// 为空获值
                                            $getControlDataType = "macroControlGetDataBaseValue";
                                        } else if (isset($controlPurview["always"]) && $controlPurview["always"]) { // 始终获值
                                            // $getControlDataType = "dynamic";
                                            $getControlDataType = "macroControlGetDynamicValue";
                                        } else { // 既不是为空获值也不是始终获值，都没选，则获取数据库的值
                                            $getControlDataType = "database";
                                        }
                                    }
                                } else {
                                    $getControlDataType = "macroControlGetDataBaseValue";
                                }
                            } else {
                                // $getControlDataType = "defaultControlGetDataBaseValue";
                                $getControlDataType = "database";
                                // 如果是select类型直接判断是否为空，为空则取默认值
                                if ($controlType == 'select'  && $flowType == "1" && $efbSource != 'commonData') {
                                    $getControlDataType = "defaultControlGetDataBaseValue";
                                }
                            }
                        } else if ($status == "view" || $status == "generalHandle") {
                            if ($status == 'generalHandle') {
                                // 是宏控件且设置的当前流程当前主办人姓名的需要特殊处理下
                                if ($this->isMacroControl($controlType, $efbSource)
                                    && !empty($collectControlPurviewInfo[$controlId])
                                    && !empty($controlAttribute['data-efb-source-value'])
                                    && ($controlAttribute['data-efb-source-value'] == 'flow_entrepreneurName')) {
                                    if ($flowType == "1") {
                                        $controlPurview = $collectControlPurviewInfo[$controlId];
                                        if (!empty($controlPurview["empty"])) {
                                            // 为空获值
                                            $getControlDataType = "macroControlGetDataBaseValue";
                                        } else if (!empty($controlPurview["always"])) {
                                            // 始终获值
                                            $getControlDataType = "macroControlGetDynamicValue";
                                        } else {
                                            // 既不是为空获值也不是始终获值，都没选，则获取数据库的值
                                            $getControlDataType = "database";
                                        }
                                    } else {
                                        $getControlDataType = "macroControlGetDataBaseValue";
                                    }
                                } else {
                                    $getControlDataType = "database";
                                }
                            } else {
                                $getControlDataType = "database";
                            }
                        }
                        $getControlDataParam = ["historyRunId" => $historyRunId, "controlValue" => $controlValue, "controlOriginalData" => $controlOriginalData, "controlPurview" => $controlPurview, "userInfo" => $userInfo, "freeProcessStep" => $freeProcessStep];
                        // 集中取值
                        switch ($getControlDataType) {
                            case "default":
                                // default -- 普通控件，默认值
                                $controlData = $controlOriginalData;
                                break;
                            case "dynamic":
                                // dynamic -- 动态获取宏控件值
                                $controlData = $controlOriginalData;
                                break;
                            case "database":
                                // database -- 普通控件，直接获取数据库的值，影响因素： $controlParentId,$historyRunId
                                $controlData = $this->getParseFormDataDatabaseValue($databaseData, $getControlDataParam);
                                break;
                            case "macroControlGetDataBaseValue":
                                // macroControlGetDataBaseValue -- 宏控件需要获取数据库的值。逻辑为：1、判断数据库中是否有此控件的值，有：赋值，没有：宏控件取值。
                                $controlData = $this->getParseFormDataMacroDatabaseValue($databaseData, $getControlDataParam);
                                break;
                            case "macroControlGetDynamicValue":
                                // 宏控件在始终获值的情况下，获值；逻辑为：1、宏控件取值；主要用来解决明细内，始终获值的问题。
                                $controlData = $this->getParseFormDataMacroDynamicValue($databaseData, $getControlDataParam);
                                break;
                            case "getNoneValue":
                                $controlData = '';
                                break;
                            case "defaultControlGetDataBaseValue":
                                // defaultControlGetDataBaseValue -- 有默认值的普通控件，需要获取数据库的值。逻辑为：1、判断数据库中是否有此控件的值，有：赋值，没有：取默认值。
                                $controlData = $this->getParseFormDataDefaultDatabaseValue($databaseData, $getControlDataParam);
                                break;
                            default: //隐藏控件且有默认值 此处$getControlDataType没有值 暂时处理为走dafault类型
                                $controlData = $controlOriginalData;
                                break;
                        }
                        if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
                        // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
                            app($this->flowLogService)->addFlowDataLogs('get_flow_form_parse_data_'.date('Ymd').'.txt', "[".date("Y-m-d H:i:s",time())."]runId:".$runId."userId:".($userInfo['user_id']??'')."\r\n控件：".$controlId."获值类型".json_encode($getControlDataType)."\r\n");
                        }
                    }
                    // 下拉框 附件 选择器需要对控件值和初始值做处理
                    if ($controlType == "checkbox" || $controlType == "upload" || $controlType == "data-selector") {
                        if (empty($controlData)) {
                            $controlData = [];
                        } else {
                            if (is_array($controlData)) {
                                if ($controlParentId) {
                                    // 二级明细子项
                                    $secondDetailField = explode('_', $controlParentId);
                                    if(count($secondDetailField) == 3){
                                        foreach ($controlData as $_key=> $_value) {
                                            foreach ($_value as $key => $value) {
                                                if (is_array($value)) {
                                                    $value = implode(',', $value);
                                                }
                                                $controlData[$_key][$key] = trim((string)$value, ",") ? explode(",", $value) : [];
                                            }
                                        }
                                    }else {
                                        foreach ($controlData as $key => $value) {
                                            if (is_array($value)) {
                                                $value = implode(',', $value);
                                            }
                                            $controlData[$key] = trim((string)$value, ",") ? explode(",", $value) : [];
                                        }
                                    }
                                }else {
                                    foreach ($controlData as $key => $value) {
                                        if (is_array($value)) {
                                            $value = implode(',', $value);
                                        }
                                        $controlData[$key] = trim((string)$value, ",") ? explode(",", $value) : [];
                                    }
                                }
                            } else {
                                $controlData = trim((string)$controlData, ",");
                                $controlData = $controlParentId ? [explode(",", $controlData)] : explode(",", $controlData);
                            }
                        }
                        if ($controlOriginalData && is_string($controlOriginalData)) {
                            $controlOriginalData = explode(",", trim($controlOriginalData, ","));
                        }
                    }

                    // 合并值
                    if ($controlParentId) {
                        if (!isset($parseData[$controlParentId])) {
                            $parseData[$controlParentId] = [];
                        }
                        // 二级明细子项
                        $secondDetailField = explode('_', $controlParentId);
                        if (count($secondDetailField) == 2) {
                            if ($historyRunId) {
                                $layoutId = $databaseData['historyFlowRunData'][$controlParentId]['id'] ?? [];
                            }else {
                                $layoutId = $databaseData['flowRunData'][$controlParentId]['id'] ?? [];
                            }
                            // 20200110,zyx,记录明细控件
                            $detailLayoutHistoryRunControlArray[] = $controlParentId;


                            if (is_array($controlData)) {
                                if (count($controlData)) {
                                    $tableColumnsInfo = [];
                                    for ($i = 0; $i < count($controlData); $i++) {
                                        if (isset($parseData[$controlParentId]) && isset($parseData[$controlParentId][$i])) {
                                            $parseData[$controlParentId][$i][$controlId] = $controlData[$i];
                                        } else {
                                            $tableColumnsInfo[$controlId] = $controlData[$i];
                                            if (isset($layoutId[$i])) {
                                                $tableColumnsInfo['id'] = $layoutId[$i];
                                            }
                                            $parseData[$controlParentId][$i] = $tableColumnsInfo;
                                        }
                                    }
                                } else {
                                    $parseData[$controlParentId][0][$controlId] = $controlData;
                                    if (isset($layoutId[0])) {
                                        $parseData[$controlParentId][0]['id'] = $layoutId[0];
                                    }
                                }
                            } else {
                                $parseData[$controlParentId][0][$controlId] = $controlData;
                                if (isset($layoutId[0])) {
                                    $parseData[$controlParentId][0]['id'] = $layoutId[0];
                                }
                            }
                        }else if(count($secondDetailField) == 3) {
                            $secondControlData[$controlId] = $controlData;
                            if (isset($layoutId[0])) {
                                $parseData[$controlParentId][0]['id'] = $layoutId[0];
                            }
                        }
                        // 明细布局，每一列的初始值
                        if (!isset($parseData[$controlParentId . "_original"])) {
                            $parseData[$controlParentId . "_original"] = [];
                        }
                        // 20191112,如果是宏控件，且没有定义获值方式，则初始值都定为空
                        // 20191213,预览模式不对初始值做处理
                        if ($this->isMacroControl($controlType, $efbSource) && ($status !== "preview")) {
                            if ((isset($controlPurview["empty"]) && $controlPurview["empty"]) || (isset($controlPurview["always"]) && $controlPurview["always"])) {// 为空获值或始终获值，给定初始值
                                $parseData[$controlParentId . "_original"][$controlId] = $controlOriginalData;
                            } else { // 既不是为空获值也不是始终获值，都没选，则不给定初始值
                                $parseData[$controlParentId . "_original"][$controlId] = '';
                            }
                        } else {// 非宏控件，走原来的逻辑，都给定初始值
                            $parseData[$controlParentId . "_original"][$controlId] = $controlOriginalData;
                        }
                    } else {
                        if ($controlType != "detail-layout") {
                            $parseData[$controlId] = $controlData;
                        } else {
                            if ($historyRunId) {
                                $flowRunDatabaseData = $databaseData['historyFlowRunData'] ?? [];
                            }else {
                                $flowRunDatabaseData = $databaseData['flowRunData'] ?? [];
                            }
                            // 获取明细的初始行数
                            $detailLayoutInitRowsArray[$controlId] = $controlAttribute['data-efb-init-rows'] ?? 1;
                            $layoutControlAmountData = "";
                            if (isset($flowRunDatabaseData[$controlId]) && $flowRunDatabaseData[$controlId]) {
                                $layoutControlData = $flowRunDatabaseData[$controlId];
                                $layoutControlAmountData = isset($layoutControlData["amount"]) ? $layoutControlData["amount"] : "";
                                if (!empty($layoutControlAmountData) && is_array($layoutControlAmountData)) {
                                    foreach ($layoutControlAmountData as $layoutControlAmountKey => $layoutControlAmountValue) {
                                        if (strpos($layoutControlAmountKey, 'DATA_') !== false) {
                                            $parseData[$layoutControlAmountKey . "_amount"] = $layoutControlAmountValue;
                                        }
                                    }
                                }
                            }
                            $parseData[$controlId . "_amount"] = $layoutControlAmountData;
                        }
                    }
                    // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
                    if(!isset($parseData[$controlId])) {
                        $logContent = '';
                    }else {
                        $logContent = $parseData[$controlId];
                    }
                    if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
                        app($this->flowLogService)->addFlowDataLogs('get_flow_form_parse_data_'.date('Ymd').'.txt', "[".date("Y-m-d H:i:s",time())."]runId:".$runId."userId:".($userInfo['user_id']??'')."\r\n解析后值".json_encode($logContent)."\r\n");
                    }
                }
            }
            if ($secondControlData) {
                foreach ($secondControlData as $childKey => $_childData) {
                    $parentId = explode('_', $childKey);
                    $parentControlId = $parentId[0]."_".$parentId[1]."_".$parentId[2];
                    $grandparentId = $parentId[0]."_".$parentId[1];
                    if(isset($parseData[$grandparentId]) && is_array($parseData[$grandparentId]) && !empty($parseData[$grandparentId])) {
                        foreach ($parseData[$grandparentId] as $key => $value) {
                            $parseData[$grandparentId][$key][$parentControlId] = [];
                            $id = isset($value['id']) && $value['id'] ? $value['id'] : $key+1;
                            $parseData[$grandparentId][$key][$parentControlId] = $this->getSecondData($secondControlData,$id,$parentControlId);
                        }
                        unset($parseData[$parentControlId]);
                    }
                }

            }
            // 如果是新建流程获取表单数据的，明细按照初始化行数获取对应行数的数据
            if ($status == "new" && !$historyRunId && !empty($detailLayoutInitRowsArray)) {
                foreach ($detailLayoutInitRowsArray as $initRowKey => $initRowValue) {
                    if (isset($parseData[$initRowKey][0])) {
                        for ($initRow=1; $initRow < $initRowValue; $initRow++) {
                            $parseData[$initRowKey][$initRow] = $parseData[$initRowKey][0];
                        }
                    }
                }
            }
            // 20200110,zyx,如果是导入历史流程，则明细控件中的某些控件可能只有一行数据，需要把该控件其他行用第一行的数据补上
            $detailLayoutHistoryRunControlArray = array_unique($detailLayoutHistoryRunControlArray);
            if ($status == "new" && $historyRunId && $detailLayoutHistoryRunControlArray) {
                // 遍历历史流程明细控件
                foreach ($detailLayoutHistoryRunControlArray as $hisRunRowValue) {
                    if (isset($parseData[$hisRunRowValue])) {
                        // 明细超过一行才有比较的意义
                        $rows = count($parseData[$hisRunRowValue]);
                        if (($rows > 1) && $parseData[$hisRunRowValue][0]) {
                            // 比较键名不同，找出后面的行缺少的控件
                            $detailControlRowFirst = array_keys($parseData[$hisRunRowValue][0]);
                            $detailControlRowSecond = array_keys($parseData[$hisRunRowValue][1]);
                            $diffArr = array_diff($detailControlRowFirst, $detailControlRowSecond);
                            foreach ($diffArr as $diffArrValue) {
                                // 遍历后面的明细行，塞进去缺少的控件
                                for ($i = 1;$i < $rows;$i++) {
                                    $parseData[$hisRunRowValue][$i][$diffArrValue] = $parseData[$hisRunRowValue][0][$diffArrValue];
                                }
                            }
                        }
                    }
                }
            }
            //针对还没有run_id的流程标题控件做赋值处理
            if ($status == 'new' &&  !empty($flowTitleControl) ) {
                foreach ($flowTitleControl as $flowTitleControlKey => $flowTitleControlValue) {
                    //如果设置了为空获值或始终获值，则需要获取值
                    if ( ($flowType == "1"  &&  isset($collectControlPurviewInfo[$flowTitleControlKey]) && $collectControlPurviewInfo[$flowTitleControlKey]) ||  $flowType == "2") {
                        $controlPurview = $collectControlPurviewInfo[$flowTitleControlKey] ??'';
                        if ( ((isset($controlPurview["empty"]) && $controlPurview["empty"]) || (isset($controlPurview["always"]) && $controlPurview["always"])) ||  $flowType == "2") {
                            $run_name_result = $this->getFlowRunName(json_decode($flowTypeInfo->flow_name_rules), ['form_data' => $parseData], $flowRunInfo);
                            if (isset($run_name_result['result_text']) && empty($flowTitleControlValue)) {
                                $parseData[$flowTitleControlKey] = $run_name_result['result_text'];
                            } else if (isset($run_name_result['result_text']) && !empty($flowTitleControlValue)) {
                                $count = explode('_', $flowTitleControlValue);
                                if(count($count) == 2) {//说明是明细子项
                                    foreach ($parseData[$flowTitleControlValue] as $key => &$value) {
                                        $value[$flowTitleControlKey] = $run_name_result['result_text'];
                                    }
                                }elseif(count($count) == 3) {//说明是二级明细子项
                                    $grandparentId = $count[0]."_". $count[1];
                                    foreach ($parseData[$grandparentId] as $key => $_value) {
                                        $parseData[$grandparentId][$key][$flowTitleControlValue][$flowTitleControlKey] = $run_name_result['result_text'];
                                    }
                                }
                                $parseData[$flowTitleControlValue."_original"][$flowTitleControlKey] = $run_name_result['result_text'];
                            }
                        }
                    }
                }
            }
            if ($status == "new" && $historyRunId && !empty($parseData)) {
                foreach ($parseData as $key_s => &$value_s) {
                    // 历史流程过滤id值
                    if(is_array($value_s)) {
                        foreach ($value_s as $k => $v) {
                            if(isset($value_s[$k]['id'])) {
                                unset($value_s[$k]['id']);
                            }
                        }
                    }
                }
            }
        }
        if (envOverload("FLOW_GET_DATA_TOGGLE") === 'true') {
        // 日志写入操作太耗时，暂时注释，按需单独开发，勿删勿删勿删
            app($this->flowLogService)->addFlowDataLogs('get_flow_form_parse_data_'.date('Ymd').'.txt', "[".date("Y-m-d H:i:s",time())."]runId:".$runId."userId:".($userInfo['user_id']??'')."\r\n最终值".json_encode($parseData)."\r\n");
        }
        return ["parseData" => $parseData, "parseFormStructure" => $parseFormStructure];
    }
    /**
     * 解析二级明细
     */
    public function getSecondData($secondControlData, $id, $parentControlId) {
        $resule = [];
        foreach ($secondControlData as $second_key => $value) {
            $parentId = explode('_', $second_key);
            $_parentControlId = $parentId[0]."_".$parentId[1]."_".$parentId[2];
            if ($_parentControlId == $parentControlId) {
                if ($id && $value && isset($value[$id]) && !empty($value[$id]) && is_array($value[$id])) {
                    foreach ($value[$id] as $_key => $_value) {
                        $resule[$_key][$second_key] = $_value;
                        $resule[$_key]['data_id'] = $id;
                    }
                }else {
                    // 默认行先不加
                    //$resule[0][$second_key] = '';
                }
            }
        }
        return $resule;
    }
    /**
     * 功能函数，判断一个控件是否是宏控件，是，返回 true ；不是，返回 false
     * @param  [type]  $data [description]
     * @return boolean       [description]
     */
    public function isMacroControl($controlType, $efbSource)
    {
        if (($controlType == "text" || $controlType == "textarea") && $efbSource == "currentData") {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 表单解析，功能函数，获取流程 $runId/$historyRunId 的数据库的值
     * @param  [type] $formControlStructure [description]
     * @param  [type] $runId                [description]
     * @param  [type] $formId               [description]
     * @param  [type] $getDataType          [取值的标识，如果是历史数据取值，传 historyDataFlag]
     * @return [type]                       [返回值的key，是parent控件id，value，是此明细字段的全部数据]
     */
    public function getParseFormDataFlowRunDatabaseData($formControlStructure, $runId, $formId, $getDataType = "" , $userInfo = [])
    {
        // 获取主表数据库的值，fields为空，获取全部字段
        $flowRunFormDataParams = ["run_id" => $runId, "form_id" => $formId, "fields" => []];
        $flowRunFormData = app($this->flowRunService)->getFlowRunFormData($flowRunFormDataParams);
        $flowRunFormData = count($flowRunFormData) ? $flowRunFormData[0] : [];
        // 解析会签字段的排序参数
        $countersignSortInfo = $this->getCountersignControlSortConfig($formControlStructure);
        // 取【非明细的】会签字段的值
        if (count($countersignSortInfo) && $getDataType != "historyDataFlag") {
            $countersignParam = [];
            $countersignParam["page"] = "0";
            $controlIds = array_column($countersignSortInfo , 'control_id');
			if (!empty($controlIds)) {
				$countersignParam['whereRaw'] = ['control_id in ('.implode(',' , $controlIds).')'];
			}
            $countersignParam["search"]["flow_countersign.run_id"] = [$runId];
            $countersigns = app($this->flowCountersignRepository)->getCountersign($countersignParam);
            $sortArray = [];
            foreach ($countersigns as $key => $value) {
                $roleName = '';
                if (!empty($value['countersign_user']['user_has_many_role'])) {
                    foreach ($value['countersign_user']['user_has_many_role'] as $roleInfo) {
                        if (!empty($roleInfo['has_one_role']['role_name'])) {
                            $roleName .= $roleInfo['has_one_role']['role_name'] . ',';
                        }
                    }
                    $value['countersign_user']['role_name'] = rtrim($roleName, ',');
                }
                $value['countersign_time_int'] = strtotime( $value['countersign_time']);
                if ( (isset($userInfo['user_id']) && $userInfo['user_id'] !=$value['countersign_user_id'] && $value['save_type'] == 1) || $value['save_type']==3 ) {
                    continue;
                }
                if (isset($sortArray[$value['control_id']])) {
                    array_push($sortArray[$value['control_id']], $value);
                } else {
                    $sortArray[$value['control_id']][] = $value;
                }
            }
              //开始排序
            foreach ($sortArray as $sortKey => &$sortValue) {
                if (count($sortValue) >1 && array_key_exists('DATA_'.$sortKey, $countersignSortInfo)) {
                    $countersignKey   = $countersignSortInfo['DATA_'.$sortKey]['sort'];
                    $countersignOrder = $countersignSortInfo['DATA_'.$sortKey]['order'];
                    if ($countersignKey == 'countersign_time') {
                        if ( $countersignOrder == 'asc') {
                            array_multisort(array_column($sortValue , 'countersign_time_int'), SORT_ASC, $sortValue);
                        } else {
                             array_multisort(array_column($sortValue , 'countersign_time_int'), SORT_DESC, $sortValue);
                        }
                    } else {
                        if ( $countersignOrder == 'asc') {
                            array_multisort(array_column($sortValue , $countersignKey), SORT_ASC, array_column($sortValue ,  'countersign_time_int') , SORT_DESC , $sortValue);
                        } else {
                              array_multisort(array_column($sortValue , $countersignKey), SORT_DESC, array_column($sortValue ,  'countersign_time_int') , SORT_DESC , $sortValue);
                        }
                    }
                }
                $sortValue = $this->flowCounterSignDataFilter($sortValue);
                if (isset($flowRunFormData['DATA_'.$sortKey])) {
                    $flowRunFormData['DATA_'.$sortKey] = $sortValue;
                }
            }
        }
        // 收集【明细布局内的】会签字段的值
        // 20180612-明细布局内，不支持会签控件
        $flowRunFormDataInfo = [];
        $layoutCountersignInfo = [];
        // 获取明细字段的值
        $flowRunFormData = $this->getParseFormDataLayoutControlData($formControlStructure, $runId, $formId, $flowRunFormData, $layoutCountersignInfo);
        return $flowRunFormData;
    }

    /**
     * 从表单控件数组里，解析会签控件并解析排序规则
     * @param  [type] $formControlStructure [description]
     * @return [type]                       [description]
     */
    public function getCountersignControlSortConfig($formControlStructure)
    {
        $countersignSortInfo = [];
        if (count($formControlStructure)) {
            foreach ($formControlStructure as $controlStructureKey => $controlStructureValue) {
                if ($controlStructureValue["control_type"] == "countersign") {
                    $controlAttribute = $controlStructureValue["control_attribute"];
                    $controlAttribute = json_decode($controlAttribute, true);
                    // 排序字段，可选: time-会签时间先后 node-审批节点先后 user-用户序号
                    $sortKey = isset($controlAttribute["data-efb-sort-by"]) ? $controlAttribute["data-efb-sort-by"] : "time";
                    if ($sortKey == "time") {
                        $sortKey = "countersign_time";
                    } else if ($sortKey == "node") {
                        $sortKey = "process_id";
                    } else if ($sortKey == "user") {
                        $sortKey = "list_number";
                    }
                    $sortOrder = isset($controlAttribute["data-efb-order-by"]) ? $controlAttribute["data-efb-order-by"] : "desc";
                    $sortItem = [
                        "sort" => $sortKey,
                        "order" => $sortOrder,
                    ];
                    if (isset($controlStructureValue["control_id"]) && $controlStructureValue["control_id"]) {
                        $countersignSortInfo[$controlStructureValue["control_id"]] = $sortItem;
                    }
                }
            }
        }
        return $countersignSortInfo;
    }

    /**
     * 功能函数，自定义排序
     * @param  [type] $arrays     [description]
     * @param  [type] $sort_key   [description]
     * @param  string $sort_order [description]
     * @param  [type] $sort_type  [description]
     * @return [type]             [description]
     */
    public function customSort($arrays, $sort_key, $sort_order = 'asc', $sort_type = SORT_NUMERIC)
    {
        if ($sort_order == "asc") {
            $sort_order = SORT_ASC;
        } else if ($sort_order == "desc") {
            $sort_order = SORT_DESC;
        }
        if (is_array($arrays)) {
            foreach ($arrays as $array) {
                if (is_array($array)) {
                    $key_arrays[] = $array[$sort_key];
                } else {
                    return false;
                }
            }
        } else {
            return false;
        }
        array_multisort($key_arrays, $sort_order, $sort_type, $arrays);
        return $arrays;
    }

    /**
     * 表单解析，功能函数，获取此表单内，所有明细字段的值
     * @param  [type] $formControlStructure [description]
     * @param  [type] $runId                [description]
     * @param  [type] $formId               [description]
     * @return [type]                       [返回值的key，是parent控件id，value，是此明细字段的全部数据]
     */
    public function getParseFormDataLayoutControlData($formControlStructure, $runId, $formId, $flowRunFormData, $layoutCountersignInfo)
    {
        if (!$formId || !$runId) {
            return ['code' => ['0x000003', 'common']];
        }
        $formControlIdArray = [];
        $layoutControlParentIdArray = [];
        if(is_object($formControlStructure)) {
            $formControlStructure = $formControlStructure->toArray();
        }
        foreach ($formControlStructure as $key => $value) {
            $formControlIdArray[] = $value['control_id'];
            if($value['control_type'] == 'detail-layout') {
                $layoutControlParentIdArray[] = $value['control_id'];
            }
        }
        $fields = array_merge(['id', 'data_id', 'run_id', 'amount', 'created_at', 'updated_at'], $formControlIdArray);
        // 明细字段的id数组
        $layoutControlParentIdArray = array_unique(array_filter($layoutControlParentIdArray));
        if (count($layoutControlParentIdArray)) {
            $secondLayoutTableColumnsFlag = [];
            foreach ($layoutControlParentIdArray as $layoutControlKey => $layoutControlValue) {
                $isSecondDetail = explode("_", $layoutControlValue);
                // 先获取一级明细数据，二级明细数据需要一级数据的id为依据
                if(count($isSecondDetail)== 2) {
                    $flowRunFormDataDetailLayoutParams = ["run_id" => $runId, "form_id" => $formId . str_replace("DATA", "", $layoutControlValue), "fields" => $fields];
                    $flowRunFormDetailLayoutData = app($this->flowRunService)->getFlowRunFormData($flowRunFormDataDetailLayoutParams);
                    $detailFieldValue = [];
                    if (count($flowRunFormDetailLayoutData)) {
                        // 加工 $flowRunFormDetailLayoutData
                        $flowRunFormDetailLayoutDataNew = [];
                        foreach ($flowRunFormDetailLayoutData as $key => $value) {
                            // 把会签字段控件的值拼接上去
                            if (count($value)) {
                                foreach ($value as $layoutItemControlId => $layoutItemControlValue) {
                                    if (isset($layoutCountersignInfo[$layoutItemControlId . "_" . $key])) {
                                        $value[$layoutItemControlId] = $layoutCountersignInfo[$layoutItemControlId . "_" . $key];
                                    }
                                }
                            }
                            if (isset($value["amount"]) && $value["amount"] == "amount") {
                                $detailFieldValue["amount"] = $value;
                            } else {
                                // 查找二级明细数据
                                foreach ($value as $_key => $_value) {
                                    if(in_array($_key, $layoutControlParentIdArray)) {
                                        $secondFlowRunFormDataDetailLayoutParams = ["run_id" => $runId, "form_id" => $formId . str_replace("DATA", "", $_key),"data_id"=>$value['id'], "fields" => $fields];
                                        $secondFlowRunFormDetailLayoutData = app($this->flowRunService)->getFlowRunFormData($secondFlowRunFormDataDetailLayoutParams);
                                        $secondDetailFieldValue = [];
                                        if (count($secondFlowRunFormDetailLayoutData)) {
                                            // 加工 $secondFlowRunFormDetailLayoutData
                                            $secondFlowRunFormDetailLayoutDataNew = [];
                                            foreach ($secondFlowRunFormDetailLayoutData as $childKey =>  $secondValue) {
                                                if (isset($secondValue["amount"]) && $secondValue["amount"] == "amount") {
                                                    $secondDetailFieldValue["amount"] = $secondValue;
                                                } else {
                                                    $secondFlowRunFormDetailLayoutDataNew[$childKey] = $secondValue;
                                                }
                                            }
                                            // 取表结构
                                            $secondLayoutTableName = "zzzz_flow_data_" . $formId . str_replace("DATA", "", $_key);
                                            if (!empty($secondLayoutTableColumnsFlag[$secondLayoutTableName])) {
                                                $secondLayoutTableColumns = $secondLayoutTableColumnsFlag[$secondLayoutTableName];
                                            } else {
                                                $secondLayoutTableColumns = Schema::getColumnListing($secondLayoutTableName);
                                                $secondLayoutTableColumnsFlag[$secondLayoutTableName] = $secondLayoutTableColumns;
                                            }
                                            foreach ($secondLayoutTableColumns as  $secondColumnsValue) {
                                                if (strpos($secondColumnsValue, $layoutControlValue) !== false || $secondColumnsValue == "data_id") {
                                                    $secondDetailFieldValue[$secondColumnsValue] = collect($secondFlowRunFormDetailLayoutDataNew)->pluck($secondColumnsValue)->toArray();
                                                }
                                            }
                                            $value[$_key] = $secondDetailFieldValue;
                                            if (isset($detailFieldValue['amount'])) {
                                                $value[$_key.'_amount'] = $detailFieldValue['amount'];
                                            }
                                        }
                                    }
                                }
                                $flowRunFormDetailLayoutDataNew[] = $value;
                            }
                        }

                        // 取表结构
                        $layoutTableName = "zzzz_flow_data_" . $formId . str_replace("DATA", "", $layoutControlValue);
                        if (!empty($secondLayoutTableColumnsFlag[$layoutTableName])) {
                            $secondLayoutTableColumns = $secondLayoutTableColumnsFlag[$layoutTableName];
                        } else {
                            $secondLayoutTableColumns = Schema::getColumnListing($layoutTableName);
                            $secondLayoutTableColumnsFlag[$layoutTableName] = $secondLayoutTableColumns;
                        }
                        foreach ($secondLayoutTableColumns as $columnsKey => $columnsValue) {
                            if (strpos($columnsValue, $layoutControlValue) !== false || $columnsValue == "id") {
                                $detailFieldValue[$columnsValue] = collect($flowRunFormDetailLayoutDataNew)->pluck($columnsValue)->toArray();
                            }
                        }
                    }
                    $flowRunFormData[$layoutControlValue] = $detailFieldValue;
                    if (isset($detailFieldValue['amount'])) {
                        $flowRunFormData[$layoutControlValue.'_amount'] = $detailFieldValue['amount'];
                    }
                }
            }
        }
        return $flowRunFormData;
    }

    /**
     * 普通控件，直接获取数据库的值，影响因素： $controlParentId,$historyRunId
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getParseFormDataDatabaseValue($databaseData, $param)
    {
        $freeProcessStep = $param["freeProcessStep"] ?? 0;
        $controlValue = $param["controlValue"];
        $userInfo = isset($param["userInfo"]) ? $param["userInfo"] : [];
        $userId = isset($userInfo["user_id"]) ? $userInfo["user_id"] : "";
        $controlPurview = isset($param["controlPurview"]) ? $param["controlPurview"] : [];
        $controlAttribute = $controlValue["control_attribute"];
        $controlAttribute = json_decode($controlAttribute, true);
        $controlId = $controlValue["control_id"];
        $controlParentId = $controlValue["control_parent_id"];
        $historyRunId = $param["historyRunId"];
        if ($historyRunId) {
            $databaseData = $databaseData["historyFlowRunData"];
        } else {
            $databaseData = $databaseData["flowRunData"];
        }
        // eachOtherNotVisible -- 互不可见，筛选数据
        $countersignVisible = isset($controlPurview["countersignVisible"]) ? $controlPurview["countersignVisible"] : [];
        $countersignVisibleNodeId = isset($countersignVisible["nodeId"]) ? $countersignVisible["nodeId"] : "";
        $countersignVisible = isset($countersignVisible["flag"]) ? $countersignVisible["flag"] : "";

        if ($controlParentId) {
            $currentControlData = "";
            // 二级明细子项
            $secondDetailField = explode('_', $controlParentId);
            if (count($secondDetailField) == 3) {
                $currentControlData = [];
                $parendData = $databaseData[$secondDetailField[0].'_'.$secondDetailField[1]][$controlParentId] ?? [];
                $newCurrentControlData = [];
                foreach ($parendData as $childData) {
                    if (isset($childData['data_id'])) {
                        foreach ($childData['data_id'] as $key => $_id) {
                            $newCurrentControlData[$_id][] = $childData[$controlId][$key];
                        }
                    }
                }
                $currentControlData = $newCurrentControlData;
            }else {
                if (isset($databaseData[$controlParentId])) {
                    $parentControlData = $databaseData[$controlParentId];
                    if (isset($parentControlData[$controlId])) {
                        $currentControlData = $parentControlData[$controlId];
                        // 判断是省市联动
                        if (isset($controlAttribute["data-efb-source"]) && $controlAttribute["data-efb-source"] == "commonData" && !isset($controlValue["control_prototype"])) {
                            if (is_array($currentControlData) && count($currentControlData)) {
                                foreach ($currentControlData as $currentControlDataKey => $currentControlDataValue) {
                                    $currentControlData[$currentControlDataKey] = $this->handleProviceCityDistrictData($currentControlDataValue, $controlAttribute);
                                }
                            }
                        }
                    }
                }
            }
            return $currentControlData;
        } else {
            $controlData = "";
            if (isset($databaseData[$controlId])) {
                $controlData = $databaseData[$controlId];
            }
            // 判断是省市联动
            if (isset($controlAttribute["data-efb-control"]) && $controlAttribute["data-efb-control"] == "select" && isset($controlAttribute["data-efb-source"]) && $controlAttribute["data-efb-source"] == "commonData" && !isset($controlValue["control_prototype"])) {
                $controlData = $this->handleProviceCityDistrictData($controlData, $controlAttribute);
            }
            // 控件类型是会签控件
            // 且 $countersignVisible == eachOtherNotVisible -- 互不可见，筛选数据
            // 且 $countersignVisibleNodeId == flow_process
            if (isset($controlAttribute["data-efb-control"]) && $controlAttribute["data-efb-control"] == "countersign" && $countersignVisible == "eachOtherNotVisible") {
                if ($controlData && count($controlData)) {
                    $countersignControlData = [];
                    foreach ($controlData as $key => $value) {
                        $flowProcess = isset($value["flow_process"]) ? $value["flow_process"] : "";

                        if ($countersignVisibleNodeId == $flowProcess) {
                            // 自由节点需要增加free_process_step的判断
                            $flowRunProcessInfo = app($this->flowRunProcessRepository)->getFieldInfo([],['free_process_step'], ['run_id' => [$value['run_id']], 'process_id' => [$value['process_id']], 'deleted_at'=>[null]]);
                            if ($flowRunProcessInfo && count($flowRunProcessInfo) == 1) {
                                $free_process_step = $flowRunProcessInfo[0]['free_process_step'];
                            }else {
                                $free_process_step = 0;
                            }
                            if ($userId == $value["countersign_user_id"]  && $free_process_step == $freeProcessStep) {
                                $countersignControlData[] = $value;
                            }
                        } else {
                            $countersignControlData[] = $value;
                        }
                    }
                    $controlData = $countersignControlData;
                }
            }
            return $controlData;
        }
    }

    /**
     * 普通控件，直接获取数据库的值，其中下拉框省市县的特殊处理下，调用这个函数统一处理
     * @param  [type] $controlData [description]
     * @param  [type] $controlAttribute [description]
     * @return [type]        [description]
     */
    public function handleProviceCityDistrictData($controlData, $controlAttribute)
    {
        if (is_string($controlData)) {
            $controlData = explode(",", $controlData);
        }
        if (isset($controlAttribute["data-efb-source-value"]) && $controlAttribute["data-efb-source-value"] == "proviceCityDistrict") {
            // 省市县
            $province = isset($controlData[0]) ? $controlData[0] : "";
            $city = isset($controlData[1]) ? $controlData[1] : "";
            $district = isset($controlData[2]) ? $controlData[2] : "";
            $controlData = ["province" => $province, "city" => $city, "district" => $district];
        } else if (isset($controlAttribute["data-efb-source-value"]) && $controlAttribute["data-efb-source-value"] == "proviceCity") {
            // 省市
            $province = isset($controlData[0]) ? $controlData[0] : "";
            $city = isset($controlData[1]) ? $controlData[1] : "";
            $controlData = ["province" => $province, "city" => $city];
        }
        return $controlData;
    }

    /**
     * 宏控件需要获取数据库的值。逻辑为：1、判断数据库中是否有此控件的值，有：赋值，没有：宏控件取值。
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getParseFormDataMacroDatabaseValue($databaseData, $param)
    {
        $controlValue = $param["controlValue"];
        $controlId = $controlValue["control_id"];
        $controlParentId = $controlValue["control_parent_id"];
        // $efbSourceValue     = $param["efbSourceValue"];
        // $userInfo           = $param["userInfo"];
        // $flowRunInfo        = $param["flowRunInfo"];
        $historyRunId = $param["historyRunId"];
        $controlOriginalData = $param["controlOriginalData"];
        if ($historyRunId) {
            $databaseData = $databaseData["historyFlowRunData"];
        } else {
            $databaseData = $databaseData["flowRunData"];
        }
        if ($controlParentId) {
            $currentControlData = [];
            // 二级明细子项
            $secondDetailField = explode('_', $controlParentId);
            if (count($secondDetailField) == 3) {
                $parendData = $databaseData[$secondDetailField[0].'_'.$secondDetailField[1]][$controlParentId] ?? [];
                $newCurrentControlData = [];
                foreach ($parendData as $childData) {
                    if (isset($childData['data_id'])) {
                        foreach ($childData['data_id'] as $key => $_id) {
                            $newCurrentControlData[$_id][] = ($childData[$controlId][$key]=== '' || $childData[$controlId][$key] === null) ? $controlOriginalData : $childData[$controlId][$key];
                        }
                    }
                }
                $currentControlData = $newCurrentControlData;
            }else {
                if (isset($databaseData[$controlParentId]) && $databaseData[$controlParentId]) {
                    $parentControlData = $databaseData[$controlParentId];
                    if (isset($parentControlData[$controlId]) && $parentControlData[$controlId]) {
                        $currentControlData = $parentControlData[$controlId];
                    }
                    if (count($currentControlData)) {
                        $needOtherWayGetControlDataArray = [];
                        foreach ($currentControlData as $dataKey => $dataValue) {
                            // 单独判断每一个子项，有：赋值，没有：宏控件取值
                            // 20200703,zyx,控件初始值是null，某些情况下为空获值会失败，增加null的判断条件
                            if (($dataValue === "") || ($dataValue === null)) {
                                $needOtherWayGetControlDataArray[$dataKey] = "";
                            }
                        }
                        if (count($needOtherWayGetControlDataArray)) {
                            // 有某些控件需要宏控件取值
                            $controlData = $controlOriginalData;
                            foreach ($needOtherWayGetControlDataArray as $getMacroDataKey => $getMacroDataValue) {
                                $currentControlData[$getMacroDataKey] = $controlData;
                            }
                        }
                    }
                }
            }

            return $currentControlData;
        } else {
            $controlData = "";
            if (isset($databaseData[$controlId]) && $databaseData[$controlId] !== "") {
                $controlData = $databaseData[$controlId];
            } else {
                $controlData = $controlOriginalData;
            }
            return $controlData;
        }
    }

    /**
     * 有默认值的普通控件，需要获取数据库的值。逻辑为：1、判断数据库中是否有此控件的值，有：赋值，没有：取默认值。
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getParseFormDataDefaultDatabaseValue($databaseData, $param)
    {
        $controlValue = $param["controlValue"];
        $controlId = $controlValue["control_id"];
        $controlParentId = $controlValue["control_parent_id"];
        // $efbSourceValue   = $param["efbSourceValue"];
        // $userInfo         = $param["userInfo"];
        $historyRunId = $param["historyRunId"];
        $controlOriginalData = $param["controlOriginalData"];
        if ($historyRunId) {
            $databaseData = $databaseData["historyFlowRunData"];
        } else {
            $databaseData = $databaseData["flowRunData"];
        }
        if ($controlParentId) {
            $currentControlData = [];
            $currentControlData = [];
            // 二级明细子项
            $secondDetailField = explode('_', $controlParentId);
            if (count($secondDetailField) == 3) {
                $parendData = $databaseData[$secondDetailField[0].'_'.$secondDetailField[1]][$controlParentId] ?? [];
                $newCurrentControlData = [];
                foreach ($parendData as $childData) {
                    if (isset($childData['data_id'])) {
                        foreach ($childData['data_id'] as $key => $_id) {
                            $newCurrentControlData[$_id][] = ($childData[$controlId][$key]=== '' || $childData[$controlId][$key] === null) ? $controlOriginalData : $childData[$controlId][$key];
                        }
                    }
                }
                $currentControlData = $newCurrentControlData;
            }else {
                if (isset($databaseData[$controlParentId]) && $databaseData[$controlParentId]) {
                    $parentControlData = $databaseData[$controlParentId];
                    if (isset($parentControlData[$controlId]) && $parentControlData[$controlId]) {
                        $currentControlData = $parentControlData[$controlId];
                    }
                    if (count($currentControlData)) {
                        $needOtherWayGetControlDataArray = [];
                        foreach ($currentControlData as $dataKey => $dataValue) {
                            // 单独判断每一个子项，有：赋值，没有：取默认值
                            if ($dataValue === ''|| $dataValue === null) {
                                $needOtherWayGetControlDataArray[$dataKey] = "";
                            }
                        }
                        if (count($needOtherWayGetControlDataArray)) {
                            // 有某些控件需要取默认值
                            $controlData = $controlOriginalData;
                            foreach ($needOtherWayGetControlDataArray as $getMacroDataKey => $getMacroDataValue) {
                                $currentControlData[$getMacroDataKey] = $controlData;
                            }
                        }
                    }
                }
            }

            return $currentControlData;
        } else {
            $controlData = "";
            if (isset($databaseData[$controlId]) && $databaseData[$controlId] !== '') {
                $controlData = $databaseData[$controlId];
            } else {
                $controlData = $controlOriginalData;
            }
            return $controlData;
        }
    }

    /**
     * 宏控件在始终获值的情况下，获值；逻辑为：1、宏控件取值；主要用来解决明细内，始终获值的问题。
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getParseFormDataMacroDynamicValue($databaseData, $param)
    {
        $controlValue = $param["controlValue"];
        $controlId = $controlValue["control_id"];
        $controlParentId = $controlValue["control_parent_id"];
        // $efbSourceValue   = $param["efbSourceValue"];
        // $userInfo         = $param["userInfo"];
        $historyRunId = $param["historyRunId"];
        $controlOriginalData = $param["controlOriginalData"];
        if ($historyRunId) {
            $databaseData = $databaseData["historyFlowRunData"];
        } else {
            $databaseData = $databaseData["flowRunData"];
        }
        if ($controlParentId) {
            $currentControlData = [];
            // 二级明细子项
            $secondDetailField = explode('_', $controlParentId);
            if (count($secondDetailField) == 3) {
                $parendData = $databaseData[$secondDetailField[0].'_'.$secondDetailField[1]][$controlParentId] ?? [];
                if ($parendData) {
                    $newCurrentControlData = [];
                    foreach ($parendData as $childData) {
                        if (isset($childData['data_id'])) {
                            foreach ($childData['data_id'] as $key => $_id) {
                                $newCurrentControlData[$_id][] = $controlOriginalData;
                            }
                        }
                    }
                    $currentControlData = $newCurrentControlData;
                }else {
                    $currentControlData[] = $controlOriginalData;
                }

            }else {
                if (isset($databaseData[$controlParentId]) && $databaseData[$controlParentId]) {
                    $parentControlData = $databaseData[$controlParentId];
                    if (isset($parentControlData[$controlId]) && $parentControlData[$controlId]) {
                        $currentControlData = $parentControlData[$controlId];
                    }
                    if (count($currentControlData)) {
                        foreach ($currentControlData as $dataKey => $dataValue) {
                            $currentControlData[$dataKey] = $controlOriginalData;
                        }
                    }
                } else if (isset($databaseData[$controlParentId]) &&  empty($databaseData[$controlParentId])){
                    //如果此时为空数据，则直接返回,  此处注释，不然默认会生成一行新的数据wz20200915
                    $currentControlData[] = $controlOriginalData;
                }
            }


            return $currentControlData;
        } else {
            return $controlOriginalData;
        }
    }

    /**
     * 表单解析，功能函数，获取当前表单内，所有控件的，编辑、为空获值、始终获值权限。
     * @param  [type] $formControlStructure [description]
     * @param  [type] $nodeId               [description]
     * @return [type]
     * 返回值示例：[DATA_19_1] => Array (
     * [edit] => 1
     * [empty] =>
     * [always] =>
     * [countersignVisible] =>
     * );
     * 1表示有权限，空表示没权限
     */
    public function getParseFormDataControlPurviewInfo($formControlStructure, $nodeId, $formId = 0)
    {
        $collectControlPurviewInfo = [];
        if ($nodeId) {
            $controlIdArray = array_filter(collect($formControlStructure)->pluck("control_id")->toArray());
            $nodeInfo = $this->getFlowNodeInfo($nodeId, $formId, ['control_operation']);
            $controlOperation = (isset($nodeInfo["controlOperation"]) && $nodeInfo["controlOperation"]) ? $nodeInfo["controlOperation"] : [];
            if (count($controlIdArray)) {
                foreach ($controlIdArray as $controlIdKey => $controlIdValue) {
                    $controlOperationItem = isset($controlOperation[$controlIdValue]) ? $controlOperation[$controlIdValue] : [];
                    $edit = in_array("edit", $controlOperationItem) || in_array("attachmentUpload", $controlOperationItem) ? true : "";
                    $empty = in_array("isempty", $controlOperationItem) ? true : "";
                    $always = in_array("always", $controlOperationItem) ? true : "";
                    $notUpdate = in_array("notUpdate", $controlOperationItem) ? true : "";
                    // 会签控件，互相可见(eachOtherVisible)/互相不可见(eachOtherNotVisible)
                    $countersignVisible = "";
                    if (in_array("eachOtherVisible", $controlOperationItem)) {
                        $countersignVisible = "eachOtherVisible";
                    } else if (in_array("eachOtherNotVisible", $controlOperationItem)) {
                        $countersignVisible = "eachOtherNotVisible";
                    }
                    $collectControlPurviewInfo[$controlIdValue] = [
                        "edit" => $edit,
                        "empty" => $empty,
                        "always" => $always,
                        "notUpdate" => $notUpdate,
                        "countersignVisible" => ["flag" => $countersignVisible, "nodeId" => $nodeId],
                    ];
                }
            }
        }
        return $collectControlPurviewInfo;
    }

    /**
     * 获取控件的默认值，处理默认值逻辑
     * @return [type] [description]
     */
    public function getParseFormDataControlDefaultValue($controlValue, $userInfo)
    {
        $controlDefaultValue = "";
        // 控件属性
        $controlType = $controlValue["control_type"] ?? "";
        $controlAttribute = $controlValue["control_attribute"];
        $controlAttribute = json_decode($controlAttribute, true);
        switch ($controlType) {
            case "text":
                $dataEfbFormat = isset($controlAttribute["data-efb-format"]) ? $controlAttribute["data-efb-format"] : "text";
                if ($dataEfbFormat == "date" || $dataEfbFormat == "datetime" || $dataEfbFormat == "time") {
                    if (isset($controlAttribute["data-efb-is-current"]) && $controlAttribute["data-efb-is-current"]) {
                        switch ($dataEfbFormat) {
                            //当前日期
                            case "date":
                                $controlDefaultValue = date('Y-m-d');
                                break;
                            //当前时间
                            case "time":
                                $controlDefaultValue = date('H:i');
                                break;
                            //当前日期时间
                            case "datetime":
                                $controlDefaultValue = date('Y-m-d H:i');
                                break;
                        }
                    }
                } else if ($dataEfbFormat == "text" || $dataEfbFormat == "number" || $dataEfbFormat == "bankCardNumber" || $dataEfbFormat == "idCard" || $dataEfbFormat == "custom") {
                    if (isset($controlAttribute["data-efb-default"])) {
                        $controlDefaultValue = $controlAttribute["data-efb-default"];
                    }
                }
                break;
            case "radio":
            case "checkbox":
            case "select":
                $dataEfbSource = isset($controlAttribute["data-efb-source"]) ? $controlAttribute["data-efb-source"] : "";
                $dataEfbSourceValue = isset($controlAttribute["data-efb-source-value"]) ? $controlAttribute["data-efb-source-value"] : "";
                if ($dataEfbSource == "combobox") {
                    if ($dataEfbSourceValue) {
                        $getComboboxParams = ["search" => ["is_default" => ["1"]]];
                        $comboboxInfo = app($this->systemComboboxService)->getAllFields($dataEfbSourceValue, $getComboboxParams);
                        if (isset($comboboxInfo["total"]) && $comboboxInfo["total"] == "1") {
                            $comboboxInfoList = isset($comboboxInfo["list"]) ? $comboboxInfo["list"] : [];
                            if (!empty($comboboxInfoList)) {
                                $comboboxInfoListFirst = $comboboxInfoList[0];
                                $controlDefaultValue = isset($comboboxInfoListFirst["field_value"]) ? $comboboxInfoListFirst["field_value"] : "";
                            }
                        }
                    }
                } else {
                    if (isset($controlAttribute["data-efb-selected-options"])) {
                        // $dataEfbSelectedOptions = $controlAttribute["data-efb-selected-options"];
                        // $controlDefaultValue = explode(",",trim($dataEfbSelectedOptions,","));
                        $controlDefaultValue = $controlAttribute["data-efb-selected-options"];
                    }
                }
                break;
            case "editor":
            case "textarea":
                if (isset($controlAttribute["data-efb-default"])) {
                    $controlDefaultValue = $controlAttribute["data-efb-default"];
                }
                break;
            case "data-selector":case "data-selector-text":
                if (isset($controlAttribute["data-efb-data-selector-category"])) {
                    if ($controlAttribute["data-efb-data-selector-category"] == "common") {
                        if (isset($controlAttribute["data-efb-data-selector-default"]) && $controlAttribute["data-efb-data-selector-default"]) {
                            if ($controlAttribute["data-efb-data-selector-default"] === true || $controlAttribute["data-efb-data-selector-default"] == "true" || $controlAttribute["data-efb-data-selector-default"] == "1") {
                                if (isset($controlAttribute["data-efb-data-selector-default-value"]) && $controlAttribute["data-efb-data-selector-default-value"]) {
                                    $controlDefaultValue = $controlAttribute["data-efb-data-selector-default-value"];
                                    // $controlDefaultValue = json_decode($controlAttribute["data-efb-data-selector-default-value"]);
                                } else {
                                    $dataEfbDataSelectorType = isset($controlAttribute["data-efb-data-selector-type"]) ? $controlAttribute["data-efb-data-selector-type"] : "";
                                    if ($dataEfbDataSelectorType == "user") {
                                        // 当前用户
                                        if ($controlType == 'data-selector-text') {
                                            $controlDefaultValue = isset($userInfo["user_name"]) ? $userInfo["user_name"] : "";
                                        } else {
                                            $controlDefaultValue = isset($userInfo["user_id"]) ? $userInfo["user_id"] : "";
                                        }
                                    } else if ($dataEfbDataSelectorType == "dept") {
                                        // 当前部门
                                        if ($controlType == 'data-selector-text') {
                                            $controlDefaultValue = isset($userInfo["dept_name"]) ? $userInfo["dept_name"] : "";
                                        } else {
                                            $controlDefaultValue = isset($userInfo["dept_id"]) ? $userInfo["dept_id"] : "";
                                        }
                                    } else if ($dataEfbDataSelectorType == "role") {
                                        // 当前角色
                                        if ($controlType == 'data-selector-text') {
                                            if (isset($userInfo["role_name"])) {
                                                if (is_array($userInfo["role_name"])) {
                                                    $controlDefaultValue = implode(',', $userInfo["role_name"]);
                                                } else {
                                                    $controlDefaultValue = $userInfo["role_name"];
                                                }
                                            }
                                        } else {
                                            $controlDefaultValue = isset($userInfo["role_id"]) ? $userInfo["role_id"] : "";
                                        }
                                    }
                                    if (is_array($controlDefaultValue)) {
                                        $controlDefaultValue = implode(",", $controlDefaultValue);
                                    }
                                }
                            } else {
                                if (isset($controlAttribute["data-efb-data-selector-default-value"]) && $controlAttribute["data-efb-data-selector-default-value"]) {
                                    $controlDefaultValue = $controlAttribute["data-efb-data-selector-default-value"];
                                }
                            }
                        } else {
                            if (isset($controlAttribute["data-efb-data-selector-default-value"]) && $controlAttribute["data-efb-data-selector-default-value"]) {
                                $controlDefaultValue = $controlAttribute["data-efb-data-selector-default-value"];
                                // $controlDefaultValue = json_decode($controlAttribute["data-efb-data-selector-default-value"]);
                            }
                        }
                    } else {
                        if (isset($controlAttribute["data-efb-data-selector-default-value"]) && $controlAttribute["data-efb-data-selector-default-value"]) {
                            $controlDefaultValue = $controlAttribute["data-efb-data-selector-default-value"];
                            // $controlDefaultValue = json_decode($controlAttribute["data-efb-data-selector-default-value"]);
                        }
                    }
                }
                break;
            default:
                break;
        }
        return $controlDefaultValue;
    }

    /**
     * 功能函数，解析宏控件数据源
     * @param  {string} sourceType  数据源类型
     * @param  {string} sourceValue 数据源属性
     * @param  {string} id          控件ID
     * @return {string}             返回值是string
     */
    public function parseMacroSource($param, $userInfo, $flowRunInfo)
    {

        if (empty($userInfo)) {
            return '';
        }
        $originalSourceValue = isset($param["sourceValue"]) ? $param["sourceValue"] : "";
        $id = isset($param["id"]) ? $param["id"] : "";
        if (!$originalSourceValue) {
            return '';
        }
        $modelValue = "";
        $sourceValueSplit = explode("_", $originalSourceValue);
        if (count($sourceValueSplit) == 2) {
            $sourceType = $sourceValueSplit[0];
            $sourceValue = $sourceValueSplit[1];
            switch ($sourceType) {
                case 'datetime':
                    switch ($sourceValue) {
                        //当前日期
                        case "date":
                            $modelValue = date('Y-m-d');
                            break;
                        //当前时间
                        case "time":
                            $modelValue = date('H:i');
                            break;
                        //当前日期时间
                        case "dateTime":
                            $modelValue = date('Y-m-d H:i');
                            break;
                    }
                    break;
                case 'user':
                    switch ($sourceValue) {
                        //当前用户ID
                        case "userId":
                            $modelValue = isset($userInfo["user_id"]) ? $userInfo["user_id"] : "";
                            break;
                        //当前用户姓名
                        case "userName":
                            $modelValue = isset($userInfo["user_name"]) ? $userInfo["user_name"] : "";
                            break;
                        //当前用户账号
                        case "userAccount":
                            $modelValue = isset($userInfo["user_accounts"]) ? $userInfo["user_accounts"] : "";
                            break;
                        //当前用户角色
                        case "userRole":
                            $modelValue = isset($userInfo["role_name"]) ? $userInfo["role_name"] : "";
                            if (is_array($modelValue)) {
                                $modelValue = implode(",", $modelValue);
                            }
                            break;
                        //当前用户角色id
                        case "userRoleId":
                            $modelValue = isset($userInfo["role_id"]) ? $userInfo["role_id"] : "";
                            if (is_array($modelValue)) {
                                $modelValue = implode(",", $modelValue);
                            }
                            break;
                        //当前用户角色权限级别
                        case "userRoleLeavel":
                            $modelValue = app($this->userService)->getUserRoleLeavel($userInfo["user_id"]);
                            $modelValue = implode(",", $modelValue["role_leavel"]);
                            break;
                        //当前用户部门完整路径
                        case "userDeptFull":
                            $modelValue = app($this->userService)->getUserDeptPath($userInfo["user_id"]);
                            break;
                        //当前用户部门名称
                        case "userDeptName":
                            $modelValue = isset($userInfo["dept_name"]) ? $userInfo["dept_name"] : "";
                            break;
                        //当前用户根部门名称
                        case "userRootDeptName":
                            $userDeptId = isset($userInfo["dept_id"]) ? $userInfo["dept_id"] : "";
                            $rootDeptInfo = app($this->departmentService)->getRootDeptInfoByDeptId($userDeptId);
                            $modelValue = '';
                            if (isset($rootDeptInfo['dept_name'])) {
                                $modelValue = $rootDeptInfo['dept_name'];
                            }
                            break;
                        //当前用户部门id
                        case "userDeptId":
                            $modelValue = isset($userInfo["dept_id"]) ? $userInfo["dept_id"] : "";
                            break;
                        //当前部门负责人
                        case "deptDirector":
                            $modelValue = app($this->userService)->getUserOwnDeptDirector($userInfo["user_id"]);
                            $modelValue = collect($modelValue)->pluck("user_name")->toArray();
                            $modelValue = implode(",", array_filter($modelValue));
                            break;
                        //上级部门负责人
                        case "superiorDeptDirector":
                            $modelValue = app($this->userService)->getUserSuperiorDeptDirector($userInfo["user_id"]);
                            $modelValue = collect($modelValue)->pluck("user_name")->toArray();
                            $modelValue = implode(",", array_filter($modelValue));
                            break;
                        //当前用户上级
                        case "userSuperior":
                            $modelValue = app($this->userService)->getSuperiorArrayByUserId($userInfo["user_id"], ['include_leave' => false]);
                            $modelValue = isset($modelValue["name"]) ? $modelValue["name"] : [];
                            // $modelValue = isset($userInfo["superior"]) ? $userInfo["superior"] : "";
                            // $info = array_column($userInfo["userHasManySuperior"]->toArray(), "superior_has_one_user");
                            // $modelValue = collect($info)->pluck("user_name")->toArray();
                            $modelValue = implode(",", array_filter($modelValue));
                            break;
                        //当前用户下级
                        case "userSubordinate":
                            $modelValue = app($this->userService)->getSubordinateArrayByUserId($userInfo["user_id"], ["returntype" => "id_name", 'include_leave' => false]);
                            $modelValue = isset($modelValue["name"]) ? $modelValue["name"] : [];
                            // $modelValue = isset($userInfo["subordinate"]) ? $userInfo["subordinate"] : "";
                            // $info = array_column($userInfo["userHasManySubordinate"]->toArray(), "subordinate_has_one_user");
                            // $modelValue = collect($info)->pluck("user_name")->toArray();
                            $modelValue = implode(",", array_filter($modelValue));
                            break;
                        //当前用户工号
                        case "userJobNumber":
                            $modelValue = isset($userInfo["user_job_number"]) ? $userInfo["user_job_number"] : "";
                            break;
                        //当前用户职位
                        case "userPosition":
                            $modelValue = isset($userInfo["user_position_name"]) ? $userInfo["user_position_name"] : "";
                            break;
                        //当前用户区域
                        case "userArea":
                            $modelValue = isset($userInfo["user_area_name"]) ? $userInfo["user_area_name"] : "";
                            break;
                        //当前用户城市
                        case "userCity":
                            $modelValue = isset($userInfo["user_city_name"]) ? $userInfo["user_city_name"] : "";
                            break;
                        //当前用户职场
                        case "userWorkplace":
                            $modelValue = isset($userInfo["user_workplace_name"]) ? $userInfo["user_workplace_name"] : "";
                            break;
                        //当前用户岗位类别
                        case "userJobCategory":
                            $modelValue = isset($userInfo["user_job_category_name"]) ? $userInfo["user_job_category_name"] : "";
                            break;
                        //当前用户部门的上级部门
                        case "userDepartmentSuperiorDepartment":
                            $userDepartmentId = isset($userInfo["dept_id"]) ? $userInfo["dept_id"] : "";
                            if ($userDepartmentId) {
                                $userDepartmentInfo = app($this->departmentService)->getDeptDetail($userDepartmentId);
                                $parentId = isset($userDepartmentInfo["parent_id"]) ? $userDepartmentInfo["parent_id"] : "";
                                if ($parentId) {
                                    $userParentDepartmentInfo = app($this->departmentService)->getDeptDetail($parentId);
                                    $modelValue = isset($userParentDepartmentInfo["dept_name"]) ? $userParentDepartmentInfo["dept_name"] : "";
                                }
                            }
                            break;
                        //当前用户手机号码
                        case "userPhoneNumber":
                            $modelValue = isset($userInfo['phone_number']) ? $userInfo['phone_number'] : '';
                            break;
                    }
                    break;
                case 'flow':
                    // 当前流程相关
                    switch ($sourceValue) {
                        // 当前主办人姓名
                        case "entrepreneurName":
                            if (!$flowRunInfo["run_id"]) {
                                $modelValue = isset($userInfo["user_name"]) ? $userInfo["user_name"] : "";
                            } else {
                                $modelValue = '';
                                if (!empty($flowRunInfo['max_process_id'])) {
                                    $processTransactType = 0;
                                    if (!empty($flowRunInfo['flow_type']) && $flowRunInfo['flow_type'] == '1' && !empty($flowRunInfo['flow_process'])) {
                                        $flowProcessInfo = app($this->flowProcessRepository)->getDetail($flowRunInfo['flow_process'], false, ['process_transact_type']);
                                        $processTransactType = $flowProcessInfo->process_transact_type ?? 0;
                                    } else if (!empty($flowRunInfo['flow_type']) && $flowRunInfo['flow_type'] == '2') {
                                        $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowRunInfo['flow_id'], false, ['handle_way']);
                                        $processTransactType = $flowTypeInfo->handle_way ?? 0;
                                    }
                                    $flowRunProcessParams = ["search" => ["run_id" => [$flowRunInfo['run_id']], "host_flag" => ["1"], "process_id" => [$flowRunInfo['max_process_id']]]];
                                    if (app($this->flowRunProcessRepository)->getFlowRunProcessList(array_merge($flowRunProcessParams, ['returntype' => 'count']))) {
                                        $flowRunProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(array_merge($flowRunProcessParams, ['returntype' => 'first']))->toArray();
                                        $modelValue = $flowRunProcessInfo["flow_run_process_has_one_user"]["user_name"] ?? '';
                                    } else if ($processTransactType == '3') {
                                        if (app($this->flowRunProcessRepository)->getFlowRunProcessList(["search" => ["run_id" => [$flowRunInfo['run_id']], "user_id" => [$userInfo['user_id']], "process_id" => [$flowRunInfo['max_process_id']]], 'returntype' => 'count'])) {
                                            $modelValue = isset($userInfo["user_name"]) ? $userInfo["user_name"] : "";
                                        }
                                    }
                                }
                            }
                            break;
                        // 表单名称
                        case "formName":
                            $modelValue = isset($flowRunInfo["form_name"]) ? $flowRunInfo["form_name"] : "";
                            break;
                        // 流程标题
                        case "flowRunName":
                            $modelValue = isset($flowRunInfo["run_name"]) ? $flowRunInfo["run_name"] : "";
                            break;
                        // 流水号
                        case "serialNumber":
                            $modelValue = isset($flowRunInfo["run_seq_strip_tags"]) ? $flowRunInfo["run_seq_strip_tags"] : "";
                            break;
                        // 流程开始时间
                        case "flowStartTime":
                            $modelValue = isset($flowRunInfo["create_time"]) ? $flowRunInfo["create_time"] : "";
                            if (!$flowRunInfo["run_id"]) {
                                $modelValue = date('Y-m-d H:i:s');
                            }
                            break;
                        // 最新步骤节点ID
                        case "latestStepNodeId":
                            if (isset($flowRunInfo['current_step'])) {
                                $modelValue = $flowRunInfo['current_step'];
                            } else if (!isset($flowRunInfo['current_step']) && !empty($flowRunInfo['flow_process'])) {
                                $flowProcessInfo = app($this->flowProcessRepository)->getDetail($flowRunInfo['flow_process'], false, ['node_id']);
                                $modelValue = $flowProcessInfo['node_id'] ?? '';
                            }
                            break;
                        // 最新步骤节点序号
                        case "latestStepNodeSort":
                            if (!empty($flowRunInfo['flow_type']) && $flowRunInfo['flow_type'] == '1' && !empty($flowRunInfo['flow_process'])) {
                                $flowProcessInfo = app($this->flowProcessRepository)->getDetail($flowRunInfo['flow_process'], false, ['sort']);
                                if ($flowProcessInfo) {
                                    $flowProcessInfo = $flowProcessInfo->toArray();
                                    $modelValue = $flowProcessInfo['sort'] ?? '';
                                }
                            }
                            break;
                    }
                    break;
            }
        }
        // echo $id."---".$modelValue."<hr>";
        return $modelValue;
    }

    /**
     * 【流程运行】 【流程数据】 文档模块，获取流程信息，展示归档后的流程
     *
     * @method getFlowRunningInfo
     *
     * @param  [type]             $data [description]
     *
     * @return [type]                   [description]
     */
    public function getFilingDocumentFlowInfo($documentId, $loginUserInfo)
    {
        $documentInfo = app($this->documentService)->showDocument($documentId, $loginUserInfo, 'nolog');
        if (isset($documentInfo['code'])) {
            return $documentInfo;
        }

        $documentInfo = app($this->documentContentRepository)->getDocumentInfo($documentId, ['source_id']);

        if (empty($documentInfo)) {
            return ['code' => ['0x041033', 'document']];
        }

        if (empty($documentInfo->source_id)) {
            return ['code' => ['0x000006', 'common']];
        }
        $runId = $documentInfo->source_id;
        $resultInfo = [];
        $currentUser = $loginUserInfo["user_id"] ?? "";
        // 为了判断归档模板，这里要求必填 userId ，20171227
        if (!$currentUser) {
            return $resultInfo;
        }
        if ($runObject = app($this->flowRunRepository)->getDetail($runId, "withTrashed")) {
            $flowId = $runObject->flow_id;
            $maxProcessId = $runObject->max_process_id;
            $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
            $flowType = $flowTypeInfo ? $flowTypeInfo->flow_type : "";
            $resultInfo["flow_type"] = $flowType;
            $formId = app($this->flowRunService)->getFormIdByRunId($runId, true);
            $resultInfo["flow_id"] = $flowId;
            $resultInfo["form_id"] = $formId;
            // 解析归档模板--20180130-讨论后，不加admin特殊权限
            // 归档规则 传 $templateType(filing),flowId
            $templateType = "filing";
            $parseParam = ["templateType" => $templateType, "flowId" => $flowId, "userId" => $currentUser];
            $ruleIdFiling = $this->verifyFlowFormTemplateRule($parseParam);
            $resultInfo["formTemplateRuleInfo"] = ["filing" => $ruleIdFiling];
            // 获取node_operation
            $controlOperation = [];
            $formControlStructure = $this->getParseForm($formId, []);
            if (!empty($formControlStructure)) {
                foreach ($formControlStructure as $key => $value) {
                    $controlId = isset($value["control_id"]) ? $value["control_id"] : "";
                    $controlType = isset($value["control_type"]) ? $value["control_type"] : "";
                    if ($controlType == "upload") {
                        $controlOperation[$controlId] = ["attachmentView", "attachmentDownload"];
                    }
                }
            }
            $resultInfo["node_operation"] = $controlOperation;
        } else {
            return ['code' => ['0x000006', 'common']];
        }
        return $resultInfo;
    }

    /**
     * 【流程运行】 转发实现
     *
     * @method flowTurning
     *
     * @return [type]      [description]
     */
    public function flowRunForwardRealize($runId, $data)
    {
        $data["run_id"] = $runId;
        // 必填
        $forwardUser = $data["forward_user"];
        $currentUserId = $data["user_id"];
        $flowProcess = $data["flow_process"];
        $processId = $data["process_id"];
        $processType = $data["process_type"] ?? 'common';
        $runObject = app($this->flowRunRepository)->getDetail($runId);
        if (empty($runObject)) {
            return ['code' => ['0x000006', 'common']];
        }

        $flowId = $runObject->flow_id ?? 0;
        $currentStep = $runObject->current_step ?? 0;
        // 判断是否有办理或查看权限（如果是已结束的流程，判断查看权限）
        $verifyPermissionParams = [
            'type' => 'handle',
            'run_id' => $runId,
            'user_id' => $currentUserId,
        ];
        if (empty($currentStep)) {
            $verifyPermissionParams['type'] = 'view';
        }
        if (!app($this->flowPermissionService)->verifyFlowHandleViewPermission($verifyPermissionParams)) {
            return ['code' => ['0x000006', 'common']];
        }
        // 判断是否有转发权限
        $verifyFrowardParams = [
            'run_id' => $runId,
            'user_id' => $currentUserId,
            'process_id' => $processId,
        ];
        $verifyForwardPermission = app($this->flowPermissionService)->verifyFlowRunDispensePermission($verifyFrowardParams, 'process_forward');
        //dd($verifyForwardPermission);
        if (isset($verifyForwardPermission['code'])) {
            return $verifyForwardPermission;
        }
		$flowRunProcessId = 0;
		$flowSerial = 1;
		$branchSerial = 0;
		$processSerial = 0;
		$search["search"] = ["run_id" => [$runId], "flow_process" =>[$flowProcess],"process_id" =>[$processId]];
        $search["order_by"] = ["flow_run_process_id" => "desc"];
		$search["fields"] =  ['flow_serial','branch_serial','process_serial','flow_run_process_id'];
        if ($flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($search)) {
        	$flowRunProcessObject = $flowRunProcessObject->toArray();
			if (!empty($flowRunProcessObject[0]['flow_serial'])) {
				$flowSerial = $flowRunProcessObject[0]['flow_serial'];
				$branchSerial = $flowRunProcessObject[0]['branch_serial'];
				$processSerial = $flowRunProcessObject[0]['process_serial'];
			}
			$flowRunProcessId = $flowRunProcessObject[0]['flow_run_process_id'];
        }
        // 转发开始
        if (!empty($forwardUser) && $forwardUser == 'all') {
            $forwardUser = app($this->userService)->getAllUserIdString(['return_type' => 'array']);
        }
        if (is_string($forwardUser)) {
            $forwardUser = explode(',', trim($forwardUser, ','));
        }
        if (is_array($forwardUser) && !empty($forwardUser)) {
            // 排除当前用户
            $forwardUser = array_diff($forwardUser, [$currentUserId]);
        }
        if (empty($forwardUser)) {
            return false;
        }
        // 选填
        $feedbackContent = isset($data["feedback_content"]) ? $data["feedback_content"] : false;
        if ($feedbackContent !== false && trim($feedbackContent) != "") {
           $forwardUserName =  app($this->userRepository)->entity->wheres(['user_id' => [  $forwardUser , 'in']])->pluck('user_name')->toArray();
            // 插入签办反馈
            $data["edit_time"]    = date('Y-m-d H:i:s');
            $data["receive_user_id"] = implode(',',   $forwardUser);
            $data["receive_user_name"] = implode(' ',   $forwardUserName);
            $data["feedback_type"] = 'retransmission';
            $feedbackContent = str_replace("\r\n","<br />",$feedbackContent);
            $feedbackContent = str_replace("\n","<br />",$feedbackContent);
            $data["content"] = $feedbackContent;
            $data["run_feedback_id"] = app($this->flowRunService)->getNextRunFeedbackId($runId, $currentUserId);
            $feedbackInsertData = array_intersect_key($data, array_flip(app($this->flowRunFeedbackRepository)->getTableColumns()));
            app($this->flowRunFeedbackRepository)->insertData($feedbackInsertData);
            //如果流程结束，需要加到document_revert表
            if ($currentStep== 0 ) {
                    $documentId =  app($this->documentContentRepository)->getDocumentIdByTypeAndSource( 5 ,$runId);
                    if (!empty($documentId)) {
                          $revert["document_id"] = $documentId->document_id;
                          $revert["user_id"] = $data["user_id"];
                          $revert["revert_content"] = $data["content"];
                          $revert["created_at"] = $data["edit_time"];
                          $revert["extra_fields"] = json_encode(["source" => "flow_run", "process_name" =>  $data["flow_process"], "process_id" => $data["process_id"]]);
                          app( $this->documentRevertRepository)->insertData( $revert);
                    }
            }
        }
        // 收集提醒被发送人
        // $remindUserIdString = "";
        $currentTime = date('Y-m-d H:i:s');
		$originProcess = 0;
		$dbData = app($this->flowRunProcessRepository)->getFlowRunProcessInfo(['origin_process'],['run_id'=>$runId,'process_id'=>$processId,'flow_process'=>$flowProcess,"host_flag"=>1]);
        $originProcess = isset($dbData[0]['origin_process'])?$dbData[0]['origin_process']:0;
        $forwardInsertProcessList = [];
        foreach ($forwardUser as $key => $currentForwardUserId) {
            $todu_push_params = [];
            // 判断每个办理人是否有委托流程
            $agentParam = ["flow_id" => $flowId, "user_id" => $currentForwardUserId];
            $userLastStepFlag = 1;
            if ($haveAgent = app($this->flowRunService)->checkFlowHaveAgent($agentParam)) {
                $haveAgentArray = explode("|", $haveAgent);
                $agentFlowId = $haveAgentArray[0];
                $agentUserId = $haveAgentArray[1];
                $insertFlowRunProcessData = [
                    "run_id" => $runId,
                    "process_id" => $processId,
                    "receive_time" => $currentTime,
                    "user_id" => $agentUserId,
                    "process_flag" => "1",
                    "flow_process" => $flowProcess,
                    "host_flag" => "0",
                    "by_agent_id" => $currentForwardUserId,
                    "flow_agency_id" => $agentFlowId,
                    "flow_id" => $flowId,
                    "process_type" => $processType,
                    "free_process_step" => $data['free_process_step'] ?? 0,
                    "forward_user_id" => $currentUserId,
					"origin_process" => $originProcess,
					"flow_serial" => $flowSerial,
					"branch_serial" => $branchSerial,
                	"process_serial" => $processSerial,
                    "user_run_type" => 1,
                    "user_last_step_flag" => $userLastStepFlag,
                ];
                app($this->flowRunService)->updateLastFlagAtSubmit([
                    'run_id' => $runId,
                    'user_id' => $agentUserId,
                    'branch_serial' => $branchSerial,
                    'flow_serial' => $flowSerial,
                    'host_flag' => 0,
                    "flow_process" => $flowProcess
                ]);
                $forwardInsertProcessList[] = $flowRunProcess = app($this->flowRunProcessRepository)->insertData($insertFlowRunProcessData);

                //记录流程委托链
                app($this->flowRunService)->recordFlowAgencyChain($flowRunProcess->toArray(), $agentParam);
                //流程的短信提醒也转发到代理人那里
                $currentForwardUserId = $agentUserId;
                $todu_push_params['receiveUser'] = $agentUserId;
            } else {
                $insertFlowRunProcessData = [
                    "run_id" => $runId,
                    "process_id" => $processId,
                    "receive_time" => $currentTime,
                    "user_id" => $currentForwardUserId,
                    "process_flag" => "1",
                    "flow_process" => $flowProcess,
                    "host_flag" => "0",
                    "flow_id" => $flowId,
                    "process_type" => $processType,
                    "free_process_step" => $data['free_process_step'] ?? 0,
                    "forward_user_id" => $currentUserId,
					"origin_process" => $originProcess,
					"flow_serial" => $flowSerial,
					"branch_serial" => $branchSerial,
                	"process_serial" => $processSerial,
                    "user_run_type" => 1,
                    "user_last_step_flag" => $userLastStepFlag
                ];
                app($this->flowRunService)->updateLastFlagAtSubmit(['run_id' => $runId, 'user_id' => $currentForwardUserId, 'branch_serial' => $branchSerial, 'flow_serial' => $flowSerial, 'host_flag' => 0, "flow_process" => $flowProcess]);
                $forwardInsertProcessList[] = $flowRunProcess = app($this->flowRunProcessRepository)->insertData($insertFlowRunProcessData);
                $todu_push_params['receiveUser'] = $currentForwardUserId;
            }
            $todu_push_params['deliverTime'] = $currentTime;
            $todu_push_params['deliverUser'] = $currentUserId;
            $todu_push_params['operationType'] = 'add';
            $todu_push_params['operationId'] = '8';
            $todu_push_params['flowId'] = $flowId;
            $todu_push_params['runId'] = $runId;
            $todu_push_params['processId'] = $processId;
            $todu_push_params['flowRunProcessId'] = $flowRunProcess->flow_run_process_id;
            // 操作推送至集成中心
            app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
        }

        // 删除flow_run_step表的此流程数据，重新添加
        // app($this->flowRunService)->rebuildFlowRunStepDataServiceRealize(["run_id" => $runId]);
        // 重新计算每个人的user_last_setp_flag
        app($this->flowParseService)->updateUserLastStepsFlag($runId, array_merge($forwardUser, [$currentUserId]));
        // app($this->flowRunStepRepository)->updateData(["transact_time" => time()], ["run_id" => [$runId]]);
        // 发送提醒
        $userName = app($this->userService)->getUserName($currentUserId);
        $remindUserIdString = '';
        $needResetUser = [];
        if (!empty($forwardInsertProcessList)) {
            $sendData = [
                'remindMark'   => 'flow-forward',
                'toUser'       => '',
                'contentParam' => ['flowTitle' => $runObject->run_name, 'userName' => $userName],
                'stateParams'  => ["flow_id" => intval($flowId), "run_id" => intval($runId), "flow_run_process_id" => 0],
                'module_type'  => app($this->flowTypeRepository)->getFlowSortByFlowId($flowId)
            ];
            foreach ($forwardInsertProcessList as $key => $value) {
                array_push($needResetUser,  $value->user_id);
                $sendData['toUser'] = $value->user_id ?? '';
                if (isset($value->user_id) && $value->user_id) {
                    $remindUserIdString .= $value->user_id . ",";
                }
                $sendData['stateParams']['flow_run_process_id'] = intval($value->flow_run_process_id) ?? 0;
                Eoffice::sendMessage($sendData);
            }
        }
        if (!empty($needResetUser)) {
            // 转发后更新user_last_step_flag 字端数据
            app($this->flowParseService)->updateUserLastStepsFlag($runId, $needResetUser);
        }
        // 被转发人条件到归档文件查看权限中
        if ($currentStep == 0 ) {
                $documentId =  app($this->documentContentRepository)->getDocumentIdByTypeAndSource( 5 ,$runId);
                if (!empty($documentId)) {
                    // 判断是否归档，如果归档还需要将当前抄送人更新到share_user字段
                    $shareUser = app($this->documentShareRepository)->getDetail($documentId->document_id , false , ['share_user']);
                    if (!empty($shareUser)) {
                        if ($remindUserIdString) {
                            $lastShareUser = trim($shareUser->share_user.','.$remindUserIdString, ',');
                        }else {
                            $lastShareUser = $shareUser->share_user;
                        }
                        app($this->documentShareRepository)->updateData(['share_user' => $lastShareUser], ['document_id' => $documentId->document_id]);
                    }
                }
        }
        // 转发结束
        return "1";
    }

    /**
     * 【流程运行】 事后委托实现（支持批量委托）
     * @method flowRunAgentRealize
     * @param string $byAgentUser [被委托人]
     * @param array $data [需要委托的流程数据，单条数据或多条，必须包含run_id和process_id]
     * @param string $agentUser [当前登录用户信息，委托人]
     * @return array|bool
     */
    public function flowRunAgentRealize($byAgentUser, $data, $agentUser)
    {
        if (empty($byAgentUser) || empty($data) || !isset($agentUser) || ($byAgentUser == $agentUser)) {
            return false;
        }
        $flowRunProcessId = $data['flow_run_process_id'] ?? 0;
        $flowProcess = $data['flow_process'] ?? 0; // 节点id
        // 验证一下被委托人是否存在
        $byAgentUserName = app($this->userService)->getUserName($byAgentUser);
        if (empty($byAgentUserName)) {
            return false;
        }
        if (isset($data['run_id'])) {
            // 如果是单条数据的转为二维数组
            $data = [$data];
            $entrustType = 'single';
        } else {
            $entrustType = 'batch';
        }
        $entrustResult = [];
        $data = array_merge($data);
        $hasEntrustRunIds = [];
        foreach ($data as $key => $value) {
            // 批量委托时 过滤对某一个流程的重复委托
            if ($entrustType == 'batch' && in_array($value["run_id"],  $hasEntrustRunIds)) {
                continue;
            }
            $entrustResult[$key] = [];

            if (!isset($value["run_id"]) || !isset($value["process_id"]) || !isset($value["flow_run_process_id"])) {

                if ($entrustType == 'single') {
                    return ['code' => ['0x030157', 'flow']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    // 参数异常，请刷新页面重试
                    $entrustResult[$key]['entrust_result_title'] = trans('flow.0x030157');
                    continue;
                }
            }
            $flowRunProcessId = $value['flow_run_process_id'];
            $flowRunProcessDetail = app($this->flowRunProcessRepository)->getFlowRunProcessDetail($flowRunProcessId);
            if ($flowRunProcessDetail->user_run_type != 1) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x030186', 'flow']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    // 流程办理状态发生变化，请尝试刷新页面
                    $entrustResult[$key]['entrust_result_title'] = trans('flow.0x030186');
                    continue;
                }
            }
            // 运行ID
            $runId = $entrustResult[$key]['run_id'] = $value["run_id"];
            // 步骤ID
            $processId = $value["process_id"];
            // 委托人ID
            $runObject = app($this->flowRunRepository)->getDetail($runId);
            if (empty($runObject->flow_id)) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x000006', 'common']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    $entrustResult[$key]['entrust_result_title'] = trans('common.0x000006');
                    continue;
                }
            }
            $flowId = $entrustResult[$key]['flow_id'] = $runObject->flow_id;
            if (isset($value['flow_run_process_belongs_to_flow_run']['run_name'])) {
                $entrustResult[$key]['run_name'] = $value['flow_run_process_belongs_to_flow_run']['run_name'];
            } else {
                $flowRunInfo = app($this->flowRunRepository)->getDetail($runId);
                $entrustResult[$key]['run_name'] = $flowRunInfo->run_name ?? '';
            }
            $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
            if (empty($flowTypeInfo->flow_type)) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x000006', 'common']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    $entrustResult[$key]['entrust_result_title'] = trans('common.0x000006');
                    continue;
                }
            }
            // 判断流程办理权限
            $verifyPermissionParams = [
                'type' => 'handle',
                'run_id' => $runId,
                'user_id' => $agentUser,
            ];
            if (!app($this->flowPermissionService)->verifyFlowHandleViewPermission($verifyPermissionParams)) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x000006', 'common']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    $entrustResult[$key]['entrust_result_title'] = trans('common.0x000006');
                    continue;
                }
            }
            // 获取当前步骤的节点ID
            $searchFlowRunProcess = [
                'returntype' => 'array',
                'search' => [
                    'run_id' => [$runId],
                    'process_id' => [$processId],
                    'user_id' => [$agentUser],
                ],
            ];
            $flowRunProcessDetail = app($this->flowRunProcessRepository)->getFlowRunProcessList($searchFlowRunProcess);
            if (empty($flowRunProcessDetail) || empty($flowRunProcessDetail['0']['flow_process'])) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x000006', 'common']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    $entrustResult[$key]['entrust_result_title'] = trans('common.0x000006');
                    continue;
                }
            }
            // 获取当前用户参与的最新节点信息，判断是否允许委托
            $flowProcessDetail = app($this->flowPermissionService)->getProcessInfo($flowRunProcessDetail['0']['flow_process']);
            if ($flowTypeInfo->flow_type == '1') {
                // 固定流程需要判断节点委托权限，自由流程不需要
                if (!isset($flowProcessDetail->process_entrust) || $flowProcessDetail->process_entrust != '1') {
                    if ($entrustType == 'single') {
                        return ['code' => ['0x030158', 'flow']];
                    } else {
                        $entrustResult[$key]['entrust_result'] = 0;
                        // 当前节点不允许委托
                        $entrustResult[$key]['entrust_result_title'] = trans('flow.0x030158');
                        continue;
                    }

                }
            }
            $isEntrustedOrAssigned = false;
            $isSystemSubmit = false;
            foreach ($flowRunProcessDetail as $ProcessKey => $processValue) {
                if($processValue['host_flag'] == 0 && $processValue['system_submit'] == 1) {
                    $isSystemSubmit = true;
                }
                if ($processValue['by_agent_id']) {
                    if ($processValue['agent_way'] == 0) {
                        $isEntrustedOrAssigned = 0; // 委托
                    } else if ($processValue['agent_way'] == 1) {
                        $isEntrustedOrAssigned = 1; // 交办
                    }
                }
            }

            // 区分是委托来的流程还是交办来的流程，返回对应信息
            if ($isEntrustedOrAssigned === 1) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x030179', 'flow']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    // 交办给您办理的流程，您不能再委托其他人办理
                    $entrustResult[$key]['entrust_result_title'] = trans('flow.0x030179');
                    continue;
                }

            } else if ($isEntrustedOrAssigned === 0) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x030159', 'flow']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    // 委托您办理的流程，您不能再委托其他人办理
                    $entrustResult[$key]['entrust_result_title'] = trans('flow.0x030159');
                    continue;
                }

            } else if ($isSystemSubmit) {
                if ($entrustType == 'single') {
                    return ['code' => ['0x030182', 'flow']];
                } else {
                    $entrustResult[$key]['entrust_result'] = 0;
                    // 流程已被系统自动提交，建议刷新列表或页面
                    $entrustResult[$key]['entrust_result_title'] = trans('flow.0x030182');
                    continue;
                }
            }
            $currentTime = date('Y-m-d H:i:s');



            // 处理此人的所有待办
            $result = app($this->flowRunProcessRepository)->getFlowRunProcessInfo(['flow_run_process_id','process_id','host_flag'],
                ['run_id'=> $runId, 'user_run_type' => 1, 'user_id' => $agentUser]);

            foreach ($result as $k => $v) {
                // 事后委托 写记录表 flow_run_process_agency_detail
                $oneData = app($this->flowRunProcessAgencyDetailRepository)->getOneFieldInfo(['flow_run_process_id' => [$v['flow_run_process_id']]]);
                $sort = 0;
                if ($oneData) {
                    $sort = app($this->flowRunProcessAgencyDetailRepository)->getFieldMaxValue('sort', ['flow_run_process_id' => [$v['flow_run_process_id']]]) + 1;
                }
                app($this->flowRunProcessAgencyDetailRepository)->insertData([
                    'flow_run_process_id' => $v['flow_run_process_id'],
                    'user_id' => $byAgentUser,
                    'by_agency_id' => $agentUser,
                    'sort' => $sort,
                    'type' => 0,
                ]);


                //委托人保存的会签内容删除
                app($this->flowCountersignRepository)->updateFlowCountersignData(["data" => ["save_type" => 2], "wheres" => ["run_id" => [$runId], "countersign_user_id" => [$agentUser], "process_id" => [ $v['process_id']] ,'save_type' =>[1] ]]);

                // // 判断被委托人是否有事前委托  -- 这里可能需要做无限级的查询，另外事前委托的地方也需要无限级委托
                // $agentParam = ["flow_id" => $flowId, "user_id" => $byAgentUser];
                // $userLastStepFlag = 1;
                // if ($haveAgent = app($this->flowRunService)->checkFlowHaveAgent($agentParam)) {
                //     $haveAgentArray = explode("|", $haveAgent);
                //     $agentFlowId = $haveAgentArray[0];
                //     $agentUserId = $haveAgentArray[1];

                //     $oneData = app($this->flowRunProcessAgencyDetailRepository)->getOneFieldInfo(['flow_run_process_id' => [$v['flow_run_process_id']]]);
                //     $sort = 0;
                //     if ($oneData) {
                //         $sort = app($this->flowRunProcessAgencyDetailRepository)->getFieldMaxValue('sort', ['flow_run_process_id' => [$v['flow_run_process_id']]]) + 1;
                //     }
                //     app($this->flowRunProcessAgencyDetailRepository)->insertData([
                //         'flow_run_process_id' => $v['flow_run_process_id'],
                //         'user_id' => $agentUserId,
                //         'by_agency_id' => $byAgentUser,
                //         'sort' => $sort,
                //         'type' => 0,
                //     ]);
                //     // 消息提醒什么的 给最终的被委托人
                //     $byAgentUser = $agentUserId;
                // }
                $updateData = [
                    "user_id" => $byAgentUser,
                    "by_agent_id" => $agentUser,
                    'process_time' => null,
                    'process_flag' => 1,
                ];
                // 更新 flow_run_process
                app($this->flowRunProcessRepository)->updateData($updateData, [
                    "flow_run_process_id" => $v['flow_run_process_id']
                ]);
                // 记录委托人是否是主办人
                $verifyAgentUserHostFlag = [
                    'returntype' => 'count',
                    'search'     => [
                        'user_id'    => [$agentUser],
                        'run_id'     => [$runId],
                        'process_id' => [$v['process_id']],
                        'host_flag'  => [1]
                    ]
                ];
                $verifyAgentUserHostFlagCount = app($this->flowRunProcessRepository)->getFlowRunProcessList($verifyAgentUserHostFlag);
                // 判斷被委托人是否是主办人
                $verifyByAgentUserHostFlag = [
                    'returntype' => 'count',
                    'search'     => [
                        'user_id'    => [$byAgentUser],
                        'run_id'     => [$runId],
                        'process_id' => [$v['process_id']],
                        'host_flag'  => [1]
                    ]
                ];
                $verifyByAgentUserHostFlagCount = app($this->flowRunProcessRepository)->getFlowRunProcessList($verifyByAgentUserHostFlag);
                $todu_push_params = [];
                $todu_push_params['receiveUser'] = $agentUser;
                $todu_push_params['deliverTime'] = '';
                $todu_push_params['deliverUser'] = $agentUser;
                $todu_push_params['operationType'] = 'reduce';
                $todu_push_params['operationId'] = '10';
                $todu_push_params['flowId'] = $flowId;
                $todu_push_params['runId'] = $runId;
                $todu_push_params['processId'] = $v['process_id'];
                $todu_push_params['flowRunProcessId'] = $v['flow_run_process_id'];
                // 操作推送至集成中心
                app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                if (!$verifyByAgentUserHostFlagCount) {
                    $todu_push_params = [];
                    $todu_push_params['receiveUser'] = $byAgentUser;
                    $todu_push_params['deliverTime'] = '';
                    $todu_push_params['deliverUser'] = $agentUser;
                    $todu_push_params['operationType'] = 'add';
                    $todu_push_params['operationId'] = '6';
                    $todu_push_params['flowId'] = $flowId;
                    $todu_push_params['runId'] = $runId;
                    $todu_push_params['processId'] = $v['process_id'];
                    $todu_push_params['flowRunProcessId'] = $v['flow_run_process_id'];
                    // 操作推送至集成中心
                    app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                }


                // 委托人如果在当前节点是主办人，更新当前步骤所有被委托人的host_flag为1
                if ($verifyAgentUserHostFlagCount) {
                    $updateFlowRunProcessWhere = [
                        "run_id" => [$runId],
                        "process_id" => [$v['process_id']],
                        "user_id" => [$byAgentUser],
                        "host_flag" => [1],
                    ];
                    app($this->flowRunProcessRepository)->updateData(['host_flag' => 1, 'deliver_time' => DB::raw('saveform_time')], $updateFlowRunProcessWhere);
                }
                // 办理完成委托，如果当前节点所有办理人均未查看 ，事后委托后 则上一步主办的PRCS_FLAG变成3
                $this->restoreLastProcessFlagToThree($runId, $v['process_id']);
            }

            // 更新flow_run_step，删除flow_run_step表的此流程数据，重新添加
            // app($this->flowRunService)->rebuildFlowRunStepDataServiceRealize(["run_id" => $runId]);
            app($this->flowParseService)->updateUserLastStepsFlag($runId, [$byAgentUser,$agentUser]);
            // 委托后更新user_last_step_flag 字端数据
            app($this->flowParseService)->updateUserLastStepsFlag($runId, [$byAgentUser]);
            // 调用消息已读
            app($this->flowParseService)->markUnreadMessagesAsRead($flowId, $runId, $agentUser);
            // 发送提醒
            $userName = app($this->userService)->getUserName($agentUser);
            $sendData['remindMark'] = 'flow-entrust';
            $sendData['toUser'] = $byAgentUser;
            $sendData['contentParam'] = ['flowTitle' => $runObject->run_name, 'userName' => $userName];
            // 如果再同步骤中已有主办人身份则应该用主办人身份的flowRunProcessId
            $byAgentUserIsHost = [
                'returntype' => 'first',
                'search'     => [
                    'user_id'    => [$byAgentUser],
                    'run_id'     => [$runId],
                    'process_id' => [ $processId],
                    'host_flag'  => [1],
                    'user_run_type' => [1]
                ]
            ];
            $byAgentUserIsHost = app($this->flowRunProcessRepository)->getFlowRunProcessList($byAgentUserIsHost);
            if ($byAgentUserIsHost) {
                $flowRunProcessId = $byAgentUserIsHost->flow_run_process_id;
            }
            $sendData['stateParams'] = ["flow_id" => intval($flowId), "run_id" => intval($runId), 'flow_run_process_id' => intval($flowRunProcessId)];
            $sendData['module_type'] = app($this->flowTypeRepository)->getFlowSortByFlowId($flowId);
            Eoffice::sendMessage($sendData);
            // 委托结果标识；1、成功；0、失败
            array_push($hasEntrustRunIds, $runId);

            $entrustResult[$key]['entrust_result'] = 1;
        }
        return $entrustResult;
    }

    /**
     * 设置上一节点的process_flag为3 用于收回流程时,若全部人员未查看，则上节点 可回收
     * @param $runId
     * @param $processId
     * @return bool
     */
    private function restoreLastProcessFlagToThree($runId, $processId)
    {
        $searchAllCurrentProcessFlowRunProcess = [
            'returntype' => 'array',
            'search' => [
                'run_id' => [$runId],
                'process_id' => [$processId],
            ],
        ];
        $allCurrentProcessflowRunProcessDetail = app($this->flowRunProcessRepository)->getFlowRunProcessList($searchAllCurrentProcessFlowRunProcess);
        if (count($allCurrentProcessflowRunProcessDetail) > 0) {
            $anyOneView = true;
            foreach ($allCurrentProcessflowRunProcessDetail as $allCurrentProcessflowRunProcess) {
                if ($allCurrentProcessflowRunProcess['process_flag'] != '1') {
                    $anyOneView = false;
                }
            }
            if ($anyOneView) {
                app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["process_flag" => "3"], "wheres" => ["run_id" => [$runId], "process_id" => [$processId - 1]],"whereRaw" => ["process_flag > 3"]]);
            }
        }
        return true;
    }

    /**
     * 【流程运行】 收回实现
     *
     * @method flowTurning
     *
     * @return [type]      [description]
     */
    public function flowRunTakeBackRealize($runId, $data, $loginUserInfo)
    {
        // 收回这里前端不需要传步骤ID，直接获取当前流程最新信息，最新步骤ID
        // 必填
        $processId = $data["process_id"] ?? 0;
        if ($processId <= 0) {
            return ['code' => ['0x000006', 'common']];
        }
        // 必填
        $currentUserId = $data["user_id"];
        $userMenu = $loginUserInfo['menus']['menu'] ?? [];
		$flowProcess = $data['flow_process'] ?? '';
        $flowRunProcessId = $data['flow_run_process_id'] ?? ($data['flowRunProcessId'] ?? '');
        // 判断权限
        $runObject = app($this->flowRunRepository)->getFlowRunningInfo($runId, []);
        if (!$runObject) {
            return ['code' => ['0x000006', 'common']];
        }

        $flowRunInfo = $runObject->toArray();
        $flowType = $flowRunInfo['flow_run_has_one_flow_type']['flow_type'] ?? 1;
        $flowId = $flowRunInfo['flow_id'];
        $maxProcessId = $flowRunInfo['max_process_id'];
        // $processId    = $maxProcessId - 1;
        $prevProcessHostUser = app($this->flowRunProcessRepository)->getHostInfoByRunIdAndProcessId($runId, $processId);
        // 如果是监控收回，获取上一个节点的主办人用于收回
        if (isset($data['monitor_take_back']) && $data['monitor_take_back'] == 'monitor') {
            if (empty($prevProcessHostUser)) {
                // 未获取上一节点的主办人，不能收回
                return ['code' => ['0x030144', 'flow']];
            }
        }
        // 获取当前用户的监控明细
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($loginUserInfo);
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];

        // 20200724 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤。
        $flowRunInfo['max_flow_serial'] = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', ['run_id' => [$runId]]);

        // 流程运行节点信息
        $flowRunProcessList = $flowRunInfo['flow_run_process_list'] = $flowRunInfo['flow_run_has_many_flow_run_process'];
        unset($flowRunInfo['flow_run_has_many_flow_run_process']);
        $currentFlowRunProcessInfo = [];
        $userArrToUpdate = [];
        // 先找出当前节点具体信息
        foreach ($flowRunProcessList as $flowRunProcess) {
            if ($flowRunProcess['flow_run_process_id'] == $flowRunProcessId) {
                $flowRunInfo['current_flow_run_process_info'] = $currentFlowRunProcessInfo = $flowRunProcess;
            }
            // 记录当前步骤节点的办理人
            if ($flowRunProcess['process_id'] == $processId) {
                $userArrToUpdate[] = $flowRunProcess['user_id'];
            }
        }
        // 没有获取到当前节点信息说明传递的数据有误
        if (!$currentFlowRunProcessInfo) {
            return ['code' => ['0x000006', 'common']];
        }

        // 收回标识
        $takeBackFlag = $data['monitor_take_back'] ?? '';
        // 统一接口判断是否有收回权限
        $takeBackRes = app($this->flowRunService)->checkFlowRunProcessTakeBackAuthority($flowRunInfo, $loginUserInfo, $monitorRules);

        // 两个收回权限都没有
        if (($takeBackRes['takeBackFlag'] + $takeBackRes['monitorTakeBackFlag']) == 0) {
            return ['code' => ['0x000006', 'common']];
        }

        // 用监控收回但没有监控收回权限
        if (($takeBackFlag == 'monitor') && !$takeBackRes['monitorTakeBackFlag']) {
            return ['code' => ['0x000006', 'common']];
        }

        // 用普通收回但下节点已经有人看过
        if (($takeBackFlag != 'monitor') && ($currentFlowRunProcessInfo['process_flag'] != 3)) {
            return ['code' => ['0x000006', 'common']];
        }

        // 找出要被收回的运行节点信息
        $flowRunProcessListToTakeBack = app($this->flowRunService)->getFlowRunProcessToTakeBack($flowRunInfo, $takeBackFlag);
        // 没有可被收回的节点信息
        if (!$flowRunProcessListToTakeBack) {
            return ['code' => ['0x000006', 'common']];
        }

        // 获取要删除的flow_run_process
        // $wheres = ["run_id" => [$runId], "process_id" => [$maxProcessId]];
        // $deleteFlowRunProcess = app($this->flowRunProcessRepository)->getFlowRunProcessList(['returntype' => 'array', 'search' => $wheres]);
        foreach ($flowRunProcessListToTakeBack as $key => $value) {
            $todu_push_params = [];
            $todu_push_params['receiveUser'] = $value['user_id'];
            $todu_push_params['deliverUser'] = $currentUserId;
            $todu_push_params['operationType'] = 'reduce';
            $todu_push_params['operationId'] = '10';
            $todu_push_params['flowId'] = $value['flow_id'];
            $todu_push_params['runId'] = $value['run_id'];
            $todu_push_params['processId'] = $value['process_id'];
            $todu_push_params['flowRunProcessId'] = $value['flow_run_process_id'];
            // 操作推送至集成中心
            app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
        }

        $isBack = 0; // 关注要收回的运行节点是否是退回提交生成
        // 要收回的运行节点的数据需要处理
        foreach ($flowRunProcessListToTakeBack as $value) {
            $deleteFlowRunProcessIds[] = $value['flow_run_process_id'];
            $deleteProcessId = $value['process_id'];
            $deleteFlowProcess = $value['flow_process'];
            $isBack = $value['is_back'];

            // 记录被收回节点的办理人
            $userArrToUpdate[] = $value['user_id'];

            // 删除要收回的运行节点的超时提醒
            app($this->flowRunOverTimeRepository)->deleteByWhere([
                "run_id" => [$runId],
                "process_id" => [$deleteProcessId],
                "node_id" => [$deleteFlowProcess],
            ]);

            // 删除要收回的节点相关的签办反馈,监控收回时有意义
            app($this->flowRunFeedbackRepository)->deleteByWhere(
                [
                    "run_id" => [$runId],
                    "process_id" => [$deleteProcessId],
                    "flow_process" => [$deleteFlowProcess],
                ]
            );

            // 删除要收回的节点相关的会签内容,监控收回时有意义
            app($this->flowCountersignRepository)->deleteByWhere(
                [
                    "run_id" => [$runId],
                    "process_id" => [$deleteProcessId],
                    "flow_process" => [$deleteFlowProcess],
                ]
            );

            // 删除要收回的节点的抄送记录
            app($this->flowCopyRepository)->deleteByWhere(
                [
                    "run_id" => [$runId],
                    "process_id" => [$deleteProcessId],
                    "flow_process" => [$deleteFlowProcess],
                ]
            );
        }

        // 删除要收回的运行节点的基本信息
        app($this->flowRunProcessRepository)->reallyDeleteByWhere(['flow_run_process_id' => [$deleteFlowRunProcessIds, "in"]]);

        // 删除要收回的运行节点的委托信息
        app($this->flowRunProcessAgencyDetailRepository)->deleteByWhere(['flow_run_process_id' => [$deleteFlowRunProcessIds, "in"]]);

        // 一般情况下，只更新当前节点的process_id
        // 如果是退回提交，也只能更新当前节点process_id
        $processIdArrOnMergeSteps = [$currentFlowRunProcessInfo['process_id']];
        // 如果当前节点是合并节点（不区分是否强制合并），且是正常提交，因为提交至合并后节点时所有分支是同步提交，所以需要找出所有分支上的合并节点的process_id，同步更新状态
        if ($flowType == '1' && $currentFlowRunProcessInfo['flow_run_process_has_one_flow_process']['merge'] && !$isBack) {
            $processIdArrOnMergeSteps = app($this->flowParseService)->getProcessIdsOnMergeSteps($flowRunProcessList, $currentFlowRunProcessInfo);
        }

        $todu_push_params = [];
        $todu_push_params['receiveUser'] = $prevProcessHostUser->user_id;
        $todu_push_params['deliverUser'] = $currentUserId;
        $todu_push_params['operationType'] = 'add';
        $todu_push_params['operationId'] = '5';
        $todu_push_params['flowId'] = $flowId;
        $todu_push_params['runId'] = $runId;
        $todu_push_params['viewType'] = '1';
        $todu_push_params['processId'] = $processId;
        $todu_push_params['flowRunProcessId'] = $prevProcessHostUser->flow_run_process_id;
        // 操作推送至集成中心
        app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);

        // 主办人已办理
        $updateDataFlagForHost = [
            "process_flag" => "2",
            "deliver_time" => null,
            "transact_time" => null,
            'sub_flow_run_ids' => '',
            'monitor_submit' => null,
            'outflow_process' => '0',
            'outflow_user' => '',
            'system_submit' => 0,
            "press_add_hour_turn" => "0",
            "overhandle_time" => '0000-00-00 00:00:00', // 同步修改超时自动提交的时间
            'saveform_time'   => null,
            "user_run_type" => 1, // 收回后作为待办
            "user_last_step_flag" => 1, // 收回后作为主办人的最新步骤
        ];
        // 主办人未办理，超时自动提交
        if (($currentFlowRunProcessInfo["process_time"] == null) || ($currentFlowRunProcessInfo["process_time"] == "0000-00-00 00:00:00")) {
            $updateDataFlagForHost["process_flag"] = 1;
        }

        // 经办人不需要改动自动提交标识
        // 经办人未办理
        $updateDataFlagOfUnhandled = [
            "process_flag" => "1",
            "deliver_time" => null,
            "transact_time" => null,
            'sub_flow_run_ids' => '',
            'monitor_submit' => null, // 不管经办人是否已经办理，其提交相关的状态都需要修改
            "user_run_type" => 1,
        ];
        // 经办人已办理
        // 其办理相关的时间不再修改
        $updateDataFlagOfHandled = [
            "process_flag" => "2",
            'sub_flow_run_ids' => '',
            'monitor_submit' => null,
            "user_run_type" => 2,
        ];

        // 默认收回子流程，除非设置不收回
        if (isset($data['takebackSonFlows']) && ($data['takebackSonFlows'] == 0)) {
            // 设置不收回则不删除子流程数据
            // 不收回子流程则不清空子流程字段
            unset($updateDataFlagForHost['sub_flow_run_ids']);
            unset($updateDataFlagOfUnhandled['sub_flow_run_ids']);
            unset($updateDataFlagOfHandled['sub_flow_run_ids']);
        } else {
            if ($currentFlowRunProcessInfo['sub_flow_run_ids']) {
                // 删除已触发的子流程数据
                app($this->flowTrashService)->deleteFlowAll($currentFlowRunProcessInfo['sub_flow_run_ids'], $loginUserInfo, false);
            }
        }

        // 主办人运行节点信息更新
        app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => $updateDataFlagForHost, "wheres" => [
            "run_id" => [$runId],
            "process_id" => [$processIdArrOnMergeSteps, "in"],
            "host_flag" => ["1"]
        ]]);

        // 经办人运行节点信息更新,分为已办理和未办理
        // 经办人已办理
        app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => $updateDataFlagOfHandled, "wheres" => ["run_id" => [$runId], "flow_process" => [$flowProcess], "process_id" => [$processIdArrOnMergeSteps, "in"], "host_flag" => [0]], "whereRaw" => ["((transact_time IS NOT NULL) AND (transact_time != '0000-00-00 00:00:00'))"]]);
        // 经办人未办理
        app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => $updateDataFlagOfUnhandled, "wheres" => ["run_id" => [$runId],"flow_process" => [$flowProcess], "process_id" => [$processIdArrOnMergeSteps, "in"], "host_flag" => [0]], "whereRaw" => ["((transact_time IS NULL) OR (transact_time = '0000-00-00 00:00:00'))"]]);

        // 更新flow_run表的最大运行节点信息
        app($this->flowRunRepository)->updateData(["current_step" => $currentFlowRunProcessInfo["flow_process"],  "max_process_id" => app($this->flowRunProcessRepository)->getFieldMaxValue('process_id', ['run_id' => [$runId]])], ["run_id" => $runId]);

        // 删除flow_run_step表的此流程数据，重新添加
        // app($this->flowRunService)->rebuildFlowRunStepDataServiceRealize(["run_id" => $runId]);
        app($this->flowParseService)->updateUserLastStepsFlag($runId, array_unique($userArrToUpdate));

        // 收回流程触发其他模块操作
        // 发票管理模块 --- 报销中发票报销人收回时触发取消报销操作
        app('App\EofficeApp\Invoice\Services\InvoiceService')->syncBackInvoice($loginUserInfo, $flowRunInfo);
        // 判断当前步骤主办人是否是当前用户，用于手机版刷新待办列表和待办数量
        $lastStepHostUserId = app($this->flowRunProcessRepository)->getHostUserIdByRunIdAndProcessId($runId, $processId);
        if ($currentFlowRunProcessInfo["user_id"] == $lastStepHostUserId) {
            return "2";
        }
        return "1";
    }

    /**
     * 【流程运行】 催办实现
     *
     * @method flowTurning
     *
     * @return [type]      [description]
     */
    public function flowRunLimitRealize($params, $loginUserInfo)
    {
        //发送方式
        if (!isset($params["send_method"]) || $params["send_method"] == []) {
            return ['code' => ['0x0000001', 'common']];
        }
        // $currentUserId = $loginUserInfo['user_id'] ?? '';
        // $limitContent = $params["limit_content"];
        // $sendMethod = $params["send_method"];
        if (empty($params["flow_data"])) {
            return "0";
        }

        $sendData['remindState'] = 'flow.handle';
        $sendData['remindMark'] = 'flow-press';
        $sendData['sendMethod'] = $params["send_method"];
        $sendData['isHand'] = true;
        $sendData['content'] = $params["limit_content"];

        // 获取当前用户的监控明细
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($loginUserInfo);
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];

        $moduleTypeOfFlow = [];
        foreach ($params["flow_data"] as $key => $value) {
            $flowRunProcessToLimit = app($this->flowRunService)->getFlowRunProcessInfoToLimit($value, $loginUserInfo, $monitorRules);

            // 没有可催办的节点则跳过
            if (!$flowRunProcessToLimit) {
                return ['code' => ['0x000006', 'common']];
            }

            // 遍历可催办节点的信息，提交至队列
            foreach ($flowRunProcessToLimit as $flowRunProcessToLimitValue) {
                // 过滤自己
                if ($flowRunProcessToLimitValue['user_id'] == $loginUserInfo['user_id']) {
                    continue;
                }
                $sendData['toUser'] = $flowRunProcessToLimitValue['user_id'];
                $sendData['stateParams'] = ["flow_id" => intval($flowRunProcessToLimitValue['flow_id']), "run_id" => intval($value['run_id']), "flow_run_process_id" => intval($flowRunProcessToLimitValue["flow_run_process_id"])];
                $sendData['module_type'] = $moduleTypeOfFlow[$flowRunProcessToLimitValue['flow_id']] ?? ($moduleTypeOfFlow[$flowRunProcessToLimitValue['flow_id']] = app($this->flowTypeRepository)->getFlowSortByFlowId($flowRunProcessToLimitValue['flow_id']));
                Eoffice::sendMessage($sendData);
            }
        }
        return "1";
    }

    /**
     * 【流程运行】 验证签办反馈、公共附件必填
     *
     * @method flowTurning
     *
     * @return [type]      [description]
     */
    public function verifyFlowRunRequired($runId, $data)
    {
        $verifyType = $data["verifyType"];
        if ($verifyType == "feedback") {
            $data = $this->parseParams($data);
            $data["run_id"] = $runId;
            $data["search"] = ["flow_process" => [$data["flow_process"]], "user_id" => [$data["user_id"]]];
            $returnData = $this->response(app($this->flowRunFeedbackRepository), 'getFeedbackListTotal', 'getFlowFeedbackListRepository', $data);
            if ($returnData["total"]) {
                return "1";
            } else {
                return "0";
            }
        } else if ($verifyType == "attachment") {
            $attachments = app($this->attachmentService)->getAttachmentIdsByEntityId(['entity_table' => 'flow_run', 'entity_id' => ["run_id" => [$runId], "flow_process" => [$data["flow_process"]], "user_id" => [$data["user_id"]]]]);
            if (count($attachments)) {
                return "1";
            } else {
                return "0";
            }
        }
    }

    /**
     * 【流程邮件外发】 流程邮件外发实现
     *
     * @param  [type]              $data [run_id;copy_user;process_id;by_user_id]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function sendFlowOutMail($data)
    {
        $runId = $data["run_id"];
        if ($runObject = app($this->flowRunRepository)->getDetail($runId)) {
            // 判断是否有邮件外发权限
            $verifyOutmailParams = [
                'run_id' => $runId,
                'user_id' => $data['user_id'] ?? '',
                'process_id' => $data['process_id'] ?? '',
            ];
            $verifyFlowOutmailPermission = app($this->flowPermissionService)->verifyFlowRunDispensePermission($verifyOutmailParams, 'flow_outmail');
            if (isset($verifyFlowOutmailPermission['code'])) {
                return $verifyFlowOutmailPermission;
            }
            $runObject->run_name = preg_replace("/(\s|\&nbsp\;|　|\xc2\xa0)/",' ',$runObject->run_name);
            $runName = preg_replace("/(\xc2\xa0)/",' ',$runObject->run_name);
            $mailTo = $data["to_user"];
            $subject = $runName;
            if (isset($data["subject"]) && $data["subject"]) {
                $subject = $data["subject"];
            }
            // $content = "邮件内容应该是解析后的表单内容，等杨仔那边处理点内容之后再加上！";
            $content = isset($data["content"]) ? $data["content"] : "";
            $creator = $data["send_user"];
            $search = [
                'entity_table' => 'flow_run',
                'entity_id' => ["run_id" => [$runId]],
            ];
            $attachments = app($this->attachmentService)->getAttachments($search);
            $emailAttachments = [];
            if (!empty($attachments) && count($attachments)) {
                foreach ($attachments as $value) {
                    if (isset($value['attachment_name']) && isset($value['temp_src_file'])) {
                        $emailAttachments[] = [
                            'file_name' => $value['attachment_name'],
                            'file'      => $value['temp_src_file'],
                        ];
                    }
                }
            }
            $data = [
                'mail_to' => $mailTo, //收件人
                'cc' => '', //抄送
                'bcc' => '', //秘送
                'mail_subject' => $subject, //邮件主题--必填!
                'mail_body' => $content, //邮件内容--必填!
                'mail_creator' => $creator, //发件人
                'attachments' => $emailAttachments, //附件
            ];
            return $this->flowOutSendMailRealize($data);
        }
    }

    /**
     * 实现流程邮件外发
     * @param  [type] $data [description]
     * @return [type]       [description]
     */
    public function flowOutSendMailRealize($data)
    {
        // 获取系统邮箱设置
        $systemEmailSetInfo = app($this->webmailEmailboxService)->getDefaultSystemMailboxDetail();
        if ($systemEmailSetInfo) {
            $systemEmailSetInfo = $systemEmailSetInfo->toArray();
        } else {
            // 邮件发送失败，请联系系统管理员设置系统邮箱
            return ['code' => ['0x030025', 'flow']];
        }
        $mail = [
            'host' => $systemEmailSetInfo['smtp_server'],
            'username' => $systemEmailSetInfo['email_address'],
            'password' => $systemEmailSetInfo['password'],
            'port' => $systemEmailSetInfo['smtp_port'],
            'smtp_ssl' => $systemEmailSetInfo['is_ssl_auth'],
            'from' => trim($systemEmailSetInfo['email_address']),
            'to' => $data['mail_to'],
            'cc' => empty($data['cc']) ? '' : $data['cc'],
            'bcc' => empty($data['bcc']) ? '' : $data['bcc'],
            'addAttachment' => $data['attachments'],
            'subject' => $data['mail_subject'],
            'body' => $data['mail_body'],
            'isHTML' => true,
            'auto_tls'      => $systemEmailSetInfo['auto_tls'],
        ];
        if (isset($systemEmailSetInfo['smtp_auth']) && $systemEmailSetInfo['smtp_auth'] == 1) {
            $mail['smtp_auth'] = 0;
        } else {
            $mail['smtp_auth'] = 1;
        }
        $param = [
            'handle' => 'Send',
            'param' => $mail,
        ];
        Queue::push(new EmailJob($param));
        return true;
    }

    /**
     * 【流程抄送】 新建抄送
     *
     * @param  [type]              $data [run_id;copy_user;process_id;by_user_id]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function addFlowCopy($data)
    {
        // 判断是否有抄送权限
        $verifyCopyParams = [
            'run_id' => $data["run_id"] ?? '',
            'user_id' => $data["copy_user"] ?? '',
            'process_id' => $data["process_id"] ?? '',
            'page_from' => $data["page_from"] ?? "",
        ];
        $verifyFlowCopyPermission = app($this->flowPermissionService)->verifyFlowRunDispensePermission($verifyCopyParams, 'process_copy');
        if (isset($verifyFlowCopyPermission['code'])) {
            return $verifyFlowCopyPermission;
        }
        if (!empty($data["by_user_id"]) && $data["by_user_id"] == 'all') {
            $data["by_user_id"] = app($this->userService)->getAllUserIdString(['return_type' => 'array']);
        }
        if (is_string($data["by_user_id"])) {
            $data["by_user_id"] = explode(',', trim($data["by_user_id"], ','));
        }
        if (is_array($data["by_user_id"]) && count($data["by_user_id"])) {
            // 排除当前用户
            $data["by_user_id"] = array_diff($data["by_user_id"], [$data["copy_user"]]);
            if (empty($data["by_user_id"])) {
                return false;
            }
            $batchCopyParams = [
                "by_copy_user" => $data["by_user_id"],
                "run_id" => $data["run_id"],
                "process_id" => $data["process_id"],
                "copy_user" => $data["copy_user"],
                "feedback_content" => $data["feedback_content"] ??'',
                "free_process_step" => $data['free_process_step'] ?? 0,
                "flow_process" => $data["flow_process"]??''
            ];
            app($this->flowRunService)->batchToCopyFLow($batchCopyParams);
        }
    }

    /**
     * 【流程抄送】 获取抄送列表;[带查询]
     *
     * @param  [type]              $data [description]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function flowCopyList($data)
    {
        // 添加被抄送人条件
        $byUserId = isset($data["by_user_id"]) ? $data["by_user_id"] : "";
        if ($byUserId == "") {
            return [];
        }
        $data = $this->parseParams($data);
        $data["by_user_id"] = $byUserId;
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $returnData = $this->response(app($this->flowCopyRepository), 'getFlowCopyTotal', 'getFlowCopyList', $data);
        $list = $returnData["list"] ?? [];
        if (!empty($list)) {
            foreach ($list as $key => &$value) {
                // 最新步骤
                /**
                 * @todo
                 * 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤。当冗余 max_flow_serial的逻辑处理完成后可以直接取，为了暂时兼容
                 * 方便调试，暂时使用
                 */
                $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', [
                    'run_id' => [$value['run_id']]
                ]);
                $value['max_flow_serial'] = $maxFlowSerial;
                $flowType = $value["flow_copy_belongs_to_flow_type"]["flow_type"];
                $runId = $value['run_id'];
                $value['latest_steps'] = app($this->flowRunService)->getLatestSteps($flowType, $runId, $maxFlowSerial);
            }
            $returnData["list"] = $list;
        }
        return $returnData;
    }

    /**
     * 【流程抄送】 获取抄送流程名称列表[9.0的中间类别列];[带查询]
     *
     * @param  [type]              $data [description]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function flowCopyFlowNameList($data)
    {
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();

        $newArray = [];

        if ($flowCopyObject = app($this->flowSortRepository)->getFlowCopySortListRepository($data)) {

            $flowArray = $flowCopyObject->toArray();

            $i = 0;

            foreach ($flowArray as $v1) {
                $has = 0;
                foreach ($v1['flow_sort_has_many_flow_type'] as $v2) {
                    if (count($v2['flow_type_has_many_flow_copy']) != 0) {
                        // 先插入分类
                        if ($has == 0) {
                            $i++;
                            $newArray[$i - 1]['id'] = $v1['id'];
                            $newArray[$i - 1]['title'] = $v1['title'];
                            $newArray[$i - 1]['flow_sort_has_many_flow_type'] = [];
                        }
                        $has = 1;
                        if (isset($newArray[$i - 1]['flow_sort_has_many_flow_type'])) {
                            array_push($newArray[$i - 1]['flow_sort_has_many_flow_type'], $v2);
                        }
                    }
                }
            }
        }

        return $newArray;

    }

    /**
     * 【流程委托】 新建委托规则
     *
     * @param  [type]              $data [description]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function addFlowAgencyRule($data, $currentUser = '')
    {
        $startdate = (isset($data['start_date']) && $data['start_date']) ? $data['start_date'] : date("Y-m-d H:i:s", time());
        $enddate = isset($data['end_date']) ? $data['end_date'] : '';
        // 被委托人
        $agencyInsertData["agent_id"] = $data["agent_id"];
        // 委托人
        $agencyInsertData["by_agent_id"] = $data["by_agent_id"];
        $agencyInsertData["flow_id_string"] = trim($data["flow_id_string"], ",") . ",";
        $agencyInsertData["to_do"] = "1";
        $agencyInsertData["start_time"] = $startdate;
        $agencyInsertData["end_time"] = $enddate;
        // 判断是否有当前流程的委托规则
        $verifyNewRulePermission = app($this->flowPermissionService)->verifyAddFlowAgencyRuleParams($agencyInsertData, $currentUser);
        if (isset($verifyNewRulePermission['code'])) {
            return $verifyNewRulePermission;
        }
        $flow_id_array = explode(",", trim($data["flow_id_string"], ","));
        //校验有冲突的相互委托
        if (count($flow_id_array) > 0) {
            foreach ($flow_id_array as $flow_id) {
                $param = [
                    'returntype' => 'array',
                    'search' => [
                        'flow_id' => [$flow_id],
                        'by_agent_id' => [$data["agent_id"]],
                        'agent_id' => [$data["by_agent_id"]],
                        'status' => [0],
                    ],
                ];
                $flowAgencyDetailList = app($this->flowAgencyDetailRepository)->getFlowAgencyDetailList($param);
                if (count($flowAgencyDetailList) > 0) {
                    foreach ($flowAgencyDetailList as $flowAgencyDetail) {
                        $flowAgency = $flowAgencyDetail['flow_agency_detail_belongs_to_flow_agency'];
                        $startdateTime = strtotime($startdate);
                        $flowAgencyStartTime = strtotime($flowAgency['start_time']);
                        $enddateTime = $enddate != '' ? strtotime($enddate) : null;
                        $flowAgencyEndTime = $flowAgency['end_time'] != '0000-00-00 00:00:00' ? strtotime($flowAgency['end_time']) : null;
                        // 规则已失效
                        if ($flowAgencyEndTime != null && $flowAgencyEndTime < time()) {
                            continue;
                        }
                        // 设置到未来
                        if ($enddateTime == null || $flowAgencyEndTime == null) {
                            if ($enddateTime == null && $flowAgencyEndTime == null) {
                                return ['code' => ['0x030160', 'flow']];
                            } else {
                                if ($flowAgencyEndTime == null) {
                                    // 结束时间大于 开始时间 就重合
                                    if ($enddateTime > $flowAgencyStartTime) {
                                        return ['code' => ['0x030160', 'flow']];
                                    }
                                }
                                if ($enddateTime == null) {
                                    // 开始时间小于结束时间 就重合
                                    if ($startdateTime < $flowAgencyEndTime) {
                                        return ['code' => ['0x030160', 'flow']];
                                    }
                                }
                            }
                        } else {
                            // 时间段内的交叉判断
                            if (($startdateTime >= $flowAgencyStartTime && $startdateTime <= $flowAgencyEndTime)
                                ||
                                ($enddateTime >= $flowAgencyStartTime && $enddateTime <= $flowAgencyEndTime)
                                ||
                                ($startdateTime <= $flowAgencyStartTime && $enddateTime >= $flowAgencyStartTime)
                            ) {
                                return ['code' => ['0x030160', 'flow']];
                            }
                        }
                    }
                }
            }
        }
        if ($agencyInsertObject = app($this->flowAgencyRepository)->insertData($agencyInsertData)) {
            $flow_agency_id = $agencyInsertObject->flow_agency_id;
            // 生成可以插入新表的数据
            array_walk($flow_id_array, function (&$item1, $key, $prefix) {
                $item1 = array("flow_agency_id" => $prefix, "flow_id" => $item1);
            }, $flow_agency_id);
            app($this->flowAgencyDetailRepository)->insertMultipleData($flow_id_array);
            return "1";
        }
    }

    /**
     * 【流程委托】 可以委托的流程的列表，在新建委托时使用
     *
     * @param  [type]              $data [description]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function canAddAgencyFlowList($userId, $param)
    {
        $param = $this->parseParams($param);
        // if(isset($param["getDataType"]) && $param["getDataType"] == 'list-relate-flow') {
        //     unset($param["fields"]);
        // }
        if (isset($param["search"]["flow_name"])) {
            $param["flow_name"] = $param["search"]["flow_name"][0];
            unset($param["search"]["flow_name"]);
        }
        if ($flowSortObject = app($this->flowSortRepository)->getFlowSortListRelateFlowType($param)) {
            $result = [];
            $listArray = [];
            $sortArray = [];
            $searchResult = [];
            $listTotal = 0;
            foreach ($flowSortObject as $flowSortKey => $flowSortValue) {
                $id = $flowSortValue->id;
                $title = $flowSortValue->title;
                $haveFlowCanAgencyFlag = 0;
                $flowSortHasManyFlowTypeArray = [];
                foreach ($flowSortValue->flowSortHasManyFlowType as $key => $value) {
                    $flowId = $value["flow_id"];
                    $agencyAble = "canAgency";
                    // 验证是否可以委托
                    if ($checkAgencyObject = app($this->flowAgencyRepository)->checkFlowAlreadyAgentRepository(["flow_id" => $flowId, "user_id" => $userId])) {
                        if ($checkAgencyObject->first()) {
                            $agencyAble = "unableAgency";
                        }
                    }
                    if ($value->is_using == "0") {
                        $agencyAble = "unableAgency";
                    }
                    if ($agencyAble == "canAgency") {
                        $flowSortHasManyFlowTypeArray[] = ["flow_id" => $value["flow_id"], "flow_name" => $value["flow_name"]];
                        $searchResult[] = ["flow_id" => $value["flow_id"], "flow_name" => $value["flow_name"]];
                        $haveFlowCanAgencyFlag++;
                    }
                }
                if ($haveFlowCanAgencyFlag > 0) {
                    $listArray[] = $flowSortHasManyFlowTypeArray;
                    $sortArray[] = ["id" => $id, "title" => $title, "flow_sort_has_many_flow_type_count" => $haveFlowCanAgencyFlag];
                    $listTotal++;
                }
            }
            $result["list-relate-flow"] = $listArray;
            $result["sort"] = $sortArray;
            $result["search"] = $searchResult;

            if (isset($param["getDataType"]) && $param["getDataType"]) {
                if (isset($param["getDataType"]) && $param["getDataType"] == 'list-relate-flow') {
                    if (count($listArray)) {
                        return $listArray[0];
                    }
                } else {
                    return $result[$param["getDataType"]];
                }
            } else {
                return [];
            }
        }
    }

    /**
     * 【流程委托】 收回委托规则;
     * [支持批量删除，如果 $flowAgencyId 是,分割的字符串，且flow_id也是一样对应的串，就批量删除]
     *
     * @param  [type]        $data [flow_id;tack_back_run_flow:[传值1，就收回运行中流程]]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function recycleFlowAgencyRule($data, $flowAgencyId, $loginUserInfo)
    {
        $currentUser = $loginUserInfo['user_id'] ?? '';
        $flowId = $data["flow_id"];
        $flowIdArray = explode(",", trim($flowId, ","));
        $flowAgencyIdArray = explode(",", trim($flowAgencyId, ","));
        $tackBackRunFlow = isset($data['tack_back_run_flow']) && $data['tack_back_run_flow'] == 1 ? "1" : "0";
        $new_flow_id_string = "";
        // 可以回收的条件
        $canRecycleFlowSqlRaw = "(((saveform_time IS NULL AND host_flag = 0) OR (process_flag = '2' AND host_flag = 1)) OR process_flag = '1')";
        foreach ($flowAgencyIdArray as $key => $flowAgencyIdSingle) {
            if ($detailResult = app($this->flowAgencyRepository)->getDetail($flowAgencyIdSingle)) {
                $byAgentUser = $detailResult->by_agent_id ?? '';
                if ($currentUser != 'admin' && $byAgentUser != $currentUser) {
                    return ['code' => ['0x000006', 'common']];
                }
                $flow_id_string = $detailResult->flow_id_string;
                $new_flow_id_string = str_replace("," . $flowIdArray[$key] . ",", ",", "," . $flow_id_string);
                $new_flow_id_string = ltrim($new_flow_id_string, ",");
                app($this->flowAgencyRepository)->updateData(["flow_id_string" => $new_flow_id_string], ["flow_agency_id" => $flowAgencyIdSingle]);
                // 删除 flow_agency_detail 的数据
                app($this->flowAgencyDetailRepository)->deleteByWhere(["flow_agency_id" => [$flowAgencyIdSingle], "flow_id" => [$flowIdArray[$key]]]);
                $by_agent_id = $detailResult->by_agent_id;
                $agent_id = $detailResult->agent_id;
                // 收回运行中的流程
                if ($tackBackRunFlow == 1) {
                    // 收回有委托链的委托
                    if ($flowProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList(["flow_id" => $flowIdArray[$key], "agencyDetailInfo" => true, "whereRaw" => [$canRecycleFlowSqlRaw]])) {
                        if ($flowProcessObject->count()) {
                            $flowProcessArray = $flowProcessObject->toArray();
                            foreach ($flowProcessArray as $key => $flowRunProcess) {
                                if (count($flowRunProcess['flow_run_process_has_many_agency_detail']) == 0) {
                                    continue;
                                }
                                $flowRunProcessId = $flowRunProcess['flow_run_process_id'];
                                $flowRunId = $flowRunProcess['run_id'];
                                $joinUserIds = [];
                                //有委托链，本人在委托链中
                                foreach ($flowRunProcess['flow_run_process_has_many_agency_detail'] as $agencyDetail) {
                                    if ($agencyDetail['by_agency_id'] == $by_agent_id) {
                                        // 删除委托链收回的部分
                                        app($this->flowRunProcessAgencyDetailRepository)->deleteByWhere(['flow_run_process_id' => [$flowRunProcessId], 'sort' => [$agencyDetail['sort'], '>=']]);
                                        // 修改flow_run_process表
                                        $sort = $agencyDetail['sort'] > 0 ? $agencyDetail['sort'] - 1 : 0;
                                        $previousAgencyDetail = app($this->flowRunProcessAgencyDetailRepository)->getOneFieldInfo(['flow_run_process_id' => [$flowRunProcessId], 'sort' => [$sort]]);

                                        if ($previousAgencyDetail) { // 连续委托
                                            $flow_agency_id = $previousAgencyDetail->flow_agency_id > 0 ? $previousAgencyDetail->flow_agency_id : null;
                                            $agent_way = $previousAgencyDetail->type;
                                            $newByAgentId = $by_agent_id == $flowRunProcess['by_agent_id'] ? "" : $flowRunProcess['by_agent_id'];
                                            app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["user_id" => $by_agent_id, "by_agent_id" => $newByAgentId, "process_time" => null, "process_flag" => '1', "saveform_time" => null,
                                                'flow_agency_id' => $flow_agency_id, 'agent_way' => $agent_way], "wheres" => ['flow_run_process_id' => [$flowRunProcessId]]]);
                                            $joinUserIds[] = $newByAgentId;
                                        } else { // 一级委托
                                            app($this->flowRunProcessRepository)->updateFlowRunProcessData(["data" => ["user_id" => $by_agent_id, "by_agent_id" => '', "process_time" => null, "process_flag" => '1', "saveform_time" => null, "transact_time" => null,
                                                'flow_agency_id' => null, 'agent_way' => 0], "wheres" => ["flow_run_process_id" => [$flowRunProcessId]]]);
                                        }
                                        $joinUserIds[] = $by_agent_id;
                                        // 取消委托 如果当前节点所有办理人均未查看 ，则上一步主办的PRCS_FLAG变成3
                                        $this->restoreLastProcessFlagToThree($flowRunId, $flowRunProcess['process_id']);
                                    }
                                }
                                // 重新计算每个人的user_last_setp_flag
                                app($this->flowParseService)->updateUserLastStepsFlag($flowRunId, $joinUserIds);
                            }
                        }
                    }
                }
            }
        }
        // 查询更新过的委托是否还有流程，如果没有，更新它的 status 值
        app($this->flowAgencyRepository)->updateFlowAgencyData(["data" => ["status" => '1'], "wheres" => ["flow_id_string" => ['']], "whereIn" => [$flowAgencyIdArray]]);
        return "1";
    }

    /**
     * 【流程委托】 收回全部委托规则[我的委托、被委托、其他委托]
     *
     * @param  [type]        $data
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function recycleAllOfFlowAgencyRule($data, $loginUserInfo = [])
    {
        $agencyType = $data["agencyType"];
        $tackBackRunFlow = isset($data['tack_back_run_flow']) && $data['tack_back_run_flow'] == 1 ? "1" : "0";
        // 调用 flowAgencyRuleList 获取当前人员的委托规则列表
        $data["page"] = "0";
        $ruleList = $this->flowAgencyRuleList($data);
        if ($ruleList["total"] > 0) {
            $flowAgencyIdString = implode(",", $ruleList["list"]->pluck("flow_agency_id")->toArray());
            $flowIdString = implode(",", $ruleList["list"]->pluck("flow_id")->toArray());
            // 调用 recycleFlowAgencyRule 批量删除
            $recycledata["flow_id"] = $flowIdString;
            $recycledata['tack_back_run_flow'] = $tackBackRunFlow;
            $this->recycleFlowAgencyRule($recycledata, $flowAgencyIdString, $loginUserInfo);
            return "1";
        } else {
            // 当前委托规则列表没有数据
            return ['code' => ['0x030013', 'flow']];
        }
    }

    /**
     * 【流程委托】 获取委托规则列表;[带查询，可以支持:我的委托规则、被委托规则、其他委托规则]
     *
     * @param  [type]              $data [description]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function flowAgencyRuleList($data)
    {
        $userId = isset($data["user_id"]) ? $data["user_id"] : "";
        if ($userId == "") {
            return [];
        }
        $data = $this->parseParams($data);
        // [byAgency:被委托;myAgency:我的委托;otherAgency:其他委托]
        $agencyType = $data["agencyType"];
        $flowAgencySearchArray = [];
        $currentTime = date("Y-m-d H:i:s", time());
        unset($data['whereRaw']);
        if (isset($data['search']['status'])) {
            // 根据状态查询 1：已失效；2：生效中；3：待生效
            switch ($data['search']['status'][0]) {
                case '1':
                    $data['whereRaw'] = "((end_time != '0000-00-00 00:00:00') AND (end_time < '" . $currentTime . "'))";
                    break;
                case '2':
                    $data['whereRaw'] = "((end_time = '0000-00-00 00:00:00') OR (end_time > '" . $currentTime . "'))";
                    $data["search"]["start_time"] = [$currentTime, "<="];
                    break;
                case '3':
                    $data["search"]["start_time"] = [$currentTime, ">"];
                    break;
                default:
                    break;
            }
        }
        switch ($agencyType) {
            case 'myAgency':
                $data["init_search"]["by_agent_id"] = [$userId];
                $data["search"]["status"] = ["0"];
                break;
            case 'byAgency':
                $data["init_search"]["agent_id"] = [$userId];
                $data["search"]["status"] = ["0"];
                break;
            case 'otherAgency':
                // $data["init_search"]["by_agent_id"] = [$userId, '!='];
                // $data["init_search"]["agent_id"] = [$userId, '!='];
                $data["search"]["status"] = ["0"];
                break;
            default:
                return ['code' => ['0x000003', 'common']];
                break;
        }
        $flowAgencyDetail = $this->response(app($this->flowAgencyDetailRepository), 'getFlowAgencyDetailListTotal', 'getFlowAgencyDetailList', $data);
        // 设置委托规则状态 1：已失效；2：生效中；3：待生效
        if (!empty($flowAgencyDetail['list'])) {
            foreach ($flowAgencyDetail['list']->toArray() as $key => $value) {
                if ($value['end_time'] == '0000-00-00 00:00:00') {
                    if ($value['start_time'] <= $currentTime) {
                        $flowAgencyDetail['list'][$key]['rule_status'] = 2;
                    } else {
                        $flowAgencyDetail['list'][$key]['rule_status'] = 3;
                    }
                } else {
                    if (($value['start_time'] <= $currentTime) && ($value['end_time'] >= $currentTime)) {
                        $flowAgencyDetail['list'][$key]['rule_status'] = 2;
                    } elseif ($value['start_time'] >= $currentTime) {
                        $flowAgencyDetail['list'][$key]['rule_status'] = 3;
                    } elseif ($value['end_time'] <= $currentTime) {
                        $flowAgencyDetail['list'][$key]['rule_status'] = 1;
                    }
                }
            }
        }
        return $returnDate = ['total' => $flowAgencyDetail['total'], 'list' => $flowAgencyDetail['list']];
    }

    /**
     * 【流程委托】 获取委托记录列表;[带查询，可以支持:我的委托记录、被委托记录]
     *
     * @param  [type]              $data [description]
     *
     * @return [type]         [description]
     * @author dingpeng
     *
     */
    public function flowAgencyRecordList($data, $own)
    {
        $data = $this->parseParams($data);
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $returnData = $this->response(app($this->flowRunProcessRepository), 'getFlowAgencyRecordListTotal', 'getFlowAgencyRecordList', $data);
        if (!empty($returnData['list'])) {
            foreach ($returnData['list'] as $key => $value) {
                $max_process_id = $value["flow_serial"];
                $runId = $value['run_id'];
                $flowType = app($this->flowTypeRepository)->getDetail($value['flow_id']);
                $flowType = $flowType->flow_type ?? '';
                if ($flowType == "1") {
                    $returnData['list'][$key]['current_steps'] = app($this->flowRunService)->jointProcessName($value['run_id'], $value);
                    // 最新节点
                    // $freeProcessName = '';
                    // $flow_run_has_many_flow_run_process = $value["flow_run_process_has_many_flow_process"];
					/*
                    $flag = 0;
                    foreach ($flow_run_has_many_flow_run_process as $key_process => $value_process) {
                        if ($value_process["node_id"] == $max_process_id) {
                            // 自由节点时，获取所在步骤的名称
                            if (!$flag && isset($value_process['process_type']) && $value_process['process_type'] == 'free') {
                                $freeProcessStep = $value_process['free_process_step'] ?? 0;
                                $nodeId = $value_process['flow_process'];
                                if ($freeProcessStep) {
                                    $freeProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$nodeId,$freeProcessStep);
                                    if ($freeProcessInfo) {
                                        $returnData['list'][$key]['flow_run_process_has_many_flow_process'][$key_process]['process_name'] = $freeProcessInfo->process_name;
                                        $returnData['list'][$key]['free_process_name'] = $freeProcessInfo->process_name;
                                        $flag ++;
                                    }
                                }
					*/
                    // if (isset($value['process_type']) && $value['process_type'] == 'free' && $value['free_process_step']) {
                    //     $freeProcessStep = $value['free_process_step'];
                    //     $nodeId = $value['flow_process'];
                    //     if ($freeProcessStep) {
                    //         $freeProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$nodeId,$freeProcessStep);
                    //         if ($freeProcessInfo) {
                    //             $freeProcessName = $freeProcessInfo->process_name;
                    //         }
                    //     }
                    // }
                    // if ($freeProcessName) {
                    //     foreach ($flow_run_has_many_flow_run_process as $key_process => $value_process) {
                    //         if ($value_process["node_id"] == $value['flow_process']) {
                    //             $returnData['list'][$key]['flow_run_process_has_many_flow_process'][$key_process]['process_name'] = $freeProcessName;
                    //             continue;
                    //         }
                    //     }
                    // }
                }
            }
        }
        //20190805如果是我的委托则需要判断判断委托人是否已办，如果未办则需要有 催办权限
        // if (isset($data['agencyType']) &&  $data['agencyType']=='myAgency'   && isset($returnData['list']) && !empty($returnData['list']) ) {
        //     foreach ($returnData['list'] as $k => &$v) {
        //         $v['urge'] = 0;
        //         if ($v['host_flag'] == 1 && empty($v['deliver_time'])) {
        //             $v['urge'] = 1;
        //         }else if($v['host_flag'] == 0 && empty($v['saveform_time'])) {
        //             $v['urge'] = 1;
        //         }
        //     }
        // }
		if (!empty($returnData['list'])){
			$agencyList = [];
			$returnList = [];
			foreach ($returnData['list'] as $k => &$v) {
                $currentFlowRunProcess = $v;
                $currentFlowRunProcess['current_flow_run_process_info'] = $v;
                // 20200901，zyx,我的委托列表中的催办权限判断转移到这里，并调用统一的判断方法
                $v['urge'] = ($data['agencyType'] == 'myAgency') ? (int)app($this->flowRunService)->checkFlowLimitAuthority($currentFlowRunProcess, $own, [], 'myAgency') : 0;

				if ($v['host_flag'] == 1 && !empty($v['by_agent_id'])){
					$index = $v['run_id'].$v['user_id'].$v['by_agent_id'].$v['flow_process'].$v['process_id'];
					if (!isset($agencyList[$index])){
						$returnList[] = $v;
						$agencyList[$index] = $k;
					} else {
						if ($returnData['total'] > 1){
							$returnData['total']-- ;
						}
					}
				} else {
					$returnList[] = $v;
				}
			}
			$returnData['list'] = array_splice($returnList,($data['page']-1)*$data['limit'],$data['limit']);
		}
        return ['total' => $returnData['total'], 'list' => $returnData['list']];
    }

    /**
     * 【流程列表】 获取流程列表上特殊字段ID集合;
     *
     * @param  [type] string    $formId [表单ID]
     *
     * @return [type] array             [特殊字段ID集合]
     * @author 缪晨晨
     *
     */
    public function getFlowListSpecialField($formId)
    {
        // 记录需要金额大写和千位分隔的ID
        $amountInWordsIdArray = [];
        $thousandSeparateIdArray = [];
        $flowFormParseInfo = app($this->flowFormService)->getParseForm($formId, []);
        foreach ($flowFormParseInfo as $key => $value) {
            if (isset($value['control_attribute']['data-efb-format']) && $value['control_attribute']['data-efb-format'] == 'number') {
                if (isset($value['control_attribute']['data-efb-amount-in-words']) && $value['control_attribute']['data-efb-amount-in-words'] == 'true') {
                    $amountInWordsIdArray[] = $value['control_id'];
                }
                if (isset($value['control_attribute']['data-efb-thousand-separator']) && $value['control_attribute']['data-efb-thousand-separator'] == 'true') {
                    $thousandSeparateIdArray[] = $value['control_id'];
                }
            }
        }
        return [
            'amountInWordsIdArray' => $amountInWordsIdArray,
            'thousandSeparateIdArray' => $thousandSeparateIdArray,
        ];
    }

    /**
     * 【流程列表】 解析流程建模配置生成的列表数据;
     *
     * @param  [type] array     $data   [列表的一条数据]
     *
     * @param  [type] array     $specialFieldIdArray [特殊字段ID集合]
     *
     * @return [type] array             [处理后的列表的一条数据]
     * @author 缪晨晨
     *
     */
    public function parseFlowModuleFactoryList($data, $specialFieldIdArray)
    {
        $amountInWordsIdArray = isset($specialFieldIdArray['amountInWordsIdArray']) ? $specialFieldIdArray['amountInWordsIdArray'] : [];
        $thousandSeparateIdArray = isset($specialFieldIdArray['thousandSeparateIdArray']) ? $specialFieldIdArray['thousandSeparateIdArray'] : [];
        if (!empty($amountInWordsIdArray) || !empty($thousandSeparateIdArray)) {
            foreach ($data as $dataKey => $dataValue) {
                // 处理金额大写和千位分隔符的数据
                if (!empty($amountInWordsIdArray) && in_array($dataKey, $amountInWordsIdArray)) {
                    $data[$dataKey] = app($this->flowRunService)->digitUppercase($dataValue);
                }
                if (!empty($thousandSeparateIdArray) && in_array($dataKey, $thousandSeparateIdArray)) {
                    $parts = explode('.', $dataValue, 2);
                    $int = isset($parts[0]) ? strval($parts[0]) : '0';
                    $dec = isset($parts[1]) ? strval($parts[1]) : '';
                    $dec_len = strlen($dec) > 8 ? 8 : strlen($dec);
                    $dataValue = number_format(floatval($dataValue), $dec_len, '.', ',');
                    $data[$dataKey] = $dataValue;
                }
            }
        }
        return $data;
    }

    /**
     * 【流程列表】 获取待办事宜列表;
     * @param $data
     * @param $currentUserInfo
     * @return array
     */
    public function getTeedToDoList($data, $currentUserInfo)
    {
        $data["getListType"] = "todo";
        $data = $this->parseParams($data);
        if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($data['search']['flow_id'][0])) {
            if (!empty($data['search']['flow_id'][0]) && !is_array($data['search']['flow_id'][0])) {
                $flowTypeInfo = app($this->flowTypeRepository)->getDetail($data['search']['flow_id'][0]);
                $formId = $flowTypeInfo->form_id;
                if ($formId) {
                    $data['form_id'] = $formId;
                }
            }
        }
        // IP访问控制
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        // 处理挂起超时流程
        $hangupList = app($this->flowRunProcessRepository)->getHangupList($currentUserInfo['user_id']);
        if ($hangupList) {
            foreach ($hangupList as $value) {
                if ($value['cancel_hangup_time'] != '0000-00-00 00:00:00' && time() > strtotime($value['cancel_hangup_time'])) {
                    app($this->flowRunProcessRepository)->updateData(['hangup' => 0, 'cancel_hangup_time' => '0000-00-00 00:00:00'], ['flow_run_process_id' => [$value['flow_run_process_id']]]);
                    $todu_push_params = [];
                    $todu_push_params['receiveUser'] = $value['user_id'];
                    $todu_push_params['deliverTime'] = '';
                    $todu_push_params['deliverUser'] = $value['user_id'];
                    $todu_push_params['operationType'] = 'add';
                    $todu_push_params['operationId'] = '14';
                    $todu_push_params['flowId'] = $value['flow_id'];
                    $todu_push_params['runId'] = $value['run_id'];
                    $todu_push_params['viewtype'] = $value['process_time'] ? '1' : '0';
                    $todu_push_params['processId'] = $value['process_id'];
                    $todu_push_params['flowRunProcessId'] = $value['flow_run_process_id'];
                    // 操作推送至集成中心
                    app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                }
            }
        }

        $flowMonitorParams = $this->getMonitorParamsByUserInfo($currentUserInfo);
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];

        $returnData = $this->response(app($this->flowRunProcessRepository), 'getFlowRunHandleFlowListTotal', 'getFlowRunHandleFlowList', $data);
        $list = isset($returnData["list"]) ? $returnData["list"] : [];
        if (!empty($list)) {
            $flowListFieldIdArray = [];
            if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                // 记录需要金额大写和千位分隔的ID
                $flowListFieldIdArray = $this->getFlowListSpecialField($formId);
            }
            $runInfo = [];
            foreach ($list as $key => &$value) {
                if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                    $list[$key] = $this->parseFlowModuleFactoryList($value, $flowListFieldIdArray);
                }
                if (!empty($value['flow_id']) && !empty($value['flow_process'])) {
                    if (!app($this->flowParseService)->isShowFinishOption(['node_id' => $value['flow_process'],'flow_id' => $value['flow_id']])) {
                        $value['flow_run_process_has_one_flow_process']['end_workflow'] = 0;
                    }
                }
                $runId = $value["run_id"];
                $processId = $value["process_id"];
                $flowProcess = $value['flow_process'];
                // 这里获取委托信息列表，目前只能展示一个委托记录，如果当前节点有多个人委托给同一个人，展示效果还未处理，以后再优化
                $getCurrentProcessInfoParams = [
                    "run_id" => $runId,
                    "search" => ["process_id" => [$processId], "user_id" => [$currentUserInfo["user_id"]], 'by_agent_id' => ['', '!=']],
                    "returntype" => "array",
                    "order_by" =>["by_agent_id" =>'desc'],
                    "agencyDetailInfo" => true,
                    "fields" => ['by_agent_id']
                ];
                $maxProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList($getCurrentProcessInfoParams);
                if (!empty($maxProcessInfo[0])) {
                    $maxProcessInfo = $maxProcessInfo[0];
                }
                $list[$key]['flow_serial'] = $value['flow_serial'];
                $list[$key]['branch_serial'] = $value['branch_serial'];
                $list[$key]['process_serial'] = $value['process_serial'];
                $list[$key]['flow_run_process_id'] = $value['flow_run_process_id'];

                $list[$key]['max_flow_serial'] = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', [
                    'run_id' => [$value['run_id']]
                ]);

                $max_process_id = $value["flow_run_process_belongs_to_flow_run"]["max_process_id"];
                // 当前步骤
                $flowType = $value['flow_run_process_belongs_to_flow_run']['flow_run_has_one_flow_type']['flow_type'];
                if ($flowType == 1) {
                    $orderNo = app($this->flowRunService)->getTargetStepsOrderNo($value['flow_serial'], $value['branch_serial'], $value['process_serial']);
                    if ($value['process_type'] == 'free' && $value['free_process_step']) {
                        $list[$key]['current_steps'] = $orderNo . ': ' . app($this->flowRunService)->getFreeProcessName($value['run_id'], $value['flow_process'], $value['free_process_step']);
                    } else {
                        $list[$key]['current_steps'] = $orderNo . ': ' . $value["flow_run_process_has_one_flow_process"]["process_name"];
                    }
                } else {
                    $list[$key]['current_steps'] = $value['flow_serial'];
                }

                $maxFlowRunProcess = [];
                if (isset($value['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process'][0])) {
                    $maxFlowRunProcess = [$value['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process'][0]];
                }
                // 判断是否有主办人
                if ($value['host_flag'] == 1 ) {
                    $list[$key]['has_host'] = true;
                }else {
                    $list[$key]['has_host'] = false;
                    $CurrentProcessInfoParams = [
                        "search" => ["run_id" => [$runId], "process_id" => [$processId], 'host_flag' => [1]],
                        "returntype" => "count",
                    ];
                    if (app($this->flowRunProcessRepository)->getFlowRunProcessList($CurrentProcessInfoParams)) {
                        $list[$key]['has_host'] = true;
                    }
                }
                // 20200826，催办权限,只判断当前这条数据
                $tmpFlowRunInfo = $value;
                $tmpFlowRunInfo['flow_run_process_list'] = $value['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process'];
                $tmpFlowRunInfo['current_flow_run_process_info'] = $value;
                $tmpFlowRunInfo['flow_run_info_detail'] = $list[$key]['flow_run_process_belongs_to_flow_run'];
                $tmpFlowRunInfo['current_flow_run_process_info']['flow_run_process_has_one_flow_process'] = $list[$key]['flow_run_process_has_one_flow_process'];
                $list[$key]["allow_urge"] = (int)app($this->flowRunService)->checkFlowLimitAuthority($tmpFlowRunInfo, $currentUserInfo, $monitorRules, 'todo');

                // 进行查询，查找：1、所在步骤是否是被退回的，以及相关信息
                if ($value['is_back'] == 1) {
                    $list[$key]['isBack'] = 1;
                    $list[$key]['sendBackUser'] = $value['send_back_user'];
                    $list[$key]['sendBackUserName'] = $value['flow_run_process_has_one_send_back_user']['user_name'] ?? '';
                } else {
                    $list[$key]['isBack'] = 0;
                    $list[$key]['sendBackUser'] = '';
                    $list[$key]['sendBackUserName'] = '';
                }
                // 这地儿好像有个坑，没判断主办人
                $searchProcessId = $max_process_id - 1;
                $isConcurrentFlow = app($this->flowParseService)->isConcurrentFlow($list[$key]['flow_id']);
                $free_process_step = $list[$key]['free_process_step'];
                $searchProcessId = $list[$key]['process_id'] - 1;
                if ($isConcurrentFlow){
                    $processInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList(["run_id" => $runId, "search" => ["process_id" => [$list[$key]['process_id']],"flow_process" => [$list[$key]['flow_process']]], "returntype" => "first", "order_by" => ["host_flag" => "desc"], "relationMonitorSubmitUserInfo" => true]);
                    if (isset($processInfo->origin_process)) {
                        $searchFlowProcess = $processInfo->origin_process;
                    }
                }
                $paramSearch = [
                    "run_id" => $runId,
                    "search" => [
                        "host_flag" => "1"
                    ],
                    "order_by"=>['process_id'=>'desc'],
                    "returntype" => "first",
                    "relationMonitorSubmitUserInfo" => true
                ];
                if (!empty($searchFlowProcess)) {
                    $paramSearch['search']['flow_process'] = [$searchFlowProcess];
                } else {
                    $paramSearch['search']['process_id'] = [$searchProcessId];
                }
                if ($free_process_step) {
                    $paramSearch['order_by'] = ['free_process_step'=>'desc'];
                    $paramSearch['search']['free_process_step'] = [$free_process_step - 1];
                }
                $lastProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList($paramSearch);
                if ($lastProcessInfo) {
                    $lastProcessInfo = $lastProcessInfo->toArray();
                } else {
                    $lastProcessInfo = [];
                }
                $list[$key]['last_process_info'] = $lastProcessInfo;
                // 计算催办
                $limitDate = $value["limit_date"];
                if ($limitDate && $limitDate != "0000-00-00 00:00:00") {
                    $limitDate = date("Y-m-d H:i:s", strtotime($limitDate));
                    $currentTime = date("Y-m-d H:i:s", time());
                    $limitLevelFlag = (strtotime($limitDate) - strtotime($currentTime)) / 86400;
                    $timeInterval = strtotime($limitDate) - strtotime($currentTime);
                    if ($timeInterval > 0) {
                        // 离催促时间还剩
                        $intervalString = trans("flow.0x030064") . " : ";
                    } else {
                        // 催促时间已过期
                        $intervalString = trans("flow.0x030065") . " : ";
                    }
                    $timeInterval = abs($timeInterval);
                    $intervalYear = floor($timeInterval / 31536000);
                    $intervalDay = floor(($timeInterval % 31536000) / 86400);
                    $intervalHour = floor(($timeInterval % 86400) / 3600);
                    $intervalMin = floor(($timeInterval % 3600) / 60);
                    $intervalSec = floor($timeInterval % 60);
                    if ($intervalYear) {
                        $intervalString .= $intervalYear . trans("flow.0x030000"); //年
                    }
                    if ($intervalDay) {
                        $intervalString .= $intervalDay . trans("flow.0x030059"); //天
                    }
                    if ($intervalHour) {
                        $intervalString .= $intervalHour . trans("flow.0x030060"); //小时
                    }
                    if ($intervalMin) {
                        $intervalString .= $intervalMin . trans("flow.0x030061"); //分钟
                    }
                    if ($intervalSec) {
                        $intervalString .= $intervalSec . trans("flow.0x030062"); //秒
                    }
                    // 计算谁发送的催办
                    $limitSponsorInfo = [];
                    if (count($lastProcessInfo)) {
                        if (count($lastProcessInfo["flow_run_process_has_one_user"]) && $lastProcessInfo["deliver_time"]) {
                            $limitSponsorInfo = $lastProcessInfo["flow_run_process_has_one_user"];
                            $limitSponsorInfo["deliver_time"] = $lastProcessInfo["deliver_time"];
                        }
                    }
                } else {
                    $limitLevelFlag = "";
                    $intervalString = "";
                    $limitSponsorInfo = [];
                }
                // 计算委托 (@todo 这个逻辑需要优化 )
                if (count($maxProcessInfo)) {
                    if (isset($maxProcessInfo["by_agent_id"]) && $maxProcessInfo["by_agent_id"]) {
                        if ($userName = app($this->userService)->getUserName($maxProcessInfo["by_agent_id"])) {
                            $by_agent_user_name = "";
                            if ($maxProcessInfo["flow_run_process_has_one_user"] && count($maxProcessInfo["flow_run_process_has_one_user"])) {
                                $by_agent_user_name = $maxProcessInfo["flow_run_process_has_one_user"]["user_name"];
                            }
                            $list[$key]["agentInfo"] = [
                                "agent_user_name" => $userName,
                                "agent_user_id" => $maxProcessInfo["by_agent_id"],
                                "by_agent_user_name" => $by_agent_user_name
                            ];
                        }
                        if (isset($maxProcessInfo['flow_run_process_has_many_agency_detail']) && count($maxProcessInfo['flow_run_process_has_many_agency_detail']) > 0) {
                            //多级委托信息
                            $list[$key]["multipleAgentInfo"] = $maxProcessInfo['flow_run_process_has_many_agency_detail'];
                        }
                    }

                }
                $list[$key]["limitInfo"] = [
                    "limitLevelFlag" => $limitLevelFlag,
                    "limitIntervalString" => $intervalString,
                    "limitSponsorInfo" => $limitSponsorInfo,
                ];
                // $value['flow_run_process_has_one_flow_process'] = $list[$key]['flow_run_process_has_one_flow_process'] ?? [];
                // if (isset($list[$key]['flow_run_process_has_one_flow_process'])) unset($list[$key]['flow_run_process_has_one_flow_process']);
                unset($list[$key]['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process']);
            }
            $returnData["list"] = $list;
        }
        return $returnData;
    }
    /**
     * 【流程列表】 获取已办事宜列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getAlreadyDoList($data)
    {
        $data["getListType"] = "already";
        $data = $this->parseParams($data);
        if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($data['search']['flow_id'][0])) {
            if (!empty($data['search']['flow_id'][0]) && !is_array($data['search']['flow_id'][0])) {
                $flowTypeInfo = app($this->flowTypeRepository)->getDetail($data['search']['flow_id'][0]);
                $formId = $flowTypeInfo->form_id;
                if ($formId) {
                    $data['form_id'] = $formId;
                }
            }
        }
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $returnData = $this->response(app($this->flowRunProcessRepository), 'getFlowRunHandleFlowListTotal', 'getFlowRunHandleFlowList', $data);
        $list = isset($returnData["list"]) ? $returnData["list"] : [];
		$flowMonitorParams = $this->getMonitorParamsByUserInfo($data['user_info']);
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];
        if (!empty($list)) {
            $flowListFieldIdArray = [];
            if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                // 记录需要金额大写和千位分隔的ID
                $flowListFieldIdArray = $this->getFlowListSpecialField($formId);
            }
            foreach ($list as $key => &$value) {
                if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                    $list[$key] = $this->parseFlowModuleFactoryList($value, $flowListFieldIdArray);
                }
                /**
                 * @todo
                 * 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤序号。当冗余 max_flow_serial的逻辑处理完成后可以直接取，为了暂时兼容
                 * 方便调试，暂时使用
                 */
                $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', [
                    'run_id' => [$value['run_id']]
                ]);
                $list[$key]['max_flow_serial'] = $maxFlowSerial;
                $list[$key]['run_name'] = $value['flow_run_process_belongs_to_flow_run']['run_name'] ?? '';
                if ($value['flow_run_process_belongs_to_flow_run']) {
                    // 最新步骤，需要结合 flow_serial 和 process_id 最大值确定
                    $list[$key]["max_process_id"] = $value['flow_run_process_belongs_to_flow_run']['max_process_id'] ?? 0;
                    $flowType = $value['flow_run_process_belongs_to_flow_run']['flow_run_has_one_flow_type']['flow_type'];
                    $list[$key]["creator"] = $value['flow_run_process_belongs_to_flow_run']['creator'];
                    $runId = $value['run_id'];
                    // 查最新节点步骤
                    $list[$key]['latest_steps'] = app($this->flowRunService)->getLatestSteps($flowType, $runId, $maxFlowSerial);

                    $flowRunProcessList = $value['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process'];

                    // 最新步骤办理人
                    $current_handle_user_id = [];
                    $current_handle_user_name = '';
                    $checkUser = [];
                    $canLimit = 0;

                    $tmpFlowRunInfo = $value;
                    $tmpFlowRunInfo['flow_run_process_list'] = $flowRunProcessList;
                    // 获取整个流程的收回权限
                    $takeBackRes = app($this->flowRunService)->checkFlowRunTakeBackAuthority($tmpFlowRunInfo, $data['user_info'], $monitorRules);
                    $list[$key]['canTakeBack'] = $takeBackRes['canTakeBack'];
                    // 如果只有一个可以收回的节点，直接返回节点信息
                    if ($list[$key]['canTakeBack'] == 1) {
                        $list[$key]['process_info_to_take_back'] = $takeBackRes['processInfoToTakeBack'];
                    }
                    // 获取当前办理人
                    $handlerRes = app($this->flowParseService)->getStepHandlersBasedOnFlowRunProcessList($flowRunProcessList, [
                        'process_id' => app($this->flowRunService)->getMaxProcessIdBasedOnFlowRunProcessList($flowRunProcessList, $flowType, $maxFlowSerial),
                        'flow_serial' => $maxFlowSerial,
                    ]);
                    $list[$key]["handle_user_name_str"] = $handlerRes["handle_user_name_str"];
                    $list[$key]["handle_user_info_arr"] = $handlerRes["handle_user_info_arr"];

                    // 20200826，催办权限,只判断当前这条数据
                    $tmpFlowRunInfo['current_flow_run_process_info'] = $value;
                    $tmpFlowRunInfo['flow_run_info_detail'] = $value['flow_run_process_belongs_to_flow_run'];
                    $tmpFlowRunInfo['current_flow_run_process_info']['flow_run_process_has_one_flow_process'] = $value['flow_run_process_has_one_flow_process'];
                    $list[$key]["limit_button_flag"] = (int)app($this->flowRunService)->checkFlowLimitAuthority($tmpFlowRunInfo, $data['user_info'], $monitorRules);
                    unset($list[$key]['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process']);
                }
            }
            $returnData["list"] = $list;
        }
        return $returnData;
    }

    /**
     * 【流程列表】 获取办结事宜列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getFinishedList($data)
    {
        $data["getListType"] = "finished";
        $data = $this->parseParams($data);
        if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($data['search']['flow_id'][0])) {
            if (!empty($data['search']['flow_id'][0]) && !is_array($data['search']['flow_id'][0])) {
                $flowTypeInfo = app($this->flowTypeRepository)->getDetail($data['search']['flow_id'][0] , false , ['form_id']);
                $formId = $flowTypeInfo->form_id;
                if ($formId) {
                    $data['form_id'] = $formId;
                }
            }
        }
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $returnData = $this->response(app($this->flowRunProcessRepository), 'getFlowRunHandleFlowListTotal', 'getFlowRunHandleFlowList', $data);
        $list = isset($returnData["list"]) ? $returnData["list"] : [];
        if (!empty($list)) {
            $flowListFieldIdArray = [];
            if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                // 记录需要金额大写和千位分隔的ID
                $flowListFieldIdArray = $this->getFlowListSpecialField($formId);
            }
            foreach ($list as $key => &$value) {
                if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                    $value = $this->parseFlowModuleFactoryList($value, $flowListFieldIdArray);
                }
                /**
                 * @todo
                 * 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤。当冗余 max_flow_serial的逻辑处理完成后可以直接取，为了暂时兼容
                 * 方便调试，暂时使用
                 */
                $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', [
                    'run_id' => [$value['run_id']]
                ]);
                $list[$key]['max_flow_serial'] = $maxFlowSerial;
                // 最新节点步骤
                $flowType = $value["flow_run_process_belongs_to_flow_run"]["flow_run_has_one_flow_type"]["flow_type"];
                $list[$key]['latest_steps'] = app($this->flowRunService)->getLatestSteps($flowType, $value["run_id"], $maxFlowSerial);
                unset($value['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process']);
            }
            $returnData["list"] = $list;
        }
        return $returnData;
    }

    /**
     * 【流程列表】 获取我的请求列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getMyRequestList($data)
    {
        $data = $this->parseParams($data);
        if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($data['search']['flow_id'][0])) {
            if (!empty($data['search']['flow_id'][0]) && !is_array($data['search']['flow_id'][0])) {
                $flowTypeInfo = app($this->flowTypeRepository)->getDetail($data['search']['flow_id'][0] , false , ['form_id']);
                $formId = $flowTypeInfo->form_id;
                if ($formId) {
                    $data['form_id'] = $formId;
                }
            }
        }
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $returnData = $this->response(app($this->flowRunRepository), 'getFlowRunMyRequestListTotal', 'getFlowRunMyRequestList', $data);
        $list = $returnData["list"] ?? [];
        if (!empty($list)) {
            $flowListFieldIdArray = [];
            if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                // 记录需要金额大写和千位分隔的ID
                $flowListFieldIdArray = $this->getFlowListSpecialField($formId);
            }
            //20191225,zyx,新的收回逻辑，我的请求列表也考虑监控收回权限
            // 获取监控配置参数
            $flowMonitorParams = $this->getMonitorParamsByUserInfo($data['user_info']);
            if (empty($flowMonitorParams) || !isset($flowMonitorParams['monitor_params']) || empty($flowMonitorParams['monitor_params'])
                || !isset($flowMonitorParams['monitor_rules']) || empty($flowMonitorParams['monitor_rules'])) {
                $monitorRules = [];
            } else {
                $monitorRules = $flowMonitorParams['monitor_rules'];
            }
            foreach ($list as $key => $value) {
                if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($formId)) {
                    $list[$key] = $this->parseFlowModuleFactoryList($value, $flowListFieldIdArray);
                }
                // 最新步骤的上一步提交时已触发的子流程
                // $list[$key]['has_son_flows'] = 0;
                // 20200723 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤。
                $list[$key]['max_flow_serial'] = $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', ['run_id' => [$value['run_id']]]);

                // 最新步骤
                $runId = $value['run_id'];
                $flowType = $value["flow_run_has_one_flow_type"]["flow_type"];
                $list[$key]['latest_steps'] = app($this->flowRunService)->getLatestSteps($flowType, $runId, $maxFlowSerial);
                $flow_run_has_many_flow_run_process = $value["flow_run_has_many_flow_run_process"];
                // 当前办理人
                $current_handle_user_id = [];
                $current_handle_user_name = '';
                $checkUser = [];
                // foreach ($flow_run_has_many_flow_run_process as $key_process => $value_process) {
                //     // 判断是否有当前人员可以办理的运行节点
                //     if (
                //         (!$canHandle) &&
                //         ($value_process['user_id'] == $data['user_info']['user_id']) &&
                //         ($value_process['user_run_type'] == 1)
                //     ) {
                //         $canHandle = true;
                //     }
                // }
                // $list[$key]['canHandle'] = $canHandle;
                // 获取当前用户可以办理的节点信息
                $canHandleRes = app($this->flowParseService)->checkFlowRunHandleAuthority($flow_run_has_many_flow_run_process, $data['user_info']);
                $list[$key]['canHandle'] = $canHandleRes['canHandle'];
                if ($canHandleRes['canHandle'] == 1) {
                    $list[$key]['flowRunProcessInfoToHandle'] = $canHandleRes['flowRunProcessInfoToHandle'];
                }

                $list[$key]['flow_run_process_list'] = $flow_run_has_many_flow_run_process;
                // 获取整个流程的收回权限
                $takeBackRes = app($this->flowRunService)->checkFlowRunTakeBackAuthority($list[$key], $data['user_info'], $monitorRules);
                $list[$key]['canTakeBack'] = $takeBackRes['canTakeBack'];
                // 如果只有一个可以收回的节点，直接返回节点信息
                if ($list[$key]['canTakeBack'] == 1) {
                    $list[$key]['process_info_to_take_back'] = $takeBackRes['processInfoToTakeBack'];
                }

                // 直接判断整个流程节点的催办权限
                $list[$key]['canLimit'] = app($this->flowRunService)->checkFlowLimitAuthority($list[$key], $data['user_info'], $monitorRules);
                unset($list[$key]['flow_run_process_list']);

                // 获取当前办理人
                $handlerRes = app($this->flowParseService)->getStepHandlersBasedOnFlowRunProcessList($flow_run_has_many_flow_run_process, [
                    'process_id' => app($this->flowRunService)->getMaxProcessIdBasedOnFlowRunProcessList($flow_run_has_many_flow_run_process, $flowType, $maxFlowSerial),
                    'flow_serial' => $maxFlowSerial,
                ]);
                $list[$key]["handle_user_name_str"] = $handlerRes["handle_user_name_str"];
                $list[$key]["handle_user_info_arr"] = $handlerRes["handle_user_info_arr"];
                unset($list[$key]["flow_run_has_many_flow_run_process"]);
                unset($list[$key]["flow_run_has_many_flow_run_step"]);
            }
            $returnData["list"] = $list;
        }

        return $returnData;
    }

    /**
     * 获取是否有回收流程的权限
     * @param $backUserId
     * @param $runId
     * @param $backProcessId
     * @return int
     */
    private function getTakeBackFlagInfo($backUserId, $runId, $backProcessId)
    {
        $getTakeBackFlagParams = [
            "run_id" => $runId,
            "search" => ["user_id" => [$backUserId], "process_id" => [$backProcessId], "process_flag" => [3], "host_flag" => [1]],
            "returntype" => "count",
        ];

        $getTakeBackFlagParams = [
            "run_id" => $runId,
            "search" => ["user_id" => [$backUserId], "process_id" => [$backProcessId], "host_flag" => [1]],
            "returntype" => "first",
        ];
        $previousProcessInfo = app($this->flowRunProcessRepository)->getFlowRunProcessList($getTakeBackFlagParams);
        if (empty($previousProcessInfo)) {
            // 上一节点的主办人才能收回
            return 0;
        } else {
            if (isset($previousProcessInfo->process_flag) && $previousProcessInfo->process_flag == '3') {
                return 1;
            } else {
                // 若下一节点的所有委托人 process_flag 均为1（未查看） 也可进行收回
                $getTakeBackFlagParams = [
                    "run_id" => $runId,
                    "search" => ["process_id" => [$backProcessId + 1]],
                    "returntype" => "array",
                ];
                $currentFlowRunProcessList = app($this->flowRunProcessRepository)->getFlowRunProcessList($getTakeBackFlagParams);
                if (empty($currentFlowRunProcessList)) {
                    return 0;
                }
                $backFlagInfo = 1;
                foreach ($currentFlowRunProcessList as $currentFlowRunProcess) {
                    if ($currentFlowRunProcess['process_flag'] != 1) {
                        $backFlagInfo = 0;
                        break;
                    }
                }
                return $backFlagInfo;
            }
        }
    }

    /**
     * 【流程列表】 获取流程监控列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getMonitorList($data, $userInfo = [])
    {
        $data = $this->parseParams($data);
        $data['user_id'] = $userInfo['user_id'];
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        // 获取监控配置参数
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($userInfo);
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];
        if (empty($flowMonitorParams) || !isset($flowMonitorParams['monitor_params']) || empty($flowMonitorParams['monitor_params'])
            || !isset($flowMonitorParams['monitor_rules']) || empty($flowMonitorParams['monitor_rules'])) {
            return ['total' => 0, 'list' => []];
        }
        $data['monitor_params'] = $flowMonitorParams['monitor_params'];
        $data['all_process'] = true;
        $returnData = $this->response(app($this->flowRunRepository), 'getFlowRunMonitorListTotal', 'getFlowRunMonitorList', $data);
        if ($returnData["total"]) {
            // 解析按钮
            $monitorRules = $flowMonitorParams['monitor_rules'];
            foreach ($returnData["list"] as $key => &$value) {
                //流程监控权限明细
                $value['allow_button'] = app($this->flowRunService)->checkFlowMonitorButtonDetails($monitorRules, $value['flow_id'], $value['creator']);
                //2019080如果是创建人和上一节点主办人或当前节点主办人不管有无设置权限都可以发出催办
                if ($data['user_id'] == $value['creator'] || $data['user_id'] == 'admin') {
                    $value['allow_button']['allow_urge'] = 1;
                }
                $runId = $value["run_id"];
                $flowType = $value["flow_run_has_one_flow_type"]["flow_type"];
                // 最新步骤
                $max_process_id = $value["max_process_id"];
                $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', ['run_id' => [$runId]]);
                $flow_process = 0;
                // 最新步骤未办理人
                $currentStepUnHandleUserIdArray = [];
                $currentStepUnHandleUserNameArray = [];
                $flow_run_has_many_flow_run_process = $value["flow_run_has_many_flow_run_process"];
                $value['is_on_branch_serial_and_to_do'] = app($this->flowParseService)->needChooseProcessToDo($runId); // 是否处于并发分支上且待办的标识
                $value['max_flow_serial'] = $maxFlowSerial;
                $value['latest_steps'] = app($this->flowRunService)->getLatestSteps($flowType, $runId, $maxFlowSerial);
                $value["maxHostFlag"] = "0";
                $value['maxHostFlagUserId'] = "";

                // 判断已接收未接收标识
                $hasReceived = 0;
                $opFlagIsExistResult = app($this->flowRunService)->opFlagIsExist(["run_id" => $runId, "process_id" => $max_process_id]);
                // 计数器，最多20个未办理人员
                // $unHandleCount = 0; // 这里需要展示全部人员，去掉计数器
                $headNodeToggleFlag = 1; // 最新节点是否在首节点的标识，1在首节点 0不在首节点
                $isFreeProcess = 0; // 最新节点是否为自由节点
                $freeProcessStep = 0; // 自由节点步骤号
                $freeProcessInfo = [];
                // 判断是否可以查看流程
                $value["can_view"] = 0;
                $value['end_workflow'] = 0;
                // 记录退回的一些信息
                $value['is_back'] = 0;
                $value['send_back_user'] = '';
                $value['send_back_process'] = '';
                $value['send_back_free_step'] = '';
                $value['process_id'] = '';
                $value['handle_user'] = '';
                // $value['has_son_flows'] = 0;
                // 记录首节点主办人
                $value['first_node_host_user'] = $value['creator'];
                $origin_process_ids = array_column($flow_run_has_many_flow_run_process , 'origin_process_id');
                foreach ($flow_run_has_many_flow_run_process as $key_process => $value_process) {
                    // 非并发分支结束权限处理 || 合并节点结束权限处理
                     if (($flowType == 1  && $value_process['process_id'] == $max_process_id && $value_process['flow_run_process_has_one_flow_process']['branch'] == 0  ) ) {
                        // 如果在分支上就一定要是合并节点
                        if ( ($value_process['branch_serial'] && $value_process['flow_run_process_has_one_flow_process']['merge']) ||  !$value_process['branch_serial']) {
                            $value["end_workflow"] = $value_process["flow_run_process_has_one_flow_process"]['end_workflow'];
                            // 如果此时是强制合并节点，是否显示合并节点还需要判断其他分支是否到达
                            if ($value_process['flow_run_process_has_one_flow_process']['merge'] == 2   && $value["end_workflow"] == '1') {
                                 $isFinishedMergeProcess =  app($this->flowParseService)->isFinishedMergeProcess($value_process['flow_id'], $value_process['run_id'], $value_process['flow_process']);
                                  $value["end_workflow"] = $isFinishedMergeProcess ? 1 : 0;
                            }
                            if ($value["end_workflow"] == 1) {
                                if (!isset($value["over_process_id"]) || (isset($value["over_process_id"]) && $value_process['process_id'] > $value["over_process_id"])) {
                                    $value["over_flow_process"] = $value_process['flow_process'];
                                    $value["over_process_id"]  = $value_process['process_id'];
                                }
                            }
                        }
                    }
                    /**
                     * 查看权限判断 1 判断是否是流程办理参与人 2 判断是否是被抄送人 3 判断是否是被委托人
                     */
                    // 判断是否是流程办理参与人
                    if ($value_process['user_id'] == $data['user_id'] || $value_process['by_agent_id'] == $data['user_id']) {
                        $value["can_view"] = 1;
                    }
                    // 判断是否是被委托人
                    foreach ($value_process['flow_run_process_has_many_agency_detail'] as $v) {
                        if ($v['user_id'] == $data['user_id'] || $v['by_agency_id'] == $data['user_id']) {
                            $value['can_view'] = 1;
                        }
                    }
                    // 判断是否是被抄送人
                    if ($value["can_view"] == 0) {
                        $copyUserCount = app($this->flowCopyRepository)->getTotal(['search' => ['by_user_id' => [$data['user_id']], 'run_id' => [$value['run_id']]]]);
                        if ($copyUserCount) {
                            $value["can_view"] = 1;
                        }
                    }

                    if ($value['allow_button']['allow_urge'] != 1 && ( ($value_process['process_id'] + 1 == $value['max_process_id']) ||  ($value_process['process_id'] == $value['max_process_id']) ) && $value_process['user_id'] ==$data['user_id'] && $value_process['host_flag']==1) {
                        $value['allow_button']['allow_urge'] = 1;
                    }
                    // 最大步骤节点判断是否已接收
                    if ($value['max_process_id'] == $value_process['process_id']) {
                        if ($value_process['host_flag'] == "1" && $value_process['user_last_step_flag'] == 1) {
                            $value['flow_run_process_id'] = $value_process['flow_run_process_id'];
                        }
                        if ($opFlagIsExistResult) {
                            if ($value_process['host_flag'] == "1" && $value_process['process_time'] != null) {
                                $hasReceived++;
                            }
                        } else {
                            if ($value_process['process_time'] != null) {
                                $hasReceived++;
                            }
                        }
                    }
                    // 最大步骤主办人条目处理一些参数
                    if (
                        ($value_process["host_flag"] == "1") &&
                        ($value_process['process_id'] == $value['max_process_id'])
                    ) {
                        $value['maxHostFlagUserId'] = $value_process['user_id'];
                        $value["maxHostFlag"] = "1";
                        $value["free_process_step"] = $value_process['free_process_step'];
                        $value["freeProcessInfo"] = $value_process['flow_run_process_has_one_flow_process_free'];
                        //判断流程是否为退回流程 以及其信息
                        if (
                            !empty($value_process["send_back_user"]) &&
                            ($value_process["is_back"] == '1')
                        ) {
                            $value['is_back'] = 1;
                            $value['send_back_user'] = $value_process["send_back_user"];
                            $value['send_back_process'] = $value_process["send_back_process"];
                            $value['send_back_free_step'] = $value_process["send_back_free_step"];
                            $value['process_id'] = $value_process["process_id"];
                            $value['handle_user'] = $value_process["user_id"];
                        }
                    }
                    if ($value_process["process_id"] == $max_process_id) {
                        $flow_process = $value_process["flow_process"];
                    }
                    if ($flowType == "1") {
                        if ($value_process['process_type'] == 'free') {
                            $isFreeProcess = 1;
                            $freeProcessStep = $value_process['free_process_step'];
                            $freeProcessInfo = $value_process["flow_run_process_has_one_flow_process_free"];
                        }
                        if (isset($value_process["flow_run_process_has_one_flow_process"]) && isset($value_process["flow_run_process_has_one_flow_process"]["head_node_toggle"]) && $value_process["flow_run_process_has_one_flow_process"]["head_node_toggle"] != 1) {
                            $headNodeToggleFlag = 0;
                        }
                    } else {
                        // 自由流程 非首节点判断
                        if ($max_process_id > 1) {
                            $headNodeToggleFlag = 0;
                        }
                    }
                    $value["head_node_toggle"] = $headNodeToggleFlag;
                    if ($max_process_id == '1' || $value["head_node_toggle"] == '1') {
                        if ($value_process['host_flag'] == "1") {
                            $value['first_node_host_user'] = $value_process['user_id'];
                        }
                    }
                    //判断流程是否为退回流程 以及其信息
                    // if (
                    //     ($value_process["host_flag"] == '1') &&
                    //     !empty($value_process["send_back_user"]) &&
                    //     ($value_process["is_back"] == '1')
                    // ) {
                    //     $value['is_back'] = 1;
                    //     $value['send_back_user'] = $value_process["send_back_user"];
                    //     $value['send_back_process'] = $value_process["send_back_process"];
                    //     $value['send_back_free_step'] = $value_process["send_back_free_step"];
                    //     $value['process_id'] = $value_process["process_id"];
                    //     $value['handle_user'] = $value_process["user_id"];
                    // }
                }
                $value['flow_run_process_list'] = $flow_run_has_many_flow_run_process;
                // 获取整个流程的收回权限
                $takeBackRes = app($this->flowRunService)->checkFlowRunTakeBackAuthority($value, $userInfo, $monitorRules);
                $value['canTakeBack'] = $takeBackRes['canTakeBack'];
                // 如果只有一个可以收回的节点，直接返回节点信息
                if ($value['canTakeBack'] == 1) {
                    $value['process_info_to_take_back'] = $takeBackRes['processInfoToTakeBack'];
                }

                // 直接判断整个流程节点的催办权限
                $value['canLimit'] = app($this->flowRunService)->checkFlowLimitAuthority($value, $userInfo, $monitorRules);
                unset($value['flow_run_process_list']);

                // 计算退回，且不在首节点
                $value["back_transact_process_count"] = 0;
                if ($flowType == 1) {
                    $value["back_transact_process_count"] = $this->isMonitorCouldTurnBack($runId, $flow_run_has_many_flow_run_process , $value['flow_id']) ? 1 : 0;
                }
                // 最新节点为自由节点 计算退回
                if ($isFreeProcess && isset($value["free_process_step"]) && $value["free_process_step"]) {
                    if(isset($value["freeProcessInfo"]) && !empty($value["freeProcessInfo"])) {
                        if(isset($value["freeProcessInfo"]['back_type']) && ($value["freeProcessInfo"]['back_type'] == 2 || $value["freeProcessInfo"]['back_type'] == 3)){
                            $value["back_transact_process_count"] = 1;
                        }else {
                            $value["back_transact_process_count"] = 0;
                        }
                    }
                }

                // 最新步骤未办理人，先判断flow_serial，再判断process_id
                $handlerRes = app($this->flowParseService)->getStepHandlersBasedOnFlowRunProcessList($flow_run_has_many_flow_run_process, [
                    'process_id' => app($this->flowRunService)->getMaxProcessIdBasedOnFlowRunProcessList($flow_run_has_many_flow_run_process, $flowType, $maxFlowSerial),
                    'user_run_type' => 1,
                    'user_last_step_flag' => 1,
                    'flow_serial' => $maxFlowSerial,
                    ]);
                $value['handle_user_name_str'] = $handlerRes["handle_user_name_str"];
                $value['handle_user_info_arr'] = $handlerRes["handle_user_info_arr"];
                // $value["un_handle_user_id"] = $currentStepUnHandleUserNameArray;
                $value["flow_process"] = $flow_process;
                // 状态标识：1、未接收 2、已接收
                $value["has_received"] = ($hasReceived == 0) ? 1 : 2;
                // 当前登录用户是否存在于未办理人中
                $value["current_user_in_un_handle_user_flag"] = isset($userInfo['user_id']) && !empty($userInfo['user_id']) && in_array($userInfo['user_id'], $currentStepUnHandleUserIdArray) ? 1 : 0;
                $currentStepUnHandleUserIdStr = implode(',',  $currentStepUnHandleUserIdArray);
                $userInfo['user_id'] = isset($userInfo['user_id']) ? $userInfo['user_id']: '';
                if ($currentStepUnHandleUserIdStr == $userInfo['user_id']) {
                    $value['allow_button']['allow_urge'] = 0;
                }
                unset($value['flow_run_has_many_flow_run_process']);
            }
        }
        return $returnData;
    }

    /**
     * 判断监控人是否有退回权限
     * @param $runId
     * @param $flowRunProcess
     * @return bool
     */
    public function isMonitorCouldTurnBack($runId, $flowRunProcess , $flowId )
    {
            $branchGroupData  = array_group_by($flowRunProcess, 'branch_serial'); // 按分支分组。 key值为branch_serial
            $flowProcessNodesInfo  = app($this->flowParseService)->getFlowProcessInfo($flowId , false);
            $flowProcessNodesInfo = array_column($flowProcessNodesInfo , null ,'node_id');
            $origin_process = [];
            foreach ($flowRunProcess as $runKey => $runValue) {
                // 获取合并节点的所有来源，作为后续可以退回的依据
                if (isset($flowProcessNodesInfo[$runValue['flow_process']]['merge']) && $flowProcessNodesInfo[$runValue['flow_process']]['merge']) {
                    $mergeNode = $runValue['flow_process'];
                    array_push($origin_process, $runValue['origin_process']);
                }
            }
            if (isset( $mergeNode)) {
               $canBack =  app($this->flowParseService)->mergeHasBackTobranch($flowRunProcess , $mergeNode);
               $origin_process = array_intersect($origin_process, $canBack);
            }
            foreach ($branchGroupData as $k1 => $v1) {
                    $maxProcessId = collect($v1)->max('process_id'); // 每个分支最大步骤
                    $hasHostFlag = false; // 是否存在主办人
                    foreach ($v1 as $v) {
                        if ($maxProcessId  == $v['process_id'] && $v['host_flag'] == 1) {
                            $hasHostFlag = true;
                            break;
                        }
                    }
                    // 遍历每个分支，找出每个分支上的最大步骤
                    foreach ($v1 as $k2 => $v2) {
                       if ( $maxProcessId  == $v2['process_id'] && $v2['user_run_type'] == 1 && $v2["flow_run_process_has_one_flow_process"]["head_node_toggle"] == 0) {
                            // 如果是经办人，那么此时需要确定是否已经确定主办人，已经确定主办人，那么无需再做判断
                            if ($v2['host_flag'] == 0 &&  $hasHostFlag) {
                                continue;
                            }
                            $flowProcessInfo = isset($flowProcessNodesInfo[$v2['flow_process']]) ? $flowProcessNodesInfo[$v2['flow_process']] : [];
                            if (!empty($flowProcessInfo)
                                && isset($flowProcessInfo['process_to']) && !empty($flowProcessInfo['process_to'])
                                && isset($flowProcessInfo['sort']) && $flowProcessInfo['sort'] !== '') {
                                $processToArray = explode(",", trim($flowProcessInfo['process_to'], ","));
                                //  此处的合并节点需要做下特殊处理， 1没有走过的分支即使有退回连线也不能退回， 2 不能重复退回
                                if ($flowProcessInfo['merge']) {
                                    // 看来源分支，不是来源分支的要过滤掉
                                    $processToArray = array_intersect($origin_process, $processToArray);
                                }
                                //必须有指定的退回路线，即出口node_id且序号比自己小
                                $getBackProcessTotalParams = [
                                    'search' => [
                                        'node_id' => [$processToArray, 'in'],
                                        'sort' => [$flowProcessInfo['sort'], '<'],
                                    ],
                                ];
                                $hasBackProcess = app($this->flowProcessRepository)->getTotal($getBackProcessTotalParams);
                                if ($hasBackProcess) {
                                    return true;
                                }
                            }
                       }
                    }
            }

            return false;

    }

    /**
     * 【流程监控】 获取某个用户的可监控配置;
     *
     * @param  [array]      $userInfo [登录用户信息]
     *
     * @return [array]                [可监控的流程ID和监控范围（用户ID）]
     * @author 缪晨晨
     *
     */
    public function getMonitorParamsByUserInfo($userInfo, $flowId = '')
    {
        // 获取每个可监控的流程的可监控的创建人
        $monitorParams = ['monitor_params' => [], 'monitor_rules' => []];
        if (isset($userInfo['user_id']) && isset($userInfo['role_id']) && isset($userInfo['dept_id'])) {
            // 获取可监控流程的规则ID
            $manageUserRuleId = DB::table('flow_type_manage_user')->where('user_id', $userInfo['user_id'])->get()->pluck('rule_id')->toArray();
            $manageRoleRuleId = DB::table('flow_type_manage_role')->whereIn('role_id', $userInfo['role_id'])->get()->pluck('rule_id')->toArray();
            $monitorRuleIds = array_unique(array_merge($manageUserRuleId, $manageRoleRuleId));
            // 依据规则ID获取规则详情
            $allRuleInfo = DB::table('flow_type_manage_rule')
                ->select(['flow_type_manage_rule.*'])
                ->join('flow_type', 'flow_type.flow_id', '=', 'flow_type_manage_rule.flow_id')
                ->whereIn('rule_id', $monitorRuleIds)
                ->where('flow_type.allow_monitor', '1');
            if (!empty($flowId)) {
                // 如果传了某个流程ID，只返回这个流程的监控配置
                $allRuleInfo = $allRuleInfo->where('flow_type_manage_rule.flow_id', $flowId);
            }
            $allRuleInfo = $allRuleInfo->orderBy('rule_id', 'asc')->get()->toArray();
            if (empty($allRuleInfo)) {
                return $monitorParams;
            }
            foreach ($allRuleInfo as $key => $value) {
                $userIds = [];
                switch ($value->monitor_scope) {
                    case '0':
                        // 全体
                        $userIds = 'all';
                        break;
                    case '1':
                        // 同部门
                        $userIds = DB::table('user_system_info')->where('dept_id', $userInfo['dept_id'])
                            ->where('user_status', '!=', '2')
                            ->where('user_status', '>', '0')
                            ->get()->pluck('user_id')->toArray();
                        break;
                    case '2':
                        // 指定部门
                        $specifyDeptIds = DB::table('flow_type_manage_scope_dept')->where('flow_id', $value->flow_id)
                            ->where('rule_id', $value->rule_id)
                            ->get()->pluck('dept_id');
                        if (!empty($specifyDeptIds)) {
                            $userIds = DB::table('user_system_info')->whereIn('dept_id', $specifyDeptIds)
                                ->where('user_status', '!=', '2')
                                ->where('user_status', '>', '0')
                                ->get()->pluck('user_id')->toArray();
                        }
                        break;
                    case '3':
                        // 直接下属
                        $userIds = app($this->userService)->getSubordinateArrayByUserId($userInfo['user_id']);
                        $userIds = $userIds['id'];
                        break;
                    case '4':
                        // 所有下属
                        $getSubordinateParam = ['all_subordinate' => 1];
                        $userIds = app($this->userService)->getSubordinateArrayByUserId($userInfo['user_id'], $getSubordinateParam);
                        $userIds = $userIds['id'];
                        break;
                    case '5':
                        // 指定人员
                        $userIds = DB::table('flow_type_manage_scope_user')->where('flow_id', $value->flow_id)
                            ->where('rule_id', $value->rule_id)
                            ->get()->pluck('user_id')->toArray();
                        break;
                    default:
                        break;
                }

                if (!empty($userIds)) {
                    $monitorParams['monitor_params'][$value->rule_id] = [
                        'flow_id' => $value->flow_id,
                        'user_id' => $userIds,
                    ];
                    $monitorParams['monitor_rules'][$value->flow_id][$value->rule_id] = [
                        'flow_id' => $value->flow_id,
                        'rule_id' => $value->rule_id,
                        'user_id' => $userIds,
                        'allow_view' => $value->allow_view,
                        'allow_turn_back' => $value->allow_turn_back,
                        'allow_delete' => $value->allow_delete,
                        'allow_take_back' => $value->allow_take_back,
                        'allow_end' => $value->allow_end,
                        'allow_urge' => $value->allow_urge,
                    ];
                }
            }
        }
        return $monitorParams;
    }

    /**
     * 【流程列表】 获取超时查询列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getOvertimeList($data, $userInfo)
    {
        $data = $this->parseParams($data);
        $data['user_id'] = $userInfo['user_id'];
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        //获取流程监控信息
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($userInfo);
        $data['monitor_params'] = $flowMonitorParams['monitor_params'] ?? [];
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];
        if ($userInfo['user_id'] != 'admin') {
            $data['monitor_data'] =  app($this->flowRunRepository)->getFlowRunIdsByMonitorParams($data['monitor_params'] ,  $userInfo['user_id']);
        }
        $returnData = $this->response(app($this->flowRunProcessRepository), 'getFlowRunProcessOvertimeListTotal', 'getFlowRunProcessOvertimeList', $data);
        $list = $returnData["list"];
        if ($returnData["total"]) {
            foreach ($list as $key => $value) {
                $runId = $value['run_id'];
                $flowType = $value["flow_run_process_belongs_to_flow_type"]["flow_type"];

                // 20200723 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤。
                $value['max_flow_serial'] = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', ['run_id' => [$value['run_id']]]);

                //判断是否可催办
                $currentFlowRunInfo = $value;
                $currentFlowRunInfo['current_flow_run_process_info'] = $value;
                $currentFlowRunInfo['flow_run_info_detail'] = $value['flow_run_process_belongs_to_flow_run'];
                $currentFlowRunInfo['flow_run_process_list'] = $value['flow_run_process_belongs_to_flow_run']['flow_run_has_many_flow_run_process'];
                $list[$key]['urge'] = (int)app($this->flowRunService)->checkFlowLimitAuthority($currentFlowRunInfo, $userInfo, $monitorRules, 'overtime');
                unset($value['flow_run_process_belongs_to_flow_run']);
                unset($currentFlowRunInfo);

                if (!isset($value['free_process_step']) || !$value['free_process_step']) {
                    $value['free_process_step'] = 0;
                }

                $list[$key]['current_steps'] = '';
                if ($flowType == '1') {
                    $list[$key]['current_steps'] = app($this->flowRunService)->jointProcessName($value['run_id'], $value);
                    // if ($value['host_flag'] == 1 && $value['process_type'] == 'free' && !empty($value['free_process_step'])) {
                    //     $freeProcessStep = $value['free_process_step'];
                    //     $nodeId = $value['flow_process'];
                    //     if ($freeProcessStep) {
                    //         $freeProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($runId,$nodeId,$freeProcessStep);
                    //         if ($freeProcessInfo) {
                    //             $list[$key]['free_current_process_name'] = $freeProcessInfo->process_name;
                    //         }
                    //     }
                    // } else {
                    //     $list[$key]['current_process_name'] = $value['flow_run_process_has_one_flow_process']['process_name'] ?? '';
                    // }
                } else {
                     $list[$key]['current_steps'] = $value['flow_serial'];
                }
                unset($list[$key]['flow_run_process_has_one_flow_process']);

                // 计算步骤状态&办理人员
                $processFlag = $value["process_flag"];
                $hostFlag = $value["host_flag"];
                if ($hostFlag == 1) {
                    $hostFlagString = trans("flow.0x030015"); //主办人
                    switch ($processFlag) {
                        case '1':
                            $processTypeString = trans("flow.0x030017"); //未查看
                            break;
                        case '2':
                            $processTypeString = trans("flow.0x030018"); //已查看
                            break;
                        case '3':
                        case '4':
                            $processTypeString = trans("flow.0x030019"); //已提交
                            break;
                        default:
                            break;
                    }
                } else {
                    $hostFlagString = trans("flow.0x030016"); //经办人
                    switch ($processFlag) {
                        case '1':
                            $processTypeString = trans("flow.0x030017"); //未查看
                            break;
                        case '2':
                        case '3':
                        case '4':
                            if (!$value["process_time"]) {
                                $processTypeString = trans("flow.0x030017"); //未查看
                            } else {
                                if (!$value["saveform_time"]) {
                                    $processTypeString = trans("flow.0x030018"); //已查看
                                } else {
                                    $processTypeString = trans("flow.0x030020"); //已办理
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
                $list[$key]["hostFlagString"] = $hostFlagString;
                $list[$key]["processTypeString"] = $processTypeString;
                //超时时间的计算
                $timeUsed = 0;
                if ($hostFlag == 1) {
                    if ($value["deliver_time"] && $value["process_time"]) {
                        $timeUsed = strtotime($value["deliver_time"]) - strtotime($value["limit_date"]);
                    } else if (!$value["deliver_time"] && $value["process_time"]) {
                        $timeUsed = time() - strtotime($value["limit_date"]);
                    } else {
                        $timeUsed = time() - strtotime($value["limit_date"]);
                    }
                } else {
                    if ($value["saveform_time"] && $value["process_time"]) {
                        $timeUsed = strtotime($value["saveform_time"]) - strtotime($value["limit_date"]);
                    } else if (!$value["saveform_time"] && $value["process_time"]) {
                        $timeUsed = time() - strtotime($value["limit_date"]);
                    } else {
                        $timeUsed = time() - strtotime($value["limit_date"]);
                    }
                }
                $day = floor($timeUsed / 86400);
                $hour = floor(($timeUsed % 86400) / 3600);
                $min = floor(($timeUsed % 3600) / 60);
                $sec = floor($timeUsed % 60);
                $overTimeString = "";
                if ($timeUsed) {
                    if ($day > 0) {
                        $overTimeString .= $day . trans("flow.0x030059");
                    }
                    //天
                    if ($hour > 0) {
                        $overTimeString .= $hour . trans("flow.0x030060");
                    }
                    //小时
                    if ($min > 0) {
                        $overTimeString .= $min . trans("flow.0x030061");
                    }
                    //分钟
                    if ($sec > 0) {
                        $overTimeString .= $sec . trans("flow.0x030062");
                    }
                    //秒
                }
                $list[$key]["overTimeString"] = $overTimeString;
                // 办理/查看页面默认展示哪个标签，标识字段提到外面来
                // if($value["flow_run_process_belongs_to_flow_type"]["flow_type_has_one_flow_others"]) {
                //     $defaultLabel = $value["flow_run_process_belongs_to_flow_type"]["flow_type_has_one_flow_others"]["lable_show_default"];
                //     $list[$key]["default_label"] = $defaultLabel;
                // }
            }
        }
        $returnData["list"] = $list;
        return $returnData;
    }

    /**
     * 【流程列表】 获取流程查询列表通过用户id和处理日期;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author wangzheng
     *
     */
    public  function getFlowSearchListByUserIdAndDate($userId = '' , $doneDate = '')
    {
        $params = [
            "search" => [],
            "returntype" => "array",
            'user_id' => $userId,
            'done_date' => $doneDate,
        ];
        $returnData = app($this->flowRunProcessRepository)->getFlowRunProcessList($params);
        $returnArray = [];
        $arr = [];
        foreach ($returnData as $processKey => $processValue) {
            //分析时间，重新处理
            $de = strtotime($processValue['deliver_time']);
            $re = strtotime($processValue['receive_time']);
            $sa = strtotime($processValue['saveform_time']);
            $pr = strtotime($processValue['process_time']);
            $defor =   date('Y-m-d' , $de );
            $refor =   date('Y-m-d' , $re );
            $safor =   date('Y-m-d' , $sa );
            $prfor =   date('Y-m-d' , $pr );
            $defori =   date('i' , $de );
            $refori =   date('i' , $re );
            $safori =   date('i' , $sa );
            $prfori =   date('i' , $pr );
            $arr['run_id']  = $processValue['run_id'];
            $arr['flow_id'] = $processValue['flow_id'];
            $arr['run_name'] = $processValue['run_name'];
            //如果是委托
            if (!empty($processValue['by_agent_id']) && $processValue['by_agent_id']==$userId ) {
                 if ($refor==$doneDate) {
                     $arr['operation_type'] = trans('flow.agency');
                     $arr['operation_time'] = date('H:i' , $re );
                     $arr['operation_timestamp'] = $re ;
                     array_push($returnArray, $arr);
                 }
                 //如果是新建判断是不是第一个节点
                 if ($processValue['process_id'] ==1) {
                    $cr = strtotime($processValue['created_at']);
                    if ($re - $cr  > 10 && $doneDate == date('Y-m-d' ,$cr )) {
                         $arr['operation_type'] = trans('flow.launch');
                         $arr['operation_time'] = date('H:i' , $cr );
                         $arr['operation_timestamp'] = $cr ;
                         array_push($returnArray, $arr);
                    }
                 }
            }
            if ($userId == $processValue['user_id']) {
                //如果是首节点
                if ($processValue['process_id'] ==1 ) {
                    if ($de) {
                        if ($de - $re >= 10 ) {
                            if ($refor == $doneDate) {
                                $arr['operation_type'] = trans('flow.launch');
                                $arr['operation_time'] = date('H:i' , $re );
                                $arr['operation_timestamp'] = $re ;
                                array_push($returnArray, $arr);
                            }
                            if ($defor == $doneDate) {
                                $arr['operation_type'] = trans('flow.examine');
                                $arr['operation_time'] = date('H:i' , $de );
                                $arr['operation_timestamp'] = $de ;
                                array_push($returnArray, $arr);
                            }
                        } else {
                            if ($defor == $doneDate) {
                                $arr['operation_type'] = trans('flow.launch');
                                $arr['operation_time'] = date('H:i' , $de );
                                $arr['operation_timestamp'] = $de ;
                                array_push($returnArray, $arr);
                            }
                        }
                    } else {
                        if ($refor == $doneDate) {
                            //新建
                            $arr['operation_type'] = trans('flow.launch');
                            $arr['operation_time'] = date('H:i' , $re );
                            $arr['operation_timestamp'] = $re ;
                            array_push($returnArray, $arr);
                        }
                    }
                } else {
                    if ($processValue['host_flag'] == 1) {
                        if ($pr) {
                            if ($de) {
                                if ($defor == $doneDate) {
                                    $arr['operation_type'] = trans('flow.examine');
                                    $arr['operation_time'] = date('H:i' , $de );
                                    $arr['operation_timestamp'] = $de ;
                                    array_push($returnArray, $arr);
                                }
                            }

                        }
                    } else if ($processValue['host_flag'] == 0) {
                        if ($pr) {
                            if ($sa) {
                                if ($safor == $doneDate) {
                                    $arr['operation_type'] = trans('flow.examine');
                                    $arr['operation_time'] = date('H:i' , $sa );
                                    $arr['operation_timestamp'] = $sa ;
                                    array_push($returnArray, $arr);
                                }

                            }
                        }
                    }
                }
            }
        }
        $sortArray = array_column($returnArray , 'operation_timestamp');
        array_multisort($sortArray, SORT_DESC, $returnArray);
        $data['list'] = $returnArray;
        $data['total'] = count($returnArray);
        return $data;
    }

    /**
     * 【流程列表】 获取流程查询列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getFlowSearchList($data, $userInfo = [])
    {
        $data = $this->parseParams($data);
        // 处理流程表单查询
        if (isset($data["formSearchParams"])) {
            $layoutListParam = [];
            $formSearchParams = $data["formSearchParams"];
            if (!is_array($data['formSearchParams'])) {
                $formSearchParams = json_decode($data['formSearchParams'], true);
            }
            if (count($formSearchParams)) {
                $formId = "";
                $flowId = isset($data["search"]["flow_id"]) ? $data["search"]["flow_id"][0] : false;
                if ($flowId !== false) {
                    $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
                    $formId = $flowTypeInfo->form_id;
                }
                $relationSqlStringInfo = $this->getRelationSqlStringFromSearchInfo($formSearchParams, $formId);
                if ($relationSqlStringInfo["mainTableWhereString"]) {
                    $data["mainTableWhereString"] = $relationSqlStringInfo["mainTableWhereString"];
                }
                // 处理会签控件查询条件解析为run_id,与后面的条件取交集
                $countersignRelateionRunId = [];
                $unionResult = [];
                foreach ($relationSqlStringInfo["countersignTableWhereString"] as $k => $v) {
                    $runId = DB::table('flow_countersign')->whereRaw($v)->get()->pluck("run_id")->toArray();
                    foreach (array_unique($runId) as $value) {
                        if (! in_array($value, $unionResult)) {
                            array_push($unionResult, $value);
                        } else {
                            array_push($countersignRelateionRunId, $value);
                        }
                    }
                }
                $countersignRelateionRunId = empty($countersignRelateionRunId) ? $unionResult : $countersignRelateionRunId;
                // 关联明细表
                if ($relationSqlStringInfo["detailTableWhereString"]) {
                    // $data["detailTableWhereString"] = $relationSqlStringInfo["detailTableWhereString"];
                    // $data["detailControlParentId"] = $relationSqlStringInfo["detailControlParentId"];
                    $layoutListParam["detailTableWhereString"] = $relationSqlStringInfo["detailTableWhereString"];
                    $layoutListParam["detailControlParentId"] = $relationSqlStringInfo["detailControlParentId"];
                }
                // 传递参数
                if ($formId) {
                    $data["formId"] = $formId;
                    $layoutListParam["formId"] = $formId;
                }
                if ($flowId) {
                    $data["flowId"] = $flowId;
                    $layoutListParam['flowId'] = $flowId;
                }
                // 查明细范围内的 run_id
                $layoutList = app($this->flowRunRepository)->getFlowZzzzFlowDataSearchList($layoutListParam);
                $layoutRunIdList = $layoutList->pluck("run_id")->toArray();
                if ($relationSqlStringInfo["countersignTableWhereString"]) { // 有会签查询取交集
                    $layoutRunIdList = array_intersect($countersignRelateionRunId, $layoutRunIdList);
                }
                $data["search"]["run_id"] = [$layoutRunIdList, "in"];
            }
        }
        // 获取监控配置参数
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($userInfo);
        $data['monitor_params'] = $flowMonitorParams['monitor_params'] ?? [];
        $monitorRules = $flowMonitorParams['monitor_rules'] ?? [];
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $returnData = $this->response(app($this->flowRunRepository), 'getFlowRunFlowSearchListTotal', 'getFlowRunFlowSearchList', $data);
        $list = isset($returnData["list"]) ? $returnData["list"] : [];
        if (isset($returnData["total"]) && $returnData["total"]) {
            // 获取监控配置参数
            $flowMonitorParams = $this->getMonitorParamsByUserInfo($userInfo);
            if (empty($flowMonitorParams) || !isset($flowMonitorParams['monitor_params']) || empty($flowMonitorParams['monitor_params'])
                || !isset($flowMonitorParams['monitor_rules']) || empty($flowMonitorParams['monitor_rules'])) {
                $monitorRules = [];
            } else {
                $monitorRules = $flowMonitorParams['monitor_rules'];
            }

            $flowListFieldIdArray = [];
            if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($data['form_id'])) {
                // 记录需要金额大写和千位分隔的ID
                $flowListFieldIdArray = $this->getFlowListSpecialField($data['form_id']);
            }
            foreach ($list as $key => &$value) {
                if (isset($data['flow_module_factory']) && $data['flow_module_factory'] && isset($data['form_id'])) {
                    $list[$key] = $this->parseFlowModuleFactoryList($value, $flowListFieldIdArray);
                }
                // 最新步骤
                $max_process_id = $value["max_process_id"];
                // 最新节点
                $flow_process = "";
                $flow_run_has_many_flow_run_process = $value["flow_run_has_many_flow_run_process"];
                // 判断是否有办理权限
                $value["can_handle"] = 0;
                // 判断是否有查看权限
                $value["can_view"] = 0;
                // 判断是否有委托权限
                $value["can_entrust"] = 0;
                //判断催办权限 , 分三种，创建人admin，监控人，上一节点主办人 ，上一节点委托人
                $value["can_urge"] = 0;
                // if ( ($value['creator'] == $data['user_id'] ||$data['user_id'] =='admin') ) {
                //     $value["can_urge"] = 1;
                // }
                $value['max_process_name'] = '';
                $currentStepHandleUserIdStr = '';

                $checkEntrustFlag = false;
                $firstProcessHostUser = $value['creator'];
                $flowType = $value['flow_run_has_one_flow_type']['flow_type'] ?? 1;
                //20191225，新的判断收回权限逻辑
                // $value['has_been_checked'] = 1;//最新节点是否已经有人查看
                // $value["take_back_flag"] = 0;//流程普通收回权限
                // $value["monitor_take_back_flag"] = 0;//流程监控收回权限
                // $value['has_son_flows'] = 0;
                // 20200723 并发逻辑下，统一使用 flow_serial 字段的最大值表示最新步骤。
                $value['max_flow_serial'] = $maxFlowSerial = app($this->flowRunProcessRepository)->getFieldMaxValue('flow_serial', ['run_id' => [$value['run_id']]]);
                // 查最新节点步骤
                $value['latest_steps'] = app($this->flowRunService)->getLatestSteps($flowType, $value['run_id'], $maxFlowSerial);

                $flag = 0;
                $flowProcessArray[$value['run_id']] = [];
                $value['is_on_branch_serial_and_to_do'] = 0; // 是否处于并发分支上多个相同办理人且待办的标识
                $current_handle_user_id = [];
                $current_handle_user_name = '';
                foreach ($flow_run_has_many_flow_run_process as $key_process => $value_process) {
                    /**
                     * 获取最新步骤办理人，在 flow_serial 最大值为最新步骤的前提下，且如果是处于并发流程上，就是所有分支上最大的 process_id 为最新步骤
                     */
                    // if (
                    //     $value_process['user_last_step_flag'] == 1
                    //     && $value_process['process_id'] == collect($flow_run_has_many_flow_run_process)->max('process_id')
                    //     && $value_process['flow_serial'] == $maxFlowSerial
                    // ) {
                    //     $current_handle_user_id[] = [
                    //         $value_process['flow_run_process_has_one_user']['user_id'],
                    //         $value_process['flow_run_process_has_one_user']['user_has_one_system_info']['user_status'],
                    //         $value_process['flow_run_process_has_one_user']['user_name']
                    //     ];
                    //     $current_handle_user_name .= $value_process['flow_run_process_has_one_user']['user_name'] . ',';
                    // }

                    // 是否处于并发分支上且待办
                    if ($value_process['branch_serial'] > 0 && $value_process['user_id'] == $data['user_id'] && $value_process['user_run_type'] == 1) {
                        $value['is_on_branch_serial_and_to_do']  = 1;
                    }
                    /**
                     * 查看权限判断 1、判断是否是流程办理参与人  2、判断是否是被委托人  3、判断是否是被抄送人
                     */
                    if ($value_process['user_id'] == $data['user_id'] || $value_process['by_agent_id'] == $data['user_id']) {
                        $value["can_view"] = 1;
                        // $value['flow_run_process_id'] = $value_process['flow_run_process_id'];
                    }
                    foreach ($value_process['flow_run_process_has_many_agency_detail'] as $v) {
                        if ($v['user_id'] == $data['user_id'] || $v['by_agency_id'] == $data['user_id']) {
                            $value['can_view'] = 1;
                            // $value['flow_run_process_id'] = $value_process['flow_run_process_id'];
                        }
                    }


                    // 办理权限
                    // if ($value_process['user_id'] == $data['user_id'] && $value_process['user_run_type'] == 1) {
                    //     $value["can_handle"] = 1;
                    //     $value['flow_run_process_id'] = $value_process['flow_run_process_id'];
                    // }

                    if ($value_process["process_id"] == $max_process_id) {
                        $value["flow_run_process_id"] = $value_process["flow_run_process_id"];
                        $maxProcessKey = $key_process;
                        $flow_process = $value_process["flow_process"];
                        if ($value_process["flow_run_process_has_one_flow_process"]) {
                            $value["max_process_name"] = $value_process["flow_run_process_has_one_flow_process"]["process_name"];
                            $value["head_node_toggle"] = $value_process["flow_run_process_has_one_flow_process"]["head_node_toggle"];

			                if ($flowType == "1") {
                                // 自由节点时，获取所在步骤的名称
                                if ($value_process["host_flag"] == 1 && !$flag && isset($value_process['process_type']) && $value_process['process_type'] == 'free') {
                                    $freeProcessStep = $value_process['free_process_step'];
                                    $nodeId = $value_process['flow_process'];
                                    if ($freeProcessStep) {
                                        $freeProcessInfo = app($this->flowRunService)->getFreeNodeStepInfo($value['run_id'],$nodeId,$freeProcessStep);
                                        if ($freeProcessInfo) {
                                            $value["max_process_name"] = $freeProcessInfo->process_name;
                                            $value["free_max_process_name"] = $freeProcessInfo->process_name;
                                            $value["current_free_step_id"] = $freeProcessStep;
                                            $flag ++;
                                        }
                                    }
                                }
                            }
                        }
                        // if ($value_process["by_agent_id"] == $data['user_id'] && $value['current_step'] != 0) {
                        //     $value["can_urge"] = 1;
                        // }
                        //当前主办人催办
                        // if ($value_process["user_id"] ==  $data['user_id'] && $value_process['host_flag'] == 1 && $currentStepHandleUserIdStr!=$data['user_id']) {
                        //       $value["can_urge"] = 1;
                        // }
                        // 并发节点可能有多个，循环查询会较慢
                        array_push($flowProcessArray[$value['run_id']], $value["max_process_name"]);
						// $dbData = app($this->flowRunProcessRepository)->getFlowRunProcessInfo(['flow_process'],['run_id'=>$value['run_id'],'process_id'=>$max_process_id],'flowRunProcessHasOneFlowProcess');
						// $flowProcessString = "";
						// $flowProcessArray = [];
						// foreach($dbData as $v){
						// 	if(!in_array($v['flow_run_process_has_one_flow_process']['process_name'],$flowProcessArray)){
						// 		$flowProcessArray[] = $v['flow_run_process_has_one_flow_process']['process_name'];
						// 		if(!empty($flowProcessString)){
						// 				$flowProcessString .= ",";
						// 		}
						// 		$flowProcessString .= $v['flow_run_process_has_one_flow_process']['process_name'];
						// 	}
						// }
						// if(!empty($flowProcessString)){
						// 	$list[$key]['max_process_name'] = $flowProcessString;
						// }
                    }
                    // else if ($value_process["user_id"] == $data['user_id']  &&   (($value_process["process_id"] + 1) == $max_process_id)  && $value_process['host_flag'] == 1 && $value['current_step'] != 0) {
                    //     //上一节点主办人催办
                    //     $value["can_urge"] = 1;
                    // }
                    if ($value_process['process_id'] == '1' && $value_process['host_flag'] == '1' && $value_process['user_id'] != $value['creator']) {
                        // 如果首节点的主办人不等于创建人，那就是委托的流程，删除权限根据被委托人判断
                        $firstProcessHostUser = $value_process['user_id'];
                    }
                    // 判断委托权限
                    if ($value_process['user_id'] == $data['user_id'] && !$checkEntrustFlag) {
                        $checkEntrustFlag = true;
                        if (empty($value_process['by_agent_id']) && $value_process['user_run_type'] == 1) {
                            if ($flowType == '1') {
                                $orderNo = app($this->flowRunService)->getTargetStepsOrderNo($value_process['flow_serial'], $value_process['branch_serial'], $value_process['process_serial']);
                                $processEntrust = $value_process["flow_run_process_has_one_flow_process"]["process_entrust"] ?? 0;
                                if ($processEntrust == '1') {
                                    $value["can_entrust"] = 1;
                                    $value['flow_serial'] = $value_process['flow_serial']; // 委托弹框的步骤标识
                                    if ($value_process['process_type'] == 'free' && $value_process['free_process_step']) {
                                        $value['current_steps'] =  $orderNo . ': ' . app($this->flowRunService)->getFreeProcessName($value_process['run_id'], $value_process['flow_process'], $value_process['free_process_step']);
                                    } else {
                                        $value['current_steps'] = $orderNo . ': ' . $value_process["flow_run_process_has_one_flow_process"]["process_name"];
                                    }
                                }
                            } else {
                                $value["can_entrust"] = 1;
                                $value['current_steps'] = $value['flow_serial'] = $value_process['flow_serial']; // 委托弹框的步骤标识
                            }
                            $value['process_id'] = $value_process['process_id'];
                        }
                    }
                    if ($value_process['user_id'] == $data['user_id'] && $value_process['user_run_type'] && $value_process['by_agent_id']) {
                        $value["can_entrust"] = 0; // 只要该用户有被委托或者替换的那么就不能再委托
                    }
                }
                if ($value["can_view"] == 0) {
                    $copyUserCount = app($this->flowCopyRepository)->getTotal(['search' => ['by_user_id' => [$data['user_id']], 'run_id' => [$value['run_id']]]]);
                    if ($copyUserCount) {
                        $value["can_view"] = 1;
                        // $value['flow_run_process_id'] = $value_process['flow_run_process_id'];
                    }
                }
                // 获取当前用户可以办理的节点信息
                $canHandleRes = app($this->flowParseService)->checkFlowRunHandleAuthority($flow_run_has_many_flow_run_process, ['user_id' => $data['user_id']]);
                $value['can_handle'] = $canHandleRes['canHandle'];
                if ($canHandleRes['canHandle'] == 1) {
                    $value['flowRunProcessInfoToHandle'] = $canHandleRes['flowRunProcessInfoToHandle'];
                }

                $value['flow_run_process_list'] = $flow_run_has_many_flow_run_process;
                // 获取整个流程的收回权限
                $takeBackRes = app($this->flowRunService)->checkFlowRunTakeBackAuthority($value, $userInfo, $monitorRules);
                $value['canTakeBack'] = $takeBackRes['canTakeBack'];
                // 如果只有一个可以收回的节点，直接返回节点信息
                if ($value['canTakeBack'] == 1) {
                    $value['process_info_to_take_back'] = $takeBackRes['processInfoToTakeBack'];
                }

                // 直接判断整个流程的催办权限
                $value['can_urge'] = app($this->flowRunService)->checkFlowLimitAuthority($value, $userInfo, $monitorRules);
                unset($value['flow_run_process_list']);

                /**
                * 获取最新步骤办理人，在 flow_serial 最大值为最新步骤的前提下，且如果是处于并发流程上，就是所有分支上最大的 process_id 为最新步骤
                */
                $handlerRes = app($this->flowParseService)->getStepHandlersBasedOnFlowRunProcessList($flow_run_has_many_flow_run_process, [
                    'process_id' => app($this->flowRunService)->getMaxProcessIdBasedOnFlowRunProcessList($flow_run_has_many_flow_run_process, $flowType, $maxFlowSerial),
                    'user_last_step_flag' => 1,
                    'flow_serial' => $maxFlowSerial,
                    ]);
                $value['handle_user_name_str'] = $handlerRes["handle_user_name_str"];
                $value['handle_user_info_arr'] = $handlerRes["handle_user_info_arr"];

				/*
                if (isset($flowProcessArray[$value['run_id']]) && is_array($flowProcessArray[$value['run_id']])) {
                     $value["max_process_name"] = implode( ',' ,array_unique( $flowProcessArray[$value['run_id']]));
                }
                // 上一节点已触发的子流程
                $value['has_son_flows'] = 0;
                if (isset($maxProcessKey) && isset($flow_run_has_many_flow_run_process[$maxProcessKey + 1])) {
                    $value['has_son_flows'] = $flow_run_has_many_flow_run_process[$maxProcessKey + 1]['sub_flow_run_ids'] ? 1 : 0;
                }
				*/
                // 记录第一步骤的主办人，用于判断删除按钮权限
                $value['first_process_host_user'] = $firstProcessHostUser;

                // 设置是否需要判断监控权限
                // 解析按钮
                $value['allow_button'] = [
                    'allow_view' => 0,
                    'allow_delete' => 0,
                    'allow_end' => 0,
                    'allow_urge' => 0,
                    'allow_turn_back' => 0,
                    'allow_take_back' => 0,
                ];
                $allowMonitor = $value['flow_run_has_one_flow_type']['allow_monitor'] ?? 0;
                if ($allowMonitor == '1' && !empty($monitorRules)) {
                    if (isset($monitorRules[$value['flow_id']]) && !empty($monitorRules[$value['flow_id']])) {
                        foreach ($monitorRules[$value['flow_id']] as $ruleKey => $ruleValue) {
                            if (!isset($ruleValue['user_id']) || empty($ruleValue['user_id'])) {
                                continue;
                            }
                            if ($ruleValue['user_id'] == 'all' || in_array($value['creator'], $ruleValue['user_id'])) {
                                $value['allow_button'] = [
                                    'allow_view' => $ruleValue['allow_view'],
                                    'allow_delete' => $ruleValue['allow_delete'],
                                    'allow_end' => $ruleValue['allow_end'],
                                    'allow_urge' => $ruleValue['allow_urge'],
                                    'allow_turn_back' => $ruleValue['allow_turn_back'],
                                    'allow_take_back' => $ruleValue['allow_take_back'],
                                ];
                                break;
                            }
                        }
                    }
                }
                //如果办理人只有自己，那么就不出现催办按钮
                if ($data['user_id'] == $currentStepHandleUserIdStr   ||  $value['current_step'] == 0) {
                    $value["can_urge"] = 0;
                    $value['allow_button']['allow_urge']  = 0;
                }
                unset($value['flow_run_has_many_flow_run_process']);
            }
        } else {
            $returnData["total"] = "0";
        }
        $returnData["list"] = $list;
        return $returnData;
    }

    /**
     * 【流程列表】 获取流程动态信息控件历史流程列表
     *
     * @author miaochenchen
     *
     * @since 2019-12-10
     *
     * @return [type]       [description]
     */
    public function getFlowDynamicInfoHistoryList($data)
    {
        $runId  = $data['run_id'] ?? '';
        $formId = $data['form_id'] ?? '';
        $userId = $data['user_id'] ?? '';
        $flowId = $data['flow_id'] ?? '';
        if (empty($formId) || empty($userId)) {
            return ['code' => ['0x000006', 'common']];
        }
        $data['search'] = $data['search'] ?? [];
        if (!empty($flowId)) {
            $data['search']['flow_run.flow_id'] = [$flowId];
        } else {
            return ['list' => [], 'total' => 0];
        }
        if (!empty($runId)) {
            $data['search']['flow_run.run_id']  = [$runId, '!='];
            $flowRunInfo = app($this->flowRunRepository)->getDetail($runId, false, ['creator']);
            $userId = $flowRunInfo->creator ?? $userId;
            $data['search']['flow_run.creator'] = [$userId];
        } else {
            $data['search']['flow_run.creator'] = [$userId];
        }
        $zzzzTableName      = 'zzzz_flow_data_' . $formId;
        $data['form_table'] = $zzzzTableName;
        $returnData = $this->response(app($this->flowRunRepository), 'getFlowDynamicInfoHistoryTotal', 'getFlowDynamicInfoHistoryList', $data);
        return $returnData;
    }

    /**
     * 获取流程选择器列表
     *
     * @param  [array] $data [查询参数]
     *
     * @return [array] [流程信息列表]
     * @author lixuanxuan
     *
     */
    public function getFlowSelectorList($data, $userInfo = []){
        $data = $this->parseParams($data);
        if(isset($data['search']) && isset($data['search']['run_id'])){
            $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
            // 获取流程列表基本信息
            $returnData = $this->response(app($this->flowRunRepository), 'getFlowRunListTotal', 'getFlowRunList', $data);
            $list = isset($returnData["list"]) ? $returnData["list"] : [];
            $total = isset($returnData["total"]) ? $returnData["total"] : 0;
            $returnList = [];
            if(count($list) > 0){
                foreach($list as $flowRun){
                    $returnList[] = [
                        'run_id'   => $flowRun['run_id'] ?? '',
                        'flow_id'  => $flowRun['flow_id'] ?? '',
                        'run_name' => $flowRun['run_name'] ?? '',
                    ];
                }
            }
            return [
                'list' => $returnList,
                'total'=> $total
            ];
        }else{
            // 获取有权限的流程列表
            return $this->getFlowSearchList($data,$userInfo);
        }
    }

    /**
     * 从查询参数里，收集&拼接关联查询用到的sql语句
     * @param $formSearchParams
     * @param int $formId
     * @return array
     */
    public function getRelationSqlStringFromSearchInfo($formSearchParams, $formId = 0)
    {
        // 收集&拼接表单主表的查询条件。需要关联 "zzzz_flow_data_$formId"
        $mainTableWhereString = "";
        // 收集会签控件的查询条件
        $countersigWhereItem = [];
        // 收集明细布局子控件的父控件的id，用来连表。
        $detailControlParentId = [];
        $detailControlParentIdUnique = [];
        $detailTableWhereString = '';
        foreach ($formSearchParams as $key => $value) {
            $whereItem = "";
            $searchValue = $value["search"];
            $relation = $value["relation"];
            // 控件属性
            $controlDisposeFlag = "";
            $control = $value["control"];
            $control_attribute = isset($control["control_attribute"]) ? $control["control_attribute"] : [];
            $control_type = isset($control["control_type"]) ? $control["control_type"] : "";
            $data_efb_format = isset($control_attribute["data-efb-format"]) ? $control_attribute["data-efb-format"] : "";
            $data_efb_control = isset($control_attribute["data-efb-control"]) ? $control_attribute["data-efb-control"] : "";
            $data_efb_source = isset($control_attribute["data-efb-source"]) ? $control_attribute["data-efb-source"] : "";
            if ($control_type == "text") {
                // 对日期时间类型控件的值的处理
                if ($relation != '7' && $relation != '8' && $relation != '9') {
                    // 开始为、结束为、包含 这三种模糊查询关系不转换用户输入的查询值
                    if ($data_efb_format == "date") {
                        $searchValue = date("Y-m-d", strtotime($searchValue));
                    } else if ($data_efb_format == "time") {
                        $searchValue = date("H:i", strtotime($searchValue));
                    } else if ($data_efb_format == "datetime") {
                        $searchValue = date("Y-m-d H:i", strtotime($searchValue));
                    }
                }
                if ($data_efb_format == "date" || $data_efb_format == "time" || $data_efb_format == "datetime") {
                    $controlDisposeFlag = "datetime";
                }
            }
            // 处理上传附件名称查询，转换为附件id
            if ($control_type == 'upload') {
                $searchValue = trim($searchValue);
                $params = [];
                if ($relation == 7 || $relation == 8 || $relation == 9) {
                    $params = ['search' => ['attachment_name' => [$searchValue, 'like']], 'page' => 0];
                } else if ($relation == 1) {
                    $params = ['search' => ['attachment_name' => [$searchValue]], 'page' => 0];
                }
                $attachmentRelSearch = app($this->attachmentRelSearchRepository)->getAttachmentList($params);
                if ($attachmentRelSearch->isNotEmpty()) {
                    $attachmentList = app($this->attachmentRelRepository)->getAttachmentRelList(['rel_id' => [$attachmentRelSearch->pluck('rel_id')->toArray(), 'in']]);
                    $searchValue = implode(',', $attachmentList->pluck('attachment_id')->toArray());
                } else {
                    $searchValue = 'attachment-file-not-exists'; // 模拟一条不存在的附件id，去匹配
                }

            }
            // 系统数据类型的查询的特殊处理，下拉框的都转变为_TEXT查询
            if (isset($control["control_type"]) && ($control["control_type"] == "data-selector" || $control["control_type"] == "select")) {
                $key .= "_TEXT";
            }
            // 会签控件
            if (isset($control["control_type"]) && $control["control_type"] == "countersign") {
                $countersignId = explode('_', $control["control_attribute"]["id"]);
                if (!empty($countersignId) && count($countersignId) == 2) {
                    $countersigWhereItem[]= 'control_id = "' . $countersignId[1] . '" AND countersign_content like "%' . $searchValue . '%"';
                }
            }
            if ($controlDisposeFlag != "datetime") {
                if ($relation == "2" || $relation == "3" || $relation == "4" || $relation == "5") {
                    $searchValue = floatval($searchValue);
                }
            } else {
                if ($relation == "2" || $relation == "3" || $relation == "4" || $relation == "5") {
                    $searchValue = "'" . $searchValue . "'";
                }
            }
            switch ($relation) {
                case 1:
                    if ($control_type == 'upload') {
                        $queryString = '(';
                        $param = explode(',', $searchValue);
                        foreach ($param as $k => $v) {
                            $queryString .= "`" . $key . "`" . " like '%" . $v . "%' or";
                        }
                        $whereItem .= rtrim($queryString, 'or') . ')';
                    } else {
                        $whereItem .= "`" . $key . "`" . " = '" . $searchValue . "'";
                    }
                    break;
                case 2:
                    // 如果是数值的比较的时候不能带引号 否则会按照字符串去作比较
                    if ($relation == "2" || $relation == "3" || $relation == "4" || $relation == "5") {
                        $whereItem .= "`" . $key . "`" . " > " . $searchValue;
                    } else {
                        $whereItem .= "`" . $key . "`" . " > '" . $searchValue . "'";
                    }
                    break;
                case 3:
                    if ($relation == "2" || $relation == "3" || $relation == "4" || $relation == "5") {
                        $whereItem .= "`" . $key . "`" . " < " . $searchValue;
                    } else {
                        $whereItem .= "`" . $key . "`" . " < '" . $searchValue . "'";
                    }
                    break;
                case 4:
                    if ($relation == "2" || $relation == "3" || $relation == "4" || $relation == "5") {
                        $whereItem .= "`" . $key . "`" . " >= " . $searchValue;
                    } else {
                        $whereItem .= "`" . $key . "`" . " >= '" . $searchValue . "'";
                    }
                    break;
                case 5:
                    if ($relation == "2" || $relation == "3" || $relation == "4" || $relation == "5") {
                        $whereItem .= "`" . $key . "`" . " <= " . $searchValue;
                    } else {
                        $whereItem .= "`" . $key . "`" . " <= '" . $searchValue . "'";
                    }
                    break;
                case 6:
                    $whereItem .= "`" . $key . "`" . " != '" . $searchValue . "'";
                    break;
                case 7:
                case 8:
                case 9:
                    $orSearchString = '';
                    $searchValue = trim($searchValue, " ");
                    if ($relation == 7) {
                        $orSearchString .= "`" . $key . "`" . " like '" . $searchValue . "%'";
                    } else if ($relation == 8) {
                        if ($control_type == 'upload') {
                            if ($searchValue) {
                                $orSearchString = $this->transUploadControlToSql($searchValue, $orSearchString, $relation, $key);
                            }
                        } else if ($control_type == 'countersign') {
                            $orSearchString .= '';
                        } else {
                            $searchValueArray = explode(' ', trim($searchValue));
                            if (!empty($searchValueArray)) {
                                $tempSearchValueStr = '';
                                foreach ($searchValueArray as $tempSearchValue) {
                                    $tempSearchValueStr .= '%'.$tempSearchValue;
                                }
                                if (!empty($tempSearchValueStr)) {
                                    $orSearchString .= "`" . $key . "`" . " like '" . $tempSearchValueStr . "%'";
                                }
                            }
                        }
                    } else if ($relation == 9) {
                        $orSearchString .= "`" . $key . "`" . " like '%" . $searchValue . "'";
                    }
                    $whereItem .= $orSearchString;
                    break;
            }
            $whereItem = $whereItem ? $whereItem . " AND " : $whereItem;
            $controlInfo = $value["control"];
            // 明细布局里面的控件
            if ($controlInfo["control_parent_id"]) {
                // 收集&拼接明细表的查询条件。
                $detailControlParentIdUnique[$key] = $whereItem;
                $detailControlParentId[] = $controlInfo["control_parent_id"];
            } else {
                $mainTableWhereString .= $whereItem;
            }
        }
        // 继续处理明细控件查询条件
        $parent_id = [];
        foreach ($detailControlParentIdUnique as $k => $v) {
            $pid = explode('_', $k);
            array_shift($pid );
            array_pop($pid );
            $pid = implode('_', $pid); // 存在二级明细时需要取中间部分
            if (! in_array($pid, $parent_id)) {
                array_push($parent_id, $pid);
                $detailTableName = 'zzzz_flow_data_' . $formId . '_' . $pid;
                $detailTableWhereString .= $detailTableName.  ".`amount` != 'amount' AND " . $v;
            } else {
                $detailTableWhereString .= $v;
            }
        }
        $mainTableWhereString = rtrim($mainTableWhereString, " AND ");
        $detailTableWhereString = rtrim($detailTableWhereString, " AND ");
        return [
            "mainTableWhereString" => $mainTableWhereString,
            "detailTableWhereString" => $detailTableWhereString,
            "detailControlParentId" => $detailControlParentId,
            "countersignTableWhereString" => $countersigWhereItem,
        ];
    }

    /**
     * 如果控件是附件上传，转对应的查询 SQL
     * @param string $itemValue 附件id字符串
     * @param $orSearchString 原sql字符串
     * @param $relation 匹配关系
     * @param $key 上传控件 key (如DATA_1 )
     * @return string
     */
    private function transUploadControlToSql($itemValue, $orSearchString, $relation, $key)
    {
        $queryUploadString = '(';
        $param = explode(',', $itemValue);
        foreach ($param as $k => $v) {
            if ($v) {
                switch ($relation) {
                    case 7:
                        $queryUploadString .= "`" . $key . "`" . "like '" . $v . "%' or";
                        break;
                    case 8:
                        $queryUploadString .= "`" . $key . "`" . "like '%" . $v . "%' or";
                        break;
                    case 9:
                        $queryUploadString .= "`" . $key . "`" . "like '%" . $v . "' or";
                        break;
                }
            }
        }
        $orSearchString .= rtrim($queryUploadString, 'or') . ')';
        return $orSearchString;

    }

    /**
     * 【流程类别列表】 获取待办事宜-流程类别列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getTeedToDoFlowSortList($data)
    {
        $data["getListType"] = "todo";
        if ($flowObject = app($this->flowSortRepository)->getFlowRunStepSortListRepository($data)) {
            return $this->filterFlowSortListForFlowRunStep($flowObject);
        } else {
            return [];
        }
    }

    /**
     * 【流程类别列表】 获取已办事宜-流程类别列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getAlreadyDoFlowSortList($data)
    {
        $data["getListType"] = "already";
        if ($flowObject = app($this->flowSortRepository)->getFlowRunStepSortListRepository($data)) {
            return $this->filterFlowSortListForFlowRunStep($flowObject);
        } else {
            return [];
        }
    }

    /**
     * 【流程类别列表】 获取办结事宜-流程类别列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getFinishedFlowSortList($data)
    {
        $data["getListType"] = "finished";
        if ($flowObject = app($this->flowSortRepository)->getFlowRunStepSortListRepository($data)) {
            return $this->filterFlowSortListForFlowRunStep($flowObject);
        } else {
            return [];
        }
    }

    /**
     * 过滤并处理待办已办办结菜单，中间列数据
     * @param  [type] $data [数据，object!]
     * @return [type]       [description]
     */
    public function filterFlowSortListForFlowRunStep($data)
    {
        $info = $data->toArray();
        $newInfo = [];
        if ($data->count()) {
            $newSortInfo = [];
            $controlFlows = app($this->ipRulesService)->accessFlowControl();
            foreach ($info as $key => $sortInfo) {
                $newTypeInfo = [];
                if (isset($sortInfo["flow_sort_has_many_flow_type"]) && count($sortInfo["flow_sort_has_many_flow_type"])) {
                    foreach ($sortInfo["flow_sort_has_many_flow_type"] as $flowTypeKey => $flowTypeInfo) {
                        if (!in_array($flowTypeInfo['flow_id'], $controlFlows)  && isset($flowTypeInfo["flow_type_has_many_flow_run_process"]) && count($flowTypeInfo["flow_type_has_many_flow_run_process"])) {
                            $newTypeInfo[] = $flowTypeInfo;
                        }
                    }
                }
                $sortInfo["flow_sort_has_many_flow_type"] = $newTypeInfo;
                $newSortInfo[] = $sortInfo;
            }
            foreach ($newSortInfo as $key => $sortInfo) {
                if (isset($sortInfo["flow_sort_has_many_flow_type"]) && count($sortInfo["flow_sort_has_many_flow_type"])) {
                    $newInfo[] = $sortInfo;
                }
            }
        }
        return $newInfo;
    }

    /**
     * 【流程类别列表】 获取我的请求-流程类别列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getMyRequestFlowSortList($data)
    {
        if ($flowObject = app($this->flowSortRepository)->getMyRequestSortListRepository($data)) {
            return $this->filterFlowSortListForFlowRun($flowObject);
            // return $flowObject->toArray();
        } else {
            return [];
        }
    }

    /**
     * 过滤并处理待办已办办结菜单，中间列数据
     * @param  [type] $data [数据，object!]
     * @return [type]       [description]
     */
    public function filterFlowSortListForFlowRun($data)
    {
        $info = $data->toArray();
        $newInfo = [];
        if ($data->count()) {
            $newSortInfo = [];
            $controlFlows = app($this->ipRulesService)->accessFlowControl();
            foreach ($info as $key => $sortInfo) {
                $newTypeInfo = [];
                if (isset($sortInfo["flow_sort_has_many_flow_type"]) && count($sortInfo["flow_sort_has_many_flow_type"])) {
                    foreach ($sortInfo["flow_sort_has_many_flow_type"] as $flowTypeKey => $flowTypeInfo) {
                        if ( !in_array($flowTypeInfo['flow_id'], $controlFlows)  && isset($flowTypeInfo["flow_type_has_many_flow_run"]) && count($flowTypeInfo["flow_type_has_many_flow_run"])) {
                            $newTypeInfo[] = $flowTypeInfo;
                        }
                    }
                }
                $sortInfo["flow_sort_has_many_flow_type"] = $newTypeInfo;
                $newSortInfo[] = $sortInfo;
            }
            foreach ($newSortInfo as $key => $sortInfo) {
                if (isset($sortInfo["flow_sort_has_many_flow_type"]) && count($sortInfo["flow_sort_has_many_flow_type"])) {
                    $newInfo[] = $sortInfo;
                }
            }
        }
        return $newInfo;
    }

    /**
     * 【流程类别列表】 获取流程监控-流程类别列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getMonitorFlowSortList($data, $userInfo = [])
    {
        $data = $this->parseParams($data);
        // 获取监控配置参数
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($userInfo);
        if (empty($flowMonitorParams) || !isset($flowMonitorParams['monitor_params']) || empty($flowMonitorParams['monitor_params'])) {
            return [];
        } else {
            $canMonitorFlowIds = [];
            foreach ($flowMonitorParams['monitor_params'] as $key => $value) {
                if (isset($value['flow_id']) && !empty($value['flow_id'])) {
                    $canMonitorFlowIds[] = $value['flow_id'];
                }
            }
            if (empty($canMonitorFlowIds)) {
                return [];
            }
            $data['monitor_flow_id'] = $canMonitorFlowIds;
        }
        $data['monitor_params'] = $flowMonitorParams['monitor_params'];
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();

        //格式化返回层级数据
        $newArray = [];

        if ($flowObject = app($this->flowSortRepository)->getMonitorSortListRepository($data)) {

            $flowArray = $flowObject->toArray();

            $i = 0;

            foreach ($flowArray as $v1) {
                $has = 0;
                foreach ($v1['flow_sort_has_many_flow_type'] as $v2) {
                    if (count($v2['flow_type_has_many_flow_run']) != 0) {
                        if ($has == 0) {
                            $i++;
                            $newArray[$i - 1]['id'] = $v1['id'];
                            $newArray[$i - 1]['title'] = $v1['title'];
                            $newArray[$i - 1]['flow_sort_has_many_flow_type'] = [];
                        }
                        $has = 1;
                        if (isset($newArray[$i - 1]['flow_sort_has_many_flow_type'])) {
                            array_push($newArray[$i - 1]['flow_sort_has_many_flow_type'], $v2);
                        }
                    }
                }
            }
        }

        return $newArray;

    }

    /**
     * 【流程类别列表】 获取超时查询-流程类别列表;
     *
     * @param  [type]          $data [description]
     *
     * @return [type]                [description]
     * @author dingpeng
     *
     */
    public function getOvertimeFlowSortList($data, $userInfo = [])
    {
        $data['controlFlows'] = app($this->ipRulesService)->accessFlowControl();
        $flowMonitorParams = $this->getMonitorParamsByUserInfo($userInfo);
        $data['monitor_params'] = $flowMonitorParams['monitor_params'] ?? [];
        if ($userInfo['user_id'] != 'admin') {
            $data['monitor_data'] =  app($this->flowRunRepository)->getFlowRunIdsByMonitorParams($data['monitor_params'] ,  $userInfo['user_id']);
        }
        if ($flowObject = app($this->flowSortRepository)->getOvertimeSortListRepository($data)) {
            $flowArray =  $flowObject->toArray();
            $newArray = [];
            $i = 0;
            foreach ($flowArray as $k1 => $v1) {
                $has = 0;
                foreach ($v1['flow_sort_has_many_flow_type'] as $k2 => $v2) {
                    if (count( $v2['flow_type_has_many_flow_run_process']) != 0) {
                         // 先插入分类
                         if ( $has == 0) {
                            $i++;
                            $newArray[$i-1]['id'] = $v1['id'];
                            $newArray[$i-1]['title'] = $v1['title'];
                            $newArray[$i-1]['flow_sort_has_many_flow_type'] = [];
                         }
                         $has = 1;
                         if ( isset($newArray[$i-1]['flow_sort_has_many_flow_type']) ) {
                            array_push($newArray[$i-1]['flow_sort_has_many_flow_type'], $v2);
                         }
                    }
                }
            }
            return   $newArray;

        } else {
            return [];
        }
    }

    /**
     * 【定义流程】 获取流程类别列表
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function getFlowSortListService($param, $userInfo)
    {
        $param = $this->parseParams($param);
        if (isset($param["getDataType"]) && $param["getDataType"] == "middle") {
            //获取有权限的流程分类列表
            $powerList = $this->getPermissionFlowSortList($userInfo);
            $unSortCount = app($this->flowTypeRepository)->getFlowDefineListTotal(['search' => ['flow_sort' => [0]]]);
            $unSortTitle  = trans("flow.unclassified");
            $unSortArray = [
                [
                    'id' => 0,
                    'hasFlow' => $unSortCount,
                    'noorder' => 0,
                    'title' => $unSortTitle,
                ],
            ];
            if ($powerList && count($powerList) > 0) {
                $powerList = $powerList->pluck('id')->toArray();
                $param['flow_sort'] = $powerList;
                if ($flowObject = app($this->flowSortRepository)->getFlowSortListForMiddle($param)) {
                    $flowArray = $flowObject->toArray();
                    foreach ($flowArray as $key => $value) {
                        $flowArray[$key]['hasFlow'] = app($this->flowTypeRepository)->getFlowDefineListTotal(['search' => ['flow_sort' => [$value['id']]]  ]);
                    }
                    if (isset($param['title']) && $param['title'] !== '') {
                        if (strpos($unSortTitle, $param['title']) !== false) {
                            return array_merge($unSortArray, $flowArray);
                        } else {
                            return $flowArray;
                        }
                    } else {
                        return array_merge($unSortArray, $flowArray);
                    }
                } else {
                    return $unSortArray;
                }
            } else {
                return $unSortArray;
            }
        } else {
            $result = $this->response(app($this->flowSortRepository), 'getFlowSortListRelateFlowTypeCountTotal', 'getFlowSortListRelateFlowTypeCount', $param);
            if (is_object($result['list'])) {
                $result['list'] = $result['list']->toArray();
            }
            if (!isset($param["getDataType"]) || $param["getDataType"] != "grid") {
                array_unshift($result['list'], ['id' => 0, 'title' => trans('flow.unclassified'), 'noorder' => 0, 'flow_sort_has_many_flow_type_count' => []]);
            }
            return $result;
        }
    }


    /**
     * 获取按组分类的高级查询分类名称列表。手机端调用
     * @param $param
     * @param $userInfo
     * @return array
     */
    public function getFlowListGroupByFlowSort($param, $userInfo)
    {
        $type = $param['getListType'] ?? '';
        return $this->getSortGroupData($type, $userInfo);
    }

    /**
     * 手机端待办、已办、办结列表的分组查询接口
     * @param $type
     * @param $userInfo
     * @return array
     */
    private function getSortGroupData($type, $userInfo)
    {

        $data['getListType'] = $type;
        $data['user_id'] = $userInfo['user_id'];
        $flowObject = app($this->flowSortRepository)->getFlowRunStepSortListRepository($data);
        $data = [];
        if (is_object($flowObject)) {
            $flowObject = $flowObject->toArray();
        }
        foreach ($flowObject as $k => $value) {
            if (!empty($value['flow_sort_has_many_flow_type'])) {
                $data[$k]['id'] = $value['id'];
                $data[$k]['title'] = $value['title'];
                $data[$k]['remark'] = '';
                foreach ($value['flow_sort_has_many_flow_type'] as $i => $item) {
                    $data[$k]['child'][$i]['id'] = $item['flow_id'];
                    $data[$k]['child'][$i]['title'] = $item['is_using'] ? $item['flow_name'] : $item['flow_name'] . " 【已停用】";
                    $remark = '';
                    if ($type == 'todo') {
                        if (!empty($item['flow_type_has_many_un_read_flow_run_process'])) {
                            $remark = current($item['flow_type_has_many_un_read_flow_run_process'])['total'] . '/' . current($item['flow_type_has_many_flow_run_process'])['total'];
                        } else {
                            if (empty($item['flow_type_has_many_flow_run_process'])) {
                                $remark = 0;
                            } else {
                                $remark = current($item['flow_type_has_many_flow_run_process'])['total'];
                            }
                        }
                    } else if ($type  == 'finished' || $type == 'already') {
                        if (empty($item['flow_type_has_many_flow_run_process'])) {
                            $remark = 0;
                        } else {
                            $remark = current($item['flow_type_has_many_flow_run_process'])['total'];
                        }
                    }
                    $data[$k]['child'][$i]['remark'] = $remark;
                }
            }
        }
        $data = collect($data)->values();
        return $data;
    }


    /**
     * 新建定义流程分类
     *
     * @param array $param [description]
     *
     * @return json 定义流程分类数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function createFlowSort($data)
    {
        $updateData = $data;
        $updateData["noorder"] = isset($data["noorder"]) ? $data["noorder"] : 0;

        $sortData = array_intersect_key($updateData, array_flip(app($this->flowSortRepository)->getTableColumns()));
        $flowSortObject = app($this->flowSortRepository)->insertData($sortData);
        // 清空表单分类信息redis缓存
        if(!empty(Redis::keys('flow_sort_power_list_*'))) {
            Redis::del(Redis::keys('flow_sort_power_list_*'));
        }
        $sortId = $flowSortObject->id;
        $priv_scope = $flowSortObject->priv_scope;
        if (!$priv_scope) {
            $manage_user = isset($data["manage_user"]) ? $data["manage_user"] : "";
            $manage_role = isset($data["manage_role"]) ? $data["manage_role"] : "";
            $manage_dept = isset($data["manage_dept"]) ? $data["manage_dept"] : "";

            // 插入分类权限数据
            if (!empty($manage_user)) {
                $userData = [];
                foreach ($manage_user as $v) {
                    $userData[] = ['type_id' => $sortId, 'user_id' => $v];
                }
                app($this->flowSortUserRepository)->insertMultipleData($userData);
            }
            if (!empty($manage_role)) {
                $roleData = [];
                foreach ($manage_role as $v) {
                    $roleData[] = ['type_id' => $sortId, 'role_id' => $v];
                }
                app($this->flowSortRoleRepository)->insertMultipleData($roleData);
            }
            if (!empty($manage_dept)) {
                $deptData = [];
                foreach ($manage_dept as $v) {
                    $deptData[] = ['type_id' => $sortId, 'dept_id' => $v];
                }
                app($this->flowSortDepartmentRepository)->insertMultipleData($deptData);
            }
        }
        return $sortId;
    }

    /**
     * 编辑定义流程分类
     *
     * @param array $data [description]
     *
     * @return json 定义流程分类数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function editFlowSort($data, $sortId)
    {
        $updateData = $data;
        $updateData["noorder"] = isset($data["noorder"]) ? $data["noorder"] : 0;

        $sortData = array_intersect_key($updateData, array_flip(app($this->flowSortRepository)->getTableColumns()));
        $flowFormSortObject = app($this->flowSortRepository)->updateData($sortData, ['id' => $sortId]);
        // 清空表单分类信息redis缓存
        if (!empty(Redis::keys('flow_sort_power_list_*'))) {
            Redis::del(Redis::keys('flow_sort_power_list_*'));
        }
        $manage_user = isset($data["manage_user"]) ? $data["manage_user"] : "";
        $manage_role = isset($data["manage_role"]) ? $data["manage_role"] : "";
        $manage_dept = isset($data["manage_dept"]) ? $data["manage_dept"] : "";
        // 清空分类权限数据
        $where = ['type_id' => [$sortId]];
        app($this->flowSortUserRepository)->deleteByWhere($where);
        app($this->flowSortRoleRepository)->deleteByWhere($where);
        app($this->flowSortDepartmentRepository)->deleteByWhere($where);
        if (!$data['priv_scope']) {
            // 插入分类权限数据
            if (!empty($manage_user)) {
                $userData = [];
                foreach ($manage_user as $v) {
                    $userData[] = ['type_id' => $sortId, 'user_id' => $v];
                }
                app($this->flowSortUserRepository)->insertMultipleData($userData);
            }
            if (!empty($manage_role)) {
                $roleData = [];
                foreach ($manage_role as $v) {
                    $roleData[] = ['type_id' => $sortId, 'role_id' => $v];
                }
                app($this->flowSortRoleRepository)->insertMultipleData($roleData);
            }
            if (!empty($manage_dept)) {
                $deptData = [];
                foreach ($manage_dept as $v) {
                    $deptData[] = ['type_id' => $sortId, 'dept_id' => $v];
                }
                app($this->flowSortDepartmentRepository)->insertMultipleData($deptData);
            }
        }
        return $sortId;
    }

    /**
     * 删除定义流程分类
     *
     * @param string $sortId [description]
     *
     * @return json 删除结果
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function deleteFlowSort($sortIdString)
    {
        foreach (explode(',', trim($sortIdString, ",")) as $key => $sortId) {
            if ($sortDataArray = $this->getFlowSortDetail($sortId)) {
                $listTotal = app($this->flowTypeRepository)->getFlowDefineListTotal(['search' => ['flow_sort' => [$sortId]]]);
                if ($listTotal > 0) {
                    return ['code' => ['0x000006', 'common']];
                }

                app($this->flowSortRepository)->deleteById($sortId);
                // 清空表单分类信息redis缓存
                if (!empty(Redis::keys('flow_sort_power_list_*'))) {
                    Redis::del(Redis::keys('flow_sort_power_list_*'));
                }
                // 清空分类权限数据
                $where = ['type_id' => [$sortId]];
                app($this->flowSortUserRepository)->deleteByWhere($where);
                app($this->flowSortRoleRepository)->deleteByWhere($where);
                app($this->flowSortDepartmentRepository)->deleteByWhere($where);
            }
        }
        return "1";
    }

    /**
     * 获取某条定义流程分类详情
     *
     * @param string $sortId [description]
     *
     * @return json 定义流程分类详情数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function getFlowSortDetail($sortId)
    {
        $detail = app($this->flowSortRepository)->getFlowSortDetail($sortId);

        if ($detail->priv_scope == 0) {
            $userList = $detail->flowSortHasManyMnamgeUser->pluck('user_id')->toArray();
            if (!empty($userList)) {
                $all_quit_user_lists = [];
                $all_quit_user_list = app($this->flowWorkHandOverService)->getAllOutUserList();
                foreach ($all_quit_user_list as $key => $value) {
                    if (in_array($value['user_id'], $userList)) {
                        $userList = array_diff($userList, [$value['user_id']]);
                    }

                }
            }
            $detail->manage_user = array_values($userList);
            $detail->manage_role = $detail->flowSortHasManyMnamgeRole->pluck('role_id');
            $detail->manage_dept = $detail->flowSortHasManyMnamgeDeptarment->pluck('dept_id');
        } else {
            $detail->manage_user = [];
            $detail->manage_role = [];
            $detail->manage_dept = [];
        }
        return $detail;
    }

    /**
     * 【定义流程】 获取流程表单列表
     * 这里要支持：1、定义流程表单列表，传grid，计算下属定义流程数量，可以分页，查询。2、定义流程，表单下拉框。
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function getFlowFormService($param, $userInfo)
    {
        $param = $this->parseParams($param);
        // 返回grid使用的数据
        if (isset($param["getDataType"]) && $param["getDataType"] == "grid") {
            //获取有权限的表单分类列表
            $powerList = $this->getPermissionFlowFormSortList($userInfo);
            if ($powerList && count($powerList) > 0) {
                $powerList = $powerList->pluck('id')->toArray();
                array_push($powerList, 0);
                $param['form_sort'] = $powerList;
            } else {
                $param['form_sort'] = [0];
            }
            return $this->response(app($this->flowFormTypeRepository), 'getFlowFormTotal', 'getFlowForm', $param);
        }
        // 返回选择器使用的数据
        else if (isset($param["getDataType"]) && $param["getDataType"] == "selector") {
            return $this->response(app($this->flowFormTypeRepository), 'getFlowFormTotal', 'getFlowForm', $param);
        } else {
            $param["page"] = "0";
            $param["returntype"] = "array";
            return app($this->flowFormTypeRepository)->getFlowForm($param);
        }
    }

    /**
     * 新建流程表单
     *
     * @param array $param [description]
     *
     * @return json 流程表单数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function createFlowForm($data, $own)
    {
        if (empty($data) || !is_array($data)) {
            return false;
        }
        $data['form_version_no'] = substr(microtime(true)*100, 0, 12);;
        $updateData = $data;
        $formData = array_intersect_key($updateData, array_flip(app($this->flowFormTypeRepository)->getTableColumns()));
        if (isset($formData['print_model']) && isset($formData['form_type'])) {
            $formData = app($this->flowFormService)->updateFormHtml($formData);
            if (isset($formData['code'])) {
                return $formData;
            }
        }

        $flowFormObject = app($this->flowFormTypeRepository)->insertData($formData);
        $formId = $flowFormObject->form_id;
        app($this->flowRunService)->recordFlowFormHistory($formId, $formData);

        // 创建zzzz_flow_data_$FORM_ID表
        app($this->flowRunService)->insertFlowFormStructure(["form_id" => $formId]);
        $data['user_id'] = $own['user_id'];
        // 处理解析后的表单控件，操作[流程数据表]和[明细字段数据表]
        app($this->flowRunService)->disposeFormControlStructure($data, $formId);
        return $formId;
    }

    /**
     * 编辑流程表单
     *
     * @param array $data [description]
     *
     * @return json 流程表单数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function editFlowForm($data, $formId, $own)
    {
        if (empty($data) || !is_array($data)) {
            return false;
        }
        // 验证表单分类
        if( isset($data['form_sort']) && $data['form_sort'] != 0 ) {
            // 验证表单分类权限
            $power = $this->getFormSortEditPermission($data['form_sort'], $own);
            if(!$power) {
                return ['code' => ['0x000006', 'common']];
            }
        }
        // 编辑表单分类时，验证权限
        if (isset($data['edit_type']) && $data['edit_type'] == 'editBaseInfo') {
            unset($data['edit_type']);
            app($this->flowFormTypeRepository)->updateData($data, ['form_id' => $formId]);
            return $formId;
        }
        $data['form_version_no'] = substr(microtime(true)*100, 0, 12);
        // formId=0时，表示为新建表单
        if (!$formId) {
            // 验证表单名称
            if (!isset($data['form_name']) || $data['form_name'] == '') {
                return ['code' => ['0x000003', 'common']];
            }
            // 创建表单
            $formData = array_intersect_key($data, array_flip(app($this->flowFormTypeRepository)->getTableColumns()));
            if (isset($formData['print_model']) && isset($formData['form_type'])) {
                $formData = app($this->flowFormService)->updateFormHtml($formData);
                if (isset($formData['code'])) {
                    return $formData;
                }
                $formData['print_model'] = $this->filterPrintModel($formData['print_model']);
            }
            $flowFormObject = app($this->flowFormTypeRepository)->insertData($formData);
            $formId = $flowFormObject->form_id;
            // 创建zzzz_flow_data_$FORM_ID表
            app($this->flowRunService)->insertFlowFormStructure(["form_id" => $formId]);
            app($this->flowRunService)->recordFlowFormHistory($formId, $formData);
        }else {
            // 验证表单名称
            if (isset($data['form_name']) && $data['form_name'] == '') {
                return ['code' => ['0x000003', 'common']];
            }
            $flowFormDetail = app($this->flowFormTypeRepository)->getDetail($formId);
            if (!$flowFormDetail) {
                return ['code' => ['0x000003', 'common']];
            }
            // 验证是否有操作表单的权限
            if ($flowFormDetail && $flowFormDetail->form_sort != 0) {
                // 验证表单分类权限
                $power = $this->getFormSortEditPermission($flowFormDetail->form_sort, $own);
                if (!$power) {
                    return ['code' => ['0x000006', 'common']];
                }
            }
            // 匹配保存表单html等基本信息
            $formData = array_intersect_key($data, array_flip(app($this->flowFormTypeRepository)->getTableColumns()));
            // 处理print_model 对应的 html dom 值
            $formData['print_model'] = $this->filterPrintModel($formData['print_model']);
            app($this->flowFormTypeRepository)->updateData($formData, ['form_id' => $formId]);
            // 记录流程表单历史记录
            $historyData = $data;
            $data['old_form_version_no'] = $flowFormDetail->form_version_no ?? 0;
            app($this->flowRunService)->recordFlowFormHistory($formId, $historyData);
        }
        $data['user_id'] = $own['user_id'];
        // 处理解析后的表单控件，操作[流程数据表]和[明细字段数据表]
        app($this->flowRunService)->disposeFormControlStructure($data, $formId);
        return $formId;
    }

    public function getFormSortEditPermission($formSort, $own)
    {
        //获取有权限的表单分类列表
        $powerList = $this->getPermissionFlowFormSortList($own);
        if ($powerList) {
            $powerList = $powerList->pluck('id')->toArray();
        } else {
            $powerList = [];
        }
        if (!in_array($formSort, $powerList)) {
            return false;
        }
        return true;
    }
    /**
     * 保存print_model时对明细里的控件属性进行过滤，如果类型是 text 需要过滤掉 data-efb-with-text 属性
     * @param $printModel
     * @return mixed
     */
    private function filterPrintModel($printModel)
    {
        $html = new \simple_html_dom();
        $html->load($printModel);
        $layoutInfo = $html->find('div[data-efb-layout-info]');
        foreach ($layoutInfo as $key => &$value) {
            if ($value->getAttribute('data-efb-layout-info')) {
                $info = htmlspecialchars_decode($value->attr['data-efb-layout-info']);
                $detailInfo = json_decode($info, true);
                if (is_array($detailInfo)) {
                    foreach ($detailInfo as $k => &$v) {
                        if ($v['type'] == 'text' && isset($v['data-efb-with-text'])) {
                            unset($v['data-efb-with-text']);
                        }
                    }
                    $value->setAttribute('data-efb-layout-info', htmlspecialchars(json_encode($detailInfo)));
                }
            }
        }
        return $html->save();
    }


    /**
     * 删除流程表单
     *
     * @param string $formId [description]
     *
     * @return json 删除结果
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function deleteFlowForm($formIdString)
    {
        foreach (explode(',', trim($formIdString, ",")) as $key => $formId) {
            $formDetailParam = [
                "search" => ["form_id" => [$formId]],
                "getDataType" => "grid",
                "page" => "0",
                "returntype" => "first",
            ];
            if ($formDataObject = app($this->flowFormTypeRepository)->getFlowForm($formDetailParam)) {
                $formDataArray = $formDataObject->toArray();
                if (count($formDataArray["flow_form_has_many_flow_type"])) {
                    // return ['code' => ['0x007004','flow']];
                } else {
                    app($this->flowFormTypeRepository)->deleteById($formId);
                }
            }
        }
        return "1";
    }

    /**
     * 获取某条流程表单详情
     *
     * @param string $formId [description]
     *
     * @return json 定义流程分类详情数据
     * @since  2015-10-16 创建
     *
     * @return json 定义流程分类详情数据
     */
    public function getFlowFormDetail($formId, $param)
    {
        if(!$formId) {
            return ['code' => ['0x030031', 'flow']];
        }
        $templateTpye = isset($param["templateType"]) ? $param["templateType"] : "";
        if ($templateTpye == "print") {
            // 打印模板设置
            $flowId = $formId;
            $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
            if($flowTypeInfo) {
                $formId = $flowTypeInfo->form_id;
                return app($this->flowFormTypeRepository)->getDetail($formId);
            }else{
                return ['code' => ['0x030031', 'flow']];
            }
        } else {
            $flowFormDetail = app($this->flowFormTypeRepository)->getDetail($formId);
            if($flowFormDetail) {
                if(isset($flowFormDetail->form_version_no)) unset($flowFormDetail->form_version_no);
                $result = [];
                $formInfo = app($this->flowFormService)->getParseForm($formId);
                foreach ($formInfo as $key => $value) {
                    $transKey = 'flow_form_control_structure.control_title.' . $formId . '_' . $value['control_id'];
                    $result[$value['control_id']] = app($this->langService)->transEffectLangs($transKey, true);
                }
                if (isset($param['export_form'])) {
                    $versionFormat = "<eoffice-version hidden=\"true\">%s</eoffice-version>";
                    $versionContent = sprintf($versionFormat, version());
                    $flowFormDetail['print_model'] = $flowFormDetail['print_model'] . $versionContent;
                }
                $flowFormDetail->control_title_lang = $result;
                return $flowFormDetail;
            } else {
                return ['code' => ['0x030031', 'flow']];
            }
        }
    }

    /**
     * 复制流程表单
     * @auther lixuanxuan
     * @param  $formId
     * @param  $own
     * @return array
     */
    public function copyFlowForm($formId, $own)
    {
        // 获取有权限的表单分类列表
        $powerList = $this->getPermissionFlowFormSortList($own);
        if ($powerList) {
            $powerList = $powerList->pluck('id')->toArray();
        } else {
            $powerList = [];
        }
        $flowFormDetail = app($this->flowFormTypeRepository)->getDetail($formId);
        if (!$flowFormDetail) {
            return ['code' => ['0x000002', 'common']];
        }
        if ($flowFormDetail && !in_array($flowFormDetail->form_sort, $powerList) && $flowFormDetail->form_sort != 0) {
            return ['code' => ['0x000017', 'common']];
        }
        // 准备表单数据
        $flowFormDetail = $flowFormDetail->toArray();
        $formVersionNo = substr(microtime(true)*100, 0, 12);;
        $flowFormDetail['form_version_no'] = $formVersionNo;
        $sourceFormId = $flowFormDetail['form_id'];
        // 删除多余信息
        unset($flowFormDetail['form_id']);
        unset($flowFormDetail['created_at']);
        unset($flowFormDetail['updated_at']);
        unset($flowFormDetail['deleted_at']);
        $flowFormDetail['form_name'] = $flowFormDetail['form_name'] . trans('flow.copy');
        $formData = array_intersect_key($flowFormDetail, array_flip(app($this->flowFormTypeRepository)->getTableColumns()));
        // 插入新表单
        $flowFormObject = app($this->flowFormTypeRepository)->insertData($formData);
        $newFormId = $flowFormObject->form_id;
        app($this->flowRunService)->recordFlowFormHistory($newFormId, $formData);
        // 创建zzzz_flow_data_$FORM_ID表
        app($this->flowRunService)->insertFlowFormStructure(["form_id" => $newFormId]);
        // 获取原表单控件信息
        $sourceFormControlInfo = app($this->flowFormService)->getFlowFormControlStructure(['search' => ['form_id' => [$sourceFormId]]]);
        $add = [];
        $formControl = [];
        if (count($sourceFormControlInfo) > 0) {
            foreach ($sourceFormControlInfo as $key => $value) {
                $id = $value['control_id'];
                $attribute = isset($value['control_attribute']) ? json_decode($value['control_attribute'], true) : "";
                if (isset($value['control_parent_id']) && !empty($value['control_parent_id'])) {
                    //明细布局内容
                    $parentId = $value['control_parent_id'];
                    // 如果是明细二级子项，则跳过，由明细二级的父级属性处理
                    if ($attribute && isset($attribute['control_grandparent_id'])) {
                        continue;
                    }
                    $formControl[$parentId]['info'][$id]['title'] = $value['control_title'];
                    $formControl[$parentId]['info'][$id]['type'] = $value['control_type'];
                    $formControl[$parentId]['info'][$id]['attribute'] = $attribute;
                } else {
                    $formControl[$id]['title'] = $value['control_title'];
                    $formControl[$id]['type'] = $value['control_type'];
                    $formControl[$id]['attribute'] = $attribute;
                    $add[] = $id;
                }
            }
        }
        $data = [
            'control' => $formControl,
            'user_id' => $own['user_id'],
            'change' => [
                'add' => $add,
            ],
            'form_version_no' => $formVersionNo
        ];
        // 处理解析后的表单控件，操作[流程数据表]和[明细字段数据表]
        app($this->flowRunService)->disposeFormControlStructure($data, $newFormId);
        return $newFormId;
    }

    /**
     * pageMain 函数，验证完权限之后，判断&获取表单模板，传 $permissionValue
     * 这函数的入口有3个：$page == "handle" || $page == "view" || $page == "new"。
     * @param  [type] $param [description]
     * @return [type]        [返回匹配的解析规则的规则id（此id唯一，在获取(表单详情)/(解析后的表单数据)的时候，判断规则id，获取对应的子表单）]
     */
    public function flowPageMainGetFormTemplateInfo($param)
    {
        $page = isset($param["page"]) ? $param["page"] : "";
        $flowId = $param["flow_id"];
        $currentUser = $param["currentUser"];
        $runId = isset($param["run_id"]) ? $param["run_id"] : "";
        $nodeId = isset($param["node_id"]) ? $param["node_id"] : "";
        $processId = isset($param["process_id"]) ? $param["process_id"] : "";
        $permissionValue = isset($param["permissionValue"]) ? $param["permissionValue"] : "";
        $flowType = isset($param["flowType"]) ? $param["flowType"] : "";
        $ruleIdRun = "";
        // 固定流程，才判断运行模板
        if ($flowType == "1") {
            // 在这里，解析流程运行模板规则，传 user，node
            // 调用函数解析表单模板规则
            // handle 传 $templateType(run),nodeId,flowId user_id
            $getRuleInfoParam = ["templateType" => "run", "nodeId" => $nodeId, "flowId" => $flowId, "userId" => $currentUser, "node_info" => $param['node_info'] ?? []];
            // 关联用户和关联节点，根据这俩参数，去获取流程运行模板，不同的 permissionValue ，有不同的关联用户、关联节点
            if ($page == "new") {
                $ruleIdRun = $this->verifyFlowFormTemplateRule($getRuleInfoParam);
            } else if ($page == "handle" || $page == "view") {
                // 先尝试获取当前人员的[!常用!-20180301添加]规则，即，这次的查询，不考虑其他规则
                $getRuleInfoParam["excludeOtherRule"] = "1";
                $ruleIdRunFirstStep = $this->verifyFlowFormTemplateRule($getRuleInfoParam);
                // 先判断当前人，有没有模板，有，就直接用，没有，再判断是否委托转发抄送
                // $getRuleInfoParam = ["templateType" => "run","nodeId" => $nodeId,"flowId" => $flowId,"userId" => $currentUser];
                // $ruleIdRunFirstStep = $this->verifyFlowFormTemplateRule($getRuleInfoParam);
                if ($ruleIdRunFirstStep && !is_array($ruleIdRunFirstStep)) {
                    $ruleIdRun = $ruleIdRunFirstStep;
                } else {
                    $relationUser = "";
                    // 有返回、且是数组，说明开了开关，没取到正确的规则，此时要判断是否委托转发抄送
                    // 取关联用户
                    // flow_run_process 带步骤 判断是否是办理人，是，判断-是否委托 是否转发；否，判断-是否抄送
                    $flowRunProcessParam = [
                        "run_id" => $runId,
                        "search" => ["user_id" => [$currentUser], "process_id" => [$processId]],
                        "order_by" => ['host_flag' => 'desc', 'forward_user_id' => 'asc', 'by_agent_id' => 'asc'],
                    ];
                    if ($flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunProcessParam)) {
                        if ($flowRunProcessObject->count()) {
                            $flowRunProcessInfo = $flowRunProcessObject->first()->toArray();
                            if (isset($flowRunProcessInfo["forward_user_id"]) && $flowRunProcessInfo["forward_user_id"]) {
                                // 说明此人是被转发而来，获取转发的来源的最初的那个人
                                $relationUser =  app($this->flowParseService)->getOriginUserIdByForword( $runId  ,$processId ,$flowRunProcessInfo["forward_user_id"] );
                                $relationUser = empty($relationUser) ? $flowRunProcessInfo["forward_user_id"] : $relationUser;
                            } else if (isset($flowRunProcessInfo["by_agent_id"]) && $flowRunProcessInfo["by_agent_id"]) {
                                $relationUser = $flowRunProcessInfo["by_agent_id"];
                            } else {
                                $relationUser = $currentUser;
                            }
                        } else {
                            // 判断抄送人
                            $flowCopyParam = [
                                "returntype" => "object",
                                "search" => ["by_user_id" => [$currentUser], "run_id" => [$runId]],
                                "order_by" => ['copy_time' => 'desc'],
                            ];
                            if ($flowCopyObject = app($this->flowCopyRepository)->getFlowCopyList($flowCopyParam)) {
                                if ($flowCopyObject->count()) {
                                    $flowCopyInfo = $flowCopyObject->first()->toArray();
                                    if (isset($flowCopyInfo["copy_user"]) && $flowCopyInfo["copy_user"]) {
                                        $relationUser = $flowCopyInfo["copy_user"];
                                    }
                                }
                            }
                            // 也不是抄送人，当做是流程监控人来处理，流程监控人，依次解析常用规则 其他规则
                            if ($relationUser == "") {
                                $relationUser = $currentUser;
                            }
                        }
                    }
                    // 在这里，解析流程运行模板规则，传 user，node
                    // 调用函数解析表单模板规则
                    // handle 传 $templateType(run),nodeId,flowId user_id
                    $parseParam = ["templateType" => "run", "nodeId" => $nodeId, "flowId" => $flowId, "userId" => $relationUser];
                    $ruleIdRun = $this->verifyFlowFormTemplateRule($parseParam);
                }
            }
        }

        $ruleIdPrint = "";
        if (($page == "view") || ($page == "handle")) {
            // 如果是查看页面，解析【打印规则】，传 user ， flow_id
            // 打印规则 传 $templateType(print),flowId
            // 归档规则(filing)，在其他地方(getFilingDocumentFlowInfo)解析
            $templateType = "print";
            // 这里用当前人员，不需要判断权限
            $parseParam = ["templateType" => $templateType, "flowId" => $flowId, "userId" => $currentUser];
            $ruleIdPrint = $this->verifyFlowFormTemplateRule($parseParam);
        }
        // 返回匹配的解析规则的规则id
        return ["run" => $ruleIdRun, "print" => $ruleIdPrint];
    }

    /**
     * 传入，user_id,node_id ，判断并获取表单规则列表
     * 没有开开关，返回空，开了开关，必然有返回值（不是ruleid，就是code提示）
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function verifyFlowFormTemplateRule($param)
    {
        $ruleId = "";
        $templateTpye = isset($param["templateType"]) ? $param["templateType"] : "";
        $flowId = isset($param["flowId"]) ? $param["flowId"] : "";
        $nodeId = isset($param["nodeId"]) ? $param["nodeId"] : "";
        $userId = isset($param["userId"]) ? $param["userId"] : "";
        // 排除其他规则的标识，传1的时候表示排除
        $excludeOtherRule = isset($param["excludeOtherRule"]) ? $param["excludeOtherRule"] : "";
        if ($templateTpye == "run") {
            // 取节点，取配置
            //20190806优化
            $nodeDetail = !empty($param['node_info']) ? $param['node_info'] : app($this->flowProcessRepository)->getDetail($nodeId);
            if ($nodeDetail) {
                $nodeDetail = $nodeDetail->toArray();
                if ($nodeDetail["flow_run_template_toggle"] == "1") {
                    // 获取规则
                    $ruleInfoParam = ["template_type" => $templateTpye, "node_id" => $nodeId, "excludeOtherRule" => $excludeOtherRule];
                    $ruleInfo = $this->getFlowTemplateRuleList($ruleInfoParam);
                    // 解析
                    $ruleId = $this->parseFlowFormTemplateRule($ruleInfo, $userId, $templateTpye);
                }
            }
        } else if ($templateTpye == "print" || $templateTpye == "filing") {
            // 取配置
            if ($flowotherObject = app($this->flowOthersRepository)->getFlowOthersInfo($flowId)) {
                if ($flowotherObject->count()) {
                    $flowotherObject = $flowotherObject->first();
                    $printTemplateToggle = $flowotherObject->flow_print_template_toggle;
                    $filingTemplateToggle = $flowotherObject->flow_filing_template_toggle;
                    if (($templateTpye == "print" && $printTemplateToggle == "1") || ($templateTpye == "filing" && $filingTemplateToggle == "1")) {
                        // 获取规则
                        $ruleInfoParam = ["template_type" => $templateTpye, "flow_id" => $flowId];
                        $ruleInfo = $this->getFlowTemplateRuleList($ruleInfoParam);
                        // 解析
                        $ruleId = $this->parseFlowFormTemplateRule($ruleInfo, $userId, $templateTpye);
                    }
                }
            }
        }
        return $ruleId;
    }

    /**
     * 传入， $ruleInfo,$userId ，解析表单规则
     * $templateTpye : 可选：[run print filing]，报不同的error code
     * 进了这个函数，表示已经开了模板开关
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function parseFlowFormTemplateRule($ruleInfo, $verifyUserId, $templateTpye)
    {
        $ruleId = "";
        $ruleIdArr = [];
        $templateIdArr = [];
        // 开了开关，没有传关联人员
        if (!$verifyUserId) {
            return ['code' => ['0x030139', 'flow'], 'message' => trans('flow.0x030139')];
        }

        // $ruleInfo 是object
        if ($ruleInfo->count()) {
            $otherRuleInfo = [];
            foreach ($ruleInfo as $key => $value) {
                // 排除其他规则
                if ($value->other_rule_flag == "1") {
                    // 子表单id--20180228，子表单id如果是-1，表示是主表单
                    // $templateId = $value->template_id;
                    // if($templateId > 0 && !$ruleId) {
                    if (!$ruleId || ($templateTpye == "print")) {
                        $userScope = $value->userScope ?? [];
                        $userScope = json_decode(json_encode($userScope), true);
                        // 验证权限
                        $userId = $userScope["user_id"] ?? [];
                        $roleId = $userScope["role_id"] ?? [];
                        $deptId = $userScope["dept_id"] ?? [];
                        $getUserParam = [
                            "fields" => ["user_id", "user_name"],
                            "page" => "0",
                            "returntype" => "object",
                            "getDataType" => ""
                        ];
                        if (!($userId == "all" || $roleId == "all" || $deptId == "all")) {
                            $getUserParam["search"] = [
                                "user_id" => $userId,
                                "role_id" => $roleId,
                                "dept_id" => $deptId,
                            ];
                            $userInfo = app($this->userRepository)->getConformScopeUserList($getUserParam)->pluck('user_id')->toArray();
                        }
                        if (($userId == "all" || $roleId == "all" || $deptId == "all") || (!empty($userInfo) && in_array($verifyUserId, $userInfo))) {
                            // 此条规则通过验证
                            $ruleId = $value->rule_id;
                            // 过滤不同ID但实际表单重复的规则
                            if (!in_array($value->template_id, $templateIdArr)) {
                                $ruleIdArr[] = $ruleId;
                                $templateIdArr[] = $value->template_id;
                            }
                        }
                    }
                } else if ($value->other_rule_flag == "2") {
                    // 记录其他规则
                    $otherRuleInfo = $value;
                }
            }
            if (!$ruleId) {
                // 自定义规则里面，没有匹配到，判断其他规则
                if ( is_object($otherRuleInfo) && $otherRuleInfo->count() ) {
                    // 先判断是否开了开关
                    if ($otherRuleInfo->other_person_template_toggle == 1) {
                        // 开了开关，那么判断其他规则
                        if ($otherRuleInfo->template_id) {
                            $ruleId = $otherRuleInfo->rule_id;
                            // 过滤不同ID但实际表单重复的规则
                            if (!in_array($otherRuleInfo->template_id, $templateIdArr)) {
                                $ruleIdArr[] = $ruleId;
                                $templateIdArr[] = $otherRuleInfo->template_id;
                            }
                        } else {
                            // 其他规则也没匹配到，报个提示
                            if ($templateTpye == "run") {
                                $ruleId = ['code' => ['0x030135', 'flow'], 'message' => trans('flow.0x030135')];
                            } else if ($templateTpye == "print") {
                                $ruleId = ['code' => ['0x030136', 'flow'], 'message' => trans('flow.0x030136')];
                            } else if ($templateTpye == "filing") {
                                $ruleId = ['code' => ['0x030137', 'flow'], 'message' => trans('flow.0x030137')];
                            }
                        }
                    } else {
                        // 没开其他人员规则，报提示:[]
                        $ruleId = ['code' => ['0x030140', 'flow'], 'message' => trans('flow.0x030140')];
                    }
                }
            }
        } else {
            // 开了使用模板开关，且没有规则，报个提示(打开开关之后，要保存，必须要有一条正确的完整的规则，所以这个else几乎不会出现)
            $ruleId = ['code' => ['0x030138', 'flow'], 'message' => trans('flow.0x030138')];
        }
        // 开关开了，但是没有取到规则id，报个错
        if ($ruleId == "") {
            $ruleId = ['code' => ['0x030139', 'flow'], 'message' => trans('flow.0x030139')];
        }

        return ((count($ruleIdArr) > 1) && ($templateTpye == "print")) ? $ruleIdArr : $ruleId; // 如果有多个满足条件的打印规则且是打印页面则全部返回
    }

    /**
     * 【流程运行】 【流程表单】 根据综合参数，获取流程表单详情，用在解析 节点模板/归档模板/打印模板
     * moduleType:调用的页面的类型标识。[可选:view 流程查看页面,handle 流程办理页面,print 流程打印(流程查看页面) ,filing 归档后文档查看页面]
     * view 传 moduleType,flowProcess,flowId,formId
     * handle 传 moduleType,nodeId,flowId,formId
     * print/filing 传 moduleType,flowId,formId
     * status:表单状态。[preview - 预览;new - 新建，传 historyId 的时候，要处理;handle - 办理;generalHandle - 经办人办理;view - 查看;]
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getFlowTemplateFormDetail($param)
    {
        $templateTpye = $param["templateType"] ?? "";
        $flowId = $param["flowId"] ?? "";
        $formId = $param["formId"] ?? "";
        $runId = $param["runId"] ?? "";
        $nodeId = $param["nodeId"] ?? "";
        $flowType = $param["flowType"] ?? "";
        $flowProcess = $param["flowProcess"] ?? "";
        $userId = $param["userId"] ?? "";
        $status = $param["status"] ?? "";
        $moduleType = $param["moduleType"] ?? "";
        $historyFormId = $param['historyFormId'] ?? 0;
        // pageMain 解析出来的表单模板规则的info
        $formTemplateRuleInfo = $param["formTemplateRuleInfo"] ?? "";
        if ($formTemplateRuleInfo) {
            $formTemplateRuleInfo = json_decode($formTemplateRuleInfo, true);
        }
        //开启gzip压缩，减少print_model的返回值
        if(!headers_sent() && extension_loaded('zlib') && !empty($_SERVER['HTTP_ACCEPT_ENCODING']) && strstr($_SERVER['HTTP_ACCEPT_ENCODING'],'gzip')){
            if (ob_get_contents()) ob_end_clean();
            ini_set('zlib.output_compression','On');
            ini_set('zlib.output_compression_level','4');
        }
        // 先判断预览
        if ($status == "preview") {
            // 有可能是预览子表单，会传 parentId .
            if (isset($param["parentId"]) && !empty($param["parentId"])) {
                // 去获取子表单详情
                return app($this->flowChildFormTypeRepository)->getDetail($formId , false , ['print_model' , 'form_type']);
            } else {
                if ($historyFormId) {
                    return app($this->flowFormEditionRepository)->getDetail($historyFormId  , false , ['print_model' , 'form_type']);
                } else {
                    return app($this->flowFormTypeRepository)->getDetail($formId  , false , ['print_model' , 'form_type']);
                }
            }
        } else {
            // 办理/查看页面
            if ($status == "view" || $status == "handle" || $status == "new" || $status == "generalHandle") {
                // 根据 $formTemplateRuleInfo ，获取子表单详情，返回
                if ($moduleType == "view" || $moduleType == "handle") {
                    $ruleId = $formTemplateRuleInfo["run"] ?? "";
                } else if ($moduleType == "print") {
                    $ruleId = $formTemplateRuleInfo["print"] ?? "";
                } else if ($moduleType == "filing") {
                    $ruleId = $formTemplateRuleInfo["filing"] ?? "";
                }

                if ($ruleId) {
                    // 如果规则ID是个数组，则升序后取最小的规则
                    if (is_array($ruleId) && count($ruleId)) {
                        sort($ruleId);
                        $ruleId = $ruleId[0];
                    }
                    $ruleInfo = $this->getFlowFormTemplateRuleInfo(["rule_id" => $ruleId]);
                    // 这里取html返回
                    return $ruleInfo["html"];
                } else {
                    return app($this->flowFormTypeRepository)->getDetail($formId , false , ['print_model' , 'form_type']);
                }
            }
        }
        return [];
    }

    /**
     * 【定义流程】【表单版本】 获取表单版本列表
     * 要可以传字段，默认不要表单内容；可以分页；默认版本时间倒序
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function getFlowFormVersion($formId, $param)
    {
        $param = $this->parseParams($param);
        $param["page"] = 0;
        $param["search"]["form_id"] = [$formId];
        return $this->response(app($this->flowFormEditionRepository), 'getFlowFormEditionTotal', 'getFlowFormEdition', $param);
    }

    /**
     * 新建表单版本
     *
     * @param array $param [description]
     *
     * @return json 表单版本数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function createFlowFormVersion($formId, $data)
    {
        return app($this->flowRunService)->recordFlowFormHistory($formId, $data);
    }

    /**
     * 编辑表单版本
     *
     * @param array $data [description]
     *
     * @return json 表单版本数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function editFlowFormVersion($data, $versionId)
    {
        $formData = array_intersect_key($data, array_flip(app($this->flowFormEditionRepository)->getTableColumns()));
        return app($this->flowFormEditionRepository)->updateData($formData, ['id' => $versionId]);
    }

    /**
     * 删除表单版本
     *
     * @param string $formId [description]
     *
     * @return json 删除结果
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function deleteFlowFormVersion($versionId)
    {
        return app($this->flowFormEditionRepository)->deleteById($versionId);
        // foreach (explode(',', trim($formIdString,",")) as $key=>$formId) {
        //     $formDetailParam = [
        //         "search"      => ["form_id" => [$formId]],
        //         "getDataType" => "grid",
        //         "page"        => "0",
        //         "returntype"  => "first"
        //     ];
        //     if($formDataObject = app($this->flowFormEditionRepository)->getFlowForm($formDetailParam)) {
        //         $formDataArray = $formDataObject->toArray();
        //         if(count($formDataArray["flow_form_has_many_flow_type"])) {
        //             // return ['code' => ['0x007004','flow']];
        //         } else {
        //             app($this->flowFormEditionRepository)->deleteById($formId);
        //         }
        //     }
        // }
        // return "1";
    }

    /**
     * 获取某条表单版本详情
     *
     * @param string $formId [description]
     *
     * @return json 某条表单版本详情数据
     * @since  2015-10-16 创建
     *
     * @author 丁鹏
     *
     */
    public function getFlowFormVersionDetail($versionId)
    {
        return app($this->flowFormEditionRepository)->getDetail($versionId);
    }

    /**
     * 【定义流程】 获取已定义的流程列表
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function getFlowDefineListService($param, $userInfo)
    {
        $param = $this->parseParams($param);
        // 如果传入了 flow_sort ，且是来自流程查询，那么就根据 flow_sort 获取不分页的流程列表。
        if (isset($param["request_from"])) {
            if (isset($param["flow_sort"])) {
                $param["page"] = "0";
                $param["search"]["flow_sort"] = [$param["flow_sort"]];
                unset($param["flow_sort"]);
            }
            if (isset($param["flow_id"])) {
                $param["page"] = "0";
                $param["flow_id"] = explode(",", $param["flow_id"]);
            }
            if (isset($param['flow_sort_limit'])) {
                unset($param['flow_sort_limit']);
            }
            $result = $this->response(app($this->flowTypeRepository), 'getFlowDefineListTotal', 'getFlowDefineList', $param);
        } else {
            //获取有权限的流程分类列表
            $powerList = $this->getPermissionFlowSortList($userInfo);
            if ($powerList && count($powerList) > 0) {
                $powerList = $powerList->pluck('id')->toArray();
                //  增加未分类
                array_push($powerList, 0);
            }else {
                $powerList = [0];
            }
            if (isset($param['flow_sort_limit'])) {
                unset($param['flow_sort_limit']);
            } else {
                $param['flow_sort'] = $powerList;
            }
            $result =  $this->response(app($this->flowTypeRepository), 'getFlowDefineListTotal', 'getFlowDefineList', $param);
        }
        if (! empty($result['list'])) {
            foreach ($result['list'] as $k => &$v ) {
                if (isset($v['is_using']) && $v['is_using'] == 0) {
                    $v['flow_name'] = $v['flow_name'] . '【' . trans('flow.flow_stop') . '】';
                }
            }
        }
        return $result;
    }

    /**
     * 【定义流程】 获取某条流程的全部定义流程信息
     *
     * @param  {[type]}                 $param  [description]
     * @param  {[type]}                 $flowId [description]
     *
     * @return {[type]}                         [description]
     * @author dingpeng
     *
     */
    public function getFlowDefineInfoService($param, $flowId, $userInfo = [])
    {
        $param = $this->parseParams($param);
        if (empty($param)) $param = [];
        //查询流程那里不需要控制权限
        if (!empty($userInfo) && !isset($param['is_search'])) {
            //获取有权限的流程分类列表
            $powerList = $this->getPermissionFlowSortList($userInfo);
            if ($powerList) {
                $powerList = $powerList->pluck('id')->toArray();
                //  增加未分类
                $powerList = array_merge($powerList, [0]);
            } else {
                $powerList = [0];
            }
        }
        $param['flow_id'] = $flowId;
        $with = $param['with'] ?? ['all'];
        if ($flowTypeObject = app($this->flowTypeRepository)->getFlowTypeInfoRepository($param, $with)) {
            if (!empty($userInfo) && !isset($param['is_search'])) {
                if (!in_array($flowTypeObject->flow_sort, $powerList)) {
                    return ['code' => ['0x000006', 'common']];
                }
            }
            if (!$flowTypeObject->flowTypeHasManyManageRule->isEmpty()) {
                foreach ($flowTypeObject->flowTypeHasManyManageRule as $key => &$value) {
                    $value->monitor_user = [];
                    $value->monitor_role = [];
                    $value->monitor_scope_user = [];
                    $value->monitor_scope_dept = [];
                    if (count($value->hasManyManageUser)) {
                        $value->monitor_user = $value->hasManyManageUser->pluck("user_id")->toArray();
                    }
                    if (count($value->hasManyManageRole)) {
                        $value->monitor_role = $value->hasManyManageRole->pluck("role_id")->toArray();
                    }
                    if (count($value->hasManyManageScopeUser)) {
                        $value->monitor_scope_user = $value->hasManyManageScopeUser->pluck("user_id")->toArray();
                    }
                    if (count($value->hasManyManageScopeDept)) {
                        $value->monitor_scope_dept = $value->hasManyManageScopeDept->pluck("dept_id")->toArray();
                    }
                }
            }
            $result = $flowTypeObject->toArray();
            if (!$flowTypeObject->flowProcessHasManyOverTimeRemind->isEmpty()) {
                $overTimeRemind = $flowTypeObject->flowProcessHasManyOverTimeRemind->toArray();
            }
            if (!$flowTypeObject->flowTypeHasManyCreateUser->isEmpty()) {
                $result["user_id"] = $flowTypeObject->flowTypeHasManyCreateUser->pluck("user_id");
            }
            if (!$flowTypeObject->flowTypeHasManyCreateRole->isEmpty()) {
                $result["role_id"] = $flowTypeObject->flowTypeHasManyCreateRole->pluck("role_id");
            }
            if (!$flowTypeObject->flowTypeHasManyCreateDept->isEmpty()) {
                $result["dept_id"] = $flowTypeObject->flowTypeHasManyCreateDept->pluck("dept_id");
            }
            //格式化超时提醒时间
            if (isset($overTimeRemind) && count($overTimeRemind)>0){
                 $sequence =  1;
                foreach ($overTimeRemind as $remindKey => &$remindValue) {
                    if (isset($remindValue['remind_time']) && !empty($remindValue['remind_time']) && $remindValue['remind_time']!=0) {
                        $remindValue['remindDay'] = intval(floor($remindValue['remind_time'] / 24));
                        $remindValue['remindHour']  =number_format($remindValue['remind_time']- $remindValue['remindDay'] *24 , 1);
                        $remindValue['sequence'] = $sequence;
                        $remindValue['remind_id'] = $remindValue['id'];
                    }
                    $result["overtime"][$remindKey]['flow_id'] =   $remindValue['flow_id'];
                    $result["overtime"][$remindKey]['node_id'] =   $remindValue['node_id'];
                    $result["overtime"][$remindKey]['remind_time'] =   $remindValue['remind_time'];
                    $result["overtime"][$remindKey]['overtime_ways'] =   $remindValue['overtime_ways'];
                    $sequence++;

                }
                $result["overTimeRemind"] = $overTimeRemind;
            }

            $pressAddHour = $result["press_add_hour"] ?? '';
            if ($pressAddHour) {
                $flowPressTimeSetDay = intval(floor($pressAddHour / 24));

                $flowPressTimeSetHour = number_format($pressAddHour - $flowPressTimeSetDay *24 , 1);
                if ($flowPressTimeSetDay == 0) {
                    $flowPressTimeSetDay = 0;
                }
                if ($flowPressTimeSetHour == 0) {
                    $flowPressTimeSetHour = 0;
                }
                $result["flowPressTimeSetDay"] = $flowPressTimeSetDay;
                $result["flowPressTimeSetHour"] = $flowPressTimeSetHour;
            }
            if (!empty($result['flow_sequence'])) {
                // 20190926,zyx,增加流水号周期重置规则参数,从流水号规则中读取，长度和开始值不使用数据库字段，因为有可能错误
                $res = $this->getParamsFromFlowSequence($result['flow_sequence']);
                $result['flow_sequence_reset_rules'] = $res['flow_sequence_reset_rules'];
                $result['flow_sequence_start'] = $res['flow_sequence_start'];
                $result['flow_sequence_length'] = $res['flow_sequence_length'];
            }
            return $result;
        }
    }

    // 获取定义的出口条件
    public function getFlowDefineInfoListService($param, $flowId)
    {
        $flowTypeObject = app($this->flowTypeRepository)->getFlowTypeInfoListRepository(["flow_id" => $flowId]);
        if ($flowTypeObject) {
            return $flowTypeObject;
        }
        return '';

    }

    public function getFlowOutNodeInfoService($param, $flowId)
    {
        $resultData = [];
        if (isset($flowId)) {
            $nodeInfo = app($this->flowTermRepository)->getOneOutNode($param, $flowId)->toArray();
            return $nodeInfo;
        } else {
            return ['code' => ['0x000003', 'common']];
        }

    }

    /**
     * 【定义流程】 获取流程模板列表[子流程列表也是这个]
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function getFlowDefineRelateFlowSortService($param)
    {
        $param = $this->parseParams($param);
        if ($flowTypeObject = app($this->flowSortRepository)->getFlowDefineRelateFlowSort($param)) {
            return $flowTypeObject;
        }
    }

    /**
     * 【定义流程】 新建固定or自由流程基本信息
     *
     * @param  {[type]}               $param [description]
     * @param  {[array]}              $own  [增加当前用户信息参数，供复制流程时保存会签人信息使用]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function createFlowDefineBasicInfo($param, $own)
    {
        $flowTemplateId = isset($param['flow_template_id']) ? $param['flow_template_id'] : '';
        $flowName = isset($param['flow_name']) ? $param['flow_name'] : '';
        $flowSort = isset($param['flow_sort']) ? $param['flow_sort'] : '';
        $flowId = "";
        $flowType = isset($param['flow_type']) ? $param['flow_type'] : '';
        if (isset($param['flow_noorder']) && $param['flow_noorder'] > 10000) {
            // 流程序号最大不能超过10000
            return ['code' => ['0x030032', 'flow']];
        }
        if(!isset($param['flow_sort']) || $param['flow_sort'] === '') {
            return ['code' => ['flow_type_required', 'flow']];
        }
        if(!empty(Redis::keys('flow_sort_power_list_*'))) {
            Redis::del(Redis::keys('flow_sort_power_list_*'));
        }
        if(!empty(Redis::keys('flow_form_type_power_list_*'))) {
            Redis::del(Redis::keys('flow_form_type_power_list_*'));
        }
        // 实现根据模板id，复制流程功能
        if ($flowTemplateId > 0) {
            if ($flowName) {
                $flowId = app($this->flowRunService)->flowDefineCopy($flowTemplateId, $flowName, $flowSort, $own);
            } else {
                return ['code' => ['0x000001', 'common']];
            }
        } else {
            // 正常的新建流程
            $flowNoorder = isset($param['flow_noorder']) ? $param['flow_noorder'] : '';
            $limitSkipHolidayToggle =isset($param['limit_skip_holiday_toggle']) ? $param['limit_skip_holiday_toggle'] : 0;
            $formId = $param["form_id"];
            $isUsing = isset($param['is_using']) ? $param['is_using'] : '0';
            if ($isUsing == '1') {
                $hideRunning = '0';
            } else {
                $hideRunning = isset($param['hide_running']) ? $param['hide_running'] : '0';
            }
            $canEditFlowno = isset($param['can_edit_flowno']) ? $param['can_edit_flowno'] : '';
            $flowSequence = isset($param['flow_sequence']) ? $param['flow_sequence'] : '';
            $handleWay = isset($param['handle_way']) ? $param['handle_way'] : '0';
            $countersign = isset($param['countersign']) ? $param['countersign'] : '';
            $flowPressTimeSetDay = isset($param['flowPressTimeSetDay']) ? $param['flowPressTimeSetDay'] : 0;
            $flowPressTimeSetHour = isset($param['flowPressTimeSetHour']) ? $param['flowPressTimeSetHour'] : 0;
            $flowNameRulesHtml = (isset($param['flow_name_rules']) && !empty($param['flow_name_rules']) && isset($param['flow_name_rules_html'])) ? $param['flow_name_rules_html'] : '';
            $flowNameRules = (isset($param['flow_name_rules']) && !empty($param['flow_name_rules'])) ? json_encode($param['flow_name_rules']) : '';
            $canEditFlowname = isset($param['can_edit_flowname']) ? json_encode($param['can_edit_flowname']) : '';
            $flowNamePinYin = convert_pinyin($flowName);

            // 20190926,zyx,增加流水号周期重置规则参数,从流水号规则中读取，长度和初始值不使用数据库字段，因为有可能错误
            $flowSequenceDetails = $this->getParamsFromFlowSequence($flowSequence);

            // 固定流程
            if ($flowType == "1") {
                $insertData = [
                    "flow_name" => $flowName,
                    "flow_sort" => $flowSort,
                    "flow_type" => $flowType,
                    "form_id" => $formId,
                    "flow_noorder" => $flowNoorder,
                    "is_using" => $isUsing,
                    "hide_running" => $hideRunning,
                    "can_edit_flowno" => $canEditFlowno,
                    "flow_sequence" => $flowSequence,
                    "flow_name_py" => $flowNamePinYin[0],
                    "flow_name_zm" => $flowNamePinYin[1],
                    "flow_name_rules_html" => $flowNameRulesHtml,
                    "flow_name_rules" => $flowNameRules,
                    "can_edit_flowname" => $canEditFlowname,
                ];
//                if (isset($param['flow_sequence_define_begin']) && isset($param['flow_sequence_define_length'])) {
//                    $insertData['flow_sequence_start'] = $param['flow_sequence_define_begin'];
//                    $insertData['flow_sequence_length'] = $param['flow_sequence_define_length'];
//                }
                $insertData['flow_sequence_start'] = $flowSequenceDetails['flow_sequence_start'];
                $insertData['flow_sequence_length'] = $flowSequenceDetails['flow_sequence_length'];

                if ($flowTypeObject = app($this->flowTypeRepository)->insertData($insertData)) {
                    $flowId = $flowTypeObject->flow_id;
                    if ($flowId) {
                        $nodesValue = [];
                        $nodesValue["position"] = ['left' => 50, 'top' => 50];
                        $nodesValue["flow_id"] = $flowId;
                        $nodesValue["position"] = json_encode($nodesValue["position"]);
                        $nodesValue["flow_outmail"] = "0";
                        $nodesValue["flow_outsend_type"] = "1";
                        $nodesValue["process_forward"] = "0";
                        $nodesValue["process_transact_type"] = "0";
                        $nodesValue['head_node_toggle'] = "1";
                        $nodesValue['sort'] = "1";
                        $nodesValue['process_name'] = trans("flow.0x030086"); // 起始节点
                        $nodesValue['process_entrust'] = 1; // 节点委托 默认允许
                        app($this->flowProcessRepository)->insertData($nodesValue);
                    }
                }
            } else if ($flowType == "2") {
                if ($flowPressTimeSetDay || $flowPressTimeSetHour) {
                    if ($flowPressTimeSetDay > 0) {
                        $flowPressTimeSetHour = $flowPressTimeSetHour + $flowPressTimeSetDay * 24;
                    }
                    $pressAddHour = ($flowPressTimeSetHour);
                } else {
                    $pressAddHour = "";
                }
                // 自由流程
                $insertData = [
                    "flow_name" => $flowName,
                    "flow_sort" => $flowSort,
                    "flow_type" => $flowType,
                    "form_id" => $formId,
                    "flow_noorder" => $flowNoorder,
                    "is_using" => $isUsing,
                    "hide_running" => $hideRunning,
                    "can_edit_flowno" => $canEditFlowno,
                    "flow_sequence" => $flowSequence,
                    "handle_way" => $handleWay,
                    // "create_user"     => $createUser,
                    // "create_dept"     => $createDept,
                    // "create_role"     => $createRole,
                    "countersign" => $countersign,
                    "press_add_hour" => $pressAddHour,
                    "flow_name_py" => $flowNamePinYin[0],
                    "flow_name_zm" => $flowNamePinYin[1],
                    "flow_name_rules_html" => $flowNameRulesHtml,
                    "flow_name_rules" => $flowNameRules,
                    "can_edit_flowname" => $canEditFlowname,
                    "limit_skip_holiday_toggle" => $limitSkipHolidayToggle,

                ];
                // 创建人员范围为全体的处理
                if (isset($param["create_user"]) && $param["create_user"] == 'ALL') {
                    $insertData['create_user'] = "ALL";
                    unset($param['create_user']);
                } else {
                    $insertData['create_user'] = "";
                }
                if (isset($param["create_dept"]) && $param["create_dept"] == 'ALL') {
                    $insertData['create_dept'] = "ALL";
                    unset($param['create_dept']);
                } else {
                    $insertData['create_dept'] = "";
                }
                if (isset($param["create_role"]) && $param["create_role"] == 'ALL') {
                    $insertData['create_role'] = "ALL";
                    unset($param['create_role']);
                } else {
                    $insertData['create_role'] = "";
                }
                $createUser = isset($param['create_user']) ? $param['create_user'] : '';
                $createDept = isset($param['create_dept']) ? $param['create_dept'] : '';
                $createRole = isset($param['create_role']) ? $param['create_role'] : '';
//                if (isset($param['flow_sequence_define_begin']) && isset($param['flow_sequence_define_length'])) {
//                    $insertData['flow_sequence_start'] = $param['flow_sequence_define_begin'];
//                    $insertData['flow_sequence_length'] = $param['flow_sequence_define_length'];
//                }
                $insertData['flow_sequence_start'] = $flowSequenceDetails['flow_sequence_start'];
                $insertData['flow_sequence_length'] = $flowSequenceDetails['flow_sequence_length'];

                if ($flowTypeObject = app($this->flowTypeRepository)->insertData($insertData)) {
                    $flowId = $flowTypeObject->flow_id;
                    // 插入自由流程可创建人员范围
                    if (!empty($createUser)) {
                        $userData = [];
                        foreach (array_filter(explode(',', trim($createUser, ","))) as $v) {
                            $userData[] = ['flow_id' => $flowId, 'user_id' => $v];
                        }
                        app($this->flowTypeCreateUserRepository)->insertMultipleData($userData);
                    }
                    if (!empty($createRole)) {
                        $roleData = [];
                        foreach (array_filter(explode(',', trim($createRole, ","))) as $v) {
                            $roleData[] = ['flow_id' => $flowId, 'role_id' => $v];
                        }
                        app($this->flowTypeCreateRoleRepository)->insertMultipleData($roleData);
                    }
                    if (!empty($createDept)) {
                        $deptData = [];
                        foreach (array_filter(explode(',', trim($createDept, ","))) as $v) {
                            $deptData[] = ['flow_id' => $flowId, 'dept_id' => $v];
                        }
                        app($this->flowTypeCreateDepartmentRepository)->insertMultipleData($deptData);
                    }
                }
            }
            // 生成 other 数据
            app($this->flowOthersRepository)->insertData(["flow_id" => $flowId, "flow_show_text" => '1']);
        }
        if ($flowType == "1" && $flowId) {
            // 更新 other
            if ($flowotherObject = app($this->flowOthersRepository)->getFlowOthersInfo($flowId)) {
                if ($flowotherObject->count()) {
                    $flowotherObject = $flowotherObject->first();
                    if ($flowotherObject->flow_show_text == 0 && $flowotherObject->flow_autosave == 0 && $flowotherObject->flow_to_doc == 0) {
                        app($this->flowOthersRepository)->updateData(["flow_show_text" => '1', "flow_autosave" => '0', "flow_to_doc" => "0"], ["flow_id" => $flowId]);
                    }
                }
            }
        }
        if ($flowId) {
            return ["flow_id" => $flowId];
        } else {
            return ['code' => ['0x000003', 'common']];
        }
    }

    /**
     * 【定义流程】 编辑固定or自由流程基本信息
     *
     * @param  {[type]}                 $param  [description]
     * @param  {[type]}                 $flowId [description]
     *
     * @return {[type]}                         [description]
     * @author dingpeng
     *
     */
    public function modifyFlowDefineBasicInfo($param, $flowId, $own)
    {
        // 批量流程设置
        if ($flowId == "batchFlow") {
            $batchFlow = isset($param["batchFlow"]) ? $param["batchFlow"] : [];
            if (empty($batchFlow)) {
                // 保存失败，未获取到流程ID
                return ['code' => ['0x030154', 'flow']];
            } else {
                unset($param["batchFlow"]);
                $saveResult = "";
                foreach ($batchFlow as $key => $flowId) {
                    $saveResult = $this->modifyFlowDefineBasicInfoRealize($param, $flowId, $own, "batchFlow");
                }
                return $saveResult;
            }
        } else {
            return $this->modifyFlowDefineBasicInfoRealize($param, $flowId, $own);
        }
    }

    /**
     * 编辑流程基本信息的本体函数
     * @param  [type] $param  [description]
     * @param  [type] $flowId [description]
     * @return [type]         [description]
     */
    public function modifyFlowDefineBasicInfoRealize($param, $flowId, $own, $saveType = "")
    {
        if (isset($param['flow_noorder']) && $param['flow_noorder'] > 10000) {
            // 流程序号最大不能超过10000
            return ['code' => ['0x030032', 'flow']];
        }
        if($saveType != 'batchFlow') {
            if(!isset($param['flow_sort']) || $param['flow_sort'] === '') {
                return ['code' => ['flow_type_required', 'flow']];
            }
        }
        // 先查已有信息
        if ($flowTypeObject = app($this->flowTypeRepository)->getFlowTypeInfoRepository(["flow_id" => $flowId])) {
            $flowTypeOld = $flowTypeObject->flow_type;
            $isUsingOld = $flowTypeObject->is_using;
            $hideRunningOld = $flowTypeObject->hide_running;
            // 传递过来的参数
            $flowType = isset($param["flow_type"]) ? $param["flow_type"] : "";
            $formId = isset($param["form_id"]) ? $param["form_id"] : "";
            $flowName = isset($param['flow_name']) ? $param['flow_name'] : "";
            $flowSort = isset($param['flow_sort']) ? $param['flow_sort'] : "";
            $flowNoorder = isset($param['flow_noorder']) ? $param['flow_noorder'] : '';
            $isUsing = isset($param['is_using']) ? $param['is_using'] : '0';
            $limitSkipHolidayToggle =  isset($param['limit_skip_holiday_toggle']) ? $param['limit_skip_holiday_toggle'] : '0';
            $flowNameRulesHtml = (isset($param['flow_name_rules']) && !empty($param['flow_name_rules']) && isset($param['flow_name_rules_html'])) ? $param['flow_name_rules_html'] : '';
            $flowNameRules = (isset($param['flow_name_rules']) && !empty($param['flow_name_rules'])) ? json_encode($param['flow_name_rules']) : '';
            $canEditFlowname = isset($param['can_edit_flowname']) ? json_encode($param['can_edit_flowname']) : '';
            if ($isUsing == '1') {
                $hideRunning = '0';
            } else {
                $hideRunning = isset($param['hide_running']) ? $param['hide_running'] : '0';
            }
            $canEditFlowno = isset($param['can_edit_flowno']) ? $param['can_edit_flowno'] : '';
            $flowSequence = isset($param['flow_sequence']) ? $param['flow_sequence'] : '';
            $handleWay = isset($param['handle_way']) ? $param['handle_way'] : '0';
            $countersign = isset($param['countersign']) ? $param['countersign'] : '';
            $countersignRemind = isset($param['countersign_remind']) ? $param['countersign_remind'] : 0;
            $flowPressTimeSetDay = isset($param['flowPressTimeSetDay']) ? $param['flowPressTimeSetDay'] : 0;
            $flowPressTimeSetHour = isset($param['flowPressTimeSetHour']) ? $param['flowPressTimeSetHour'] : 0;
            $flowNamePinYin = convert_pinyin($flowName);
            // 批量设置
            if ($saveType == "batchFlow") {
                $flowType = $flowTypeOld;
                $formId = $flowTypeObject->form_id;
            }
            // 如果有更改流程类型，清空流程配置
            $hasChangeType = false;
            if ($flowTypeOld != $flowType) {
                app($this->flowProcessRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowOthersRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowReportRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowTypeManageUserRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowTypeManageRuleRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowTypeManageRoleRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowTypeManageScopeUserRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowTypeManageScopeDeptRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                app($this->flowTypeRepository)->updateData(['allow_monitor'=>0], ["flow_id" => $flowId]);

                $hasChangeType = true;
            }
            $flownodesparam["flow_id"] = $flowId;
            $flownodesparam['fields'][] = "node_id";
            $flownodesparam['returntype'] = "object";
            $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($flownodesparam)->pluck('node_id')->toArray();
            // 清空节点信息redis缓存
            if (!empty($flowNodes)) {
                foreach ($flowNodes as $value) {
                    if (Redis::exists('flow_process_info_' . $value)) {
                        Redis::del('flow_process_info_' . $value);
                    }
                }
            }

            // 20190926,zyx,增加流水号周期重置规则参数,从流水号规则中读取，长度和初始值不使用数据库字段，因为有可能错误
            $flowSequenceDetails = $this->getParamsFromFlowSequence($flowSequence);

            //表单变动时，同步删除表单控件相关设置
            if ($flowTypeObject->form_id != $formId && $saveType != "batchFlow") {
                if (!empty($flowNodes)) {
                    $nodeIdArray = ['node_id' => [$flowNodes, 'in']];
                    // 删除字段控制缓存
                    foreach ($flowNodes as $_flow_node_id) {
                        if (Redis::exists('collect_control_purview_info_' . $_flow_node_id)) {
                            Redis::del('collect_control_purview_info_' . $_flow_node_id);
                        }
                    }
                    //删除 flow_process_control_operation flow_process_control_operation_detail 数据
                    $operationParam = ["search" => $nodeIdArray];
                    $operationInfo = app($this->flowProcessControlOperationRepository)->getList($operationParam);
                    $operationInfo = $operationInfo->pluck("operation_id")->toArray();
                    app($this->flowProcessControlOperationRepository)->deleteByWhere($nodeIdArray);
                    app($this->flowProcessControlOperationDetailRepository)->deleteByWhere(['operation_id' => [$operationInfo, 'in']]);
                    //删除`flow_outsend`表数据
                    app($this->flowOutsendRepository)->deleteByWhere($nodeIdArray);
                    //删除`flow_sun_workflow`表数据
                    app($this->flowSunWorkflowRepository)->deleteByWhere($nodeIdArray);
                    //删除`flow_datavalidate`表数据
                    app($this->flowDataValidateRepository)->deleteByWhere($nodeIdArray);
                    // 自由节点必填设置
                    app($this->flowProcessFreePresetRepository)->updateData(['required_control_id'=>''], $nodeIdArray);
                }
                //删除`flow_term`表数据
                app($this->flowTermRepository)->deleteByWhere(['flow_id' => [$flowId]]);
                // 删除表单模板规则数据
                app($this->flowFormTemplateRuleRepository)->deleteByWhere(['flow_id' => [$flowId]]);
                // 关闭子流程、数据外发、数据验证开关、节点表单模板、节点抄送条件
                app($this->flowProcessRepository)->updateData([
                    'flow_outsend_toggle' => 0,
                    'sun_flow_toggle' => 0,
                    'trigger_son_flow_back' => 1,
                    'flow_data_valid_toggle' => 0,
                    'flow_data_valid_mode'  => 0,
                    'flow_run_template_toggle' => '0',
                    'copy_condition' => ''
                ],
                    ['flow_id' => $flowId]);
                // 关闭设置归档条件的开关,清空归档条件,关闭设置归档文件夹规则的开关，清空归档文件夹设置，关闭设置自定义归档模板，关闭设置打印模板，关闭表单模板数据设置开关，清空表单模板数据设置
                app($this->flowFormDataTemplateRepository)->deleteByWhere(['flow_id' => [$flowId]]);
                $templateUpdateData = [
                    'flow_filing_conditions_setting_toggle' => '0',
                    'flow_filing_conditions_setting_value' => '',
                    'flow_filing_conditions_verify_mode' => '1',
                    'flow_filing_conditions_verify_url' => '',
                    'flow_filing_folder_rules_toggle' => 0,
                    'flow_filing_folder_rules' => '',
                    'flow_filing_folder_rules_html' => '',
                    'flow_print_template_toggle' => 0,
                    'flow_filing_template_toggle' => 0,
                    'flow_show_data_template' => 0,
                ];
                app($this->flowOthersRepository)->updateData($templateUpdateData, ['flow_id' => [$flowId]]);
                // 自由流程必填设置
                app($this->flowRequiredForFreeFlowRepository)->deleteByWhere(['flow_id' => [$flowId]]);

            }
            // 固定流程
            if ($flowType == "1") {
                $updateData = [
                    "flow_name" => $flowName,
                    "flow_sort" => $flowSort,
                    "flow_type" => $flowType,
                    "form_id" => $formId,
                    "flow_noorder" => $flowNoorder,
                    "is_using" => $isUsing,
                    "hide_running" => $hideRunning,
                    "can_edit_flowno" => $canEditFlowno,
                    "flow_sequence" => $flowSequence,
                    "flow_sequence_start" => $flowSequenceDetails['flow_sequence_start'],
                    "flow_sequence_length" => $flowSequenceDetails['flow_sequence_length'],
                    "flow_name_py" => $flowNamePinYin[0],
                    "flow_name_zm" => $flowNamePinYin[1],
                    "flow_name_rules_html" => $flowNameRulesHtml,
                    "flow_name_rules" => $flowNameRules,
                    "can_edit_flowname" => $canEditFlowname,
                    "sub_show_main_process_title" => $param["sub_show_main_process_title"] ?? 1,
                ];
                if ($saveType == "batchFlow") {
                    unset($updateData["flow_name"]);
                    if ($flowSort === "") {
                        unset($updateData["flow_sort"]);
                    }
                    unset($updateData["flow_type"]);
                    unset($updateData["form_id"]);
                    // unset($updateData["flow_noorder"]);
                    // unset($updateData["is_using"]);
                    unset($updateData["sub_show_main_process_title"]);
                    // unset($updateData["can_edit_flowno"]);
                    // unset($updateData["flow_sequence"]);
                    unset($updateData["flow_name_py"]);
                    unset($updateData["flow_name_zm"]);
                    unset($updateData["flow_name_rules_html"]);
                    unset($updateData["flow_name_rules"]);
                    unset($updateData["can_edit_flowname"]);
                }
                app($this->flowTypeRepository)->updateData($updateData, ["flow_id" => $flowId]);
                //流程类别由自由变成固定时 添加首节点
                if ($hasChangeType) {
                    $nodesValue = [];
                    $nodesValue["position"] = ['left' => 50, 'top' => 50];
                    $nodesValue["flow_id"] = $flowId;
                    $nodesValue["position"] = json_encode($nodesValue["position"]);
                    $nodesValue["flow_outmail"] = "0";
                    $nodesValue["flow_outsend_type"] = "1";
                    $nodesValue["process_forward"] = "0";
                    $nodesValue["process_transact_type"] = "0";
                    $nodesValue['head_node_toggle'] = "1";
                    $nodesValue['sort'] = "1";
                    $nodesValue['process_name'] = "起始节点";
                    app($this->flowProcessRepository)->insertData($nodesValue);
                }
            } else if ($flowType == "2") {
                if ($flowPressTimeSetDay || $flowPressTimeSetHour) {
                    if ($flowPressTimeSetDay > 0) {
                        $flowPressTimeSetHour = $flowPressTimeSetHour + $flowPressTimeSetDay * 24;
                    }
                    $pressAddHour = ($flowPressTimeSetHour);
                } else {
                    $pressAddHour = "";
                }
                // 自由流程
                $updateData = [
                    "flow_name" => $flowName,
                    "flow_sort" => $flowSort,
                    "flow_type" => $flowType,
                    "form_id" => $formId,
                    "flow_noorder" => $flowNoorder,
                    "is_using" => $isUsing,
                    "hide_running" => $hideRunning,
                    "can_edit_flowno" => $canEditFlowno,
                    "flow_sequence" => $flowSequence,
                    "flow_sequence_start" => $flowSequenceDetails['flow_sequence_start'],
                    "flow_sequence_length" => $flowSequenceDetails['flow_sequence_length'],
                    "handle_way" => $handleWay,
                    "countersign" => $countersign,
                    "countersign_remind" => $countersignRemind,
                    "press_add_hour" => $pressAddHour,
                    "limit_skip_holiday_toggle" => $limitSkipHolidayToggle,
                    "flow_name_py" => $flowNamePinYin[0],
                    "flow_name_zm" => $flowNamePinYin[1],
                    "flow_name_rules_html" => $flowNameRulesHtml,
                    "flow_name_rules" => $flowNameRules,
                    "can_edit_flowname" => $canEditFlowname,
                    "sub_show_main_process_title" => $param["sub_show_main_process_title"] ?? 1,
                ];
                if ($saveType == "batchFlow") {
                    unset($updateData["flow_name"]);
                    if ($flowSort === "") {
                        unset($updateData["flow_sort"]);
                    }
                    unset($updateData["flow_type"]);
                    unset($updateData["form_id"]);
                    // unset($updateData["flow_noorder"]);
                    // unset($updateData["is_using"]);
                    unset($updateData["sub_show_main_process_title"]);
                    // unset($updateData["can_edit_flowno"]);
                    // unset($updateData["flow_sequence"]);
                    // "handle_way" => $handleWay,
                    // "countersign" => $countersign,
                    // "press_add_hour" => $pressAddHour,
                    unset($updateData["flow_name_py"]);
                    unset($updateData["flow_name_zm"]);
                    unset($updateData["flow_name_rules_html"]);
                    unset($updateData["flow_name_rules"]);
                    unset($updateData["can_edit_flowname"]);
                }
                // 创建人员范围为全体的处理
                if (isset($param["create_user"]) && $param["create_user"] == 'ALL') {
                    $updateData['create_user'] = "ALL";
                    unset($param['create_user']);
                } else {
                    $updateData['create_user'] = "";
                }
                if (isset($param["create_dept"]) && $param["create_dept"] == 'ALL') {
                    $updateData['create_dept'] = "ALL";
                    unset($param['create_dept']);
                } else {
                    $updateData['create_dept'] = "";
                }
                if (isset($param["create_role"]) && $param["create_role"] == 'ALL') {
                    $updateData['create_role'] = "ALL";
                    unset($param['create_role']);
                } else {
                    $updateData['create_role'] = "";
                }
                $createUser = isset($param['create_user']) ? $param['create_user'] : '';
                $createDept = isset($param['create_dept']) ? $param['create_dept'] : '';
                $createRole = isset($param['create_role']) ? $param['create_role'] : '';
                app($this->flowTypeRepository)->updateData($updateData, ["flow_id" => $flowId]);
                // 删除已有定义流程权限数据
                $where = ['flow_id' => [$flowId]];
                app($this->flowTypeCreateUserRepository)->deleteByWhere($where);
                app($this->flowTypeCreateRoleRepository)->deleteByWhere($where);
                app($this->flowTypeCreateDepartmentRepository)->deleteByWhere($where);
                // 插入自由流程可创建人员范围
                if (!empty($createUser)) {
                    $userData = [];
                    foreach (array_filter(explode(',', trim($createUser, ","))) as $v) {
                        $userData[] = ['flow_id' => $flowId, 'user_id' => $v];
                    }
                    app($this->flowTypeCreateUserRepository)->insertMultipleData($userData);
                }
                if (!empty($createRole)) {
                    $roleData = [];
                    foreach (array_filter(explode(',', trim($createRole, ","))) as $v) {
                        $roleData[] = ['flow_id' => $flowId, 'role_id' => $v];
                    }
                    app($this->flowTypeCreateRoleRepository)->insertMultipleData($roleData);
                }
                if (!empty($createDept)) {
                    $deptData = [];
                    foreach (array_filter(explode(',', trim($createDept, ","))) as $v) {
                        $deptData[] = ['flow_id' => $flowId, 'dept_id' => $v];
                    }
                    app($this->flowTypeCreateDepartmentRepository)->insertMultipleData($deptData);
                }
            }
            // 关于停用的处理
            if ($isUsing == $isUsingOld && $hideRunning == $hideRunningOld) {
            } else {
                // 获取所有当前flow_id下的运行流程run_id
                if ($runObject = app($this->flowRunRepository)->getFlowRunList(["search" => ["flow_id" => [$flowId]]])) {
                    if ($runObject->count()) {
                        $updateWhereArray = array(
                            "flow_run" => " AND is_effect = '2'",
                            "flow_run_process" => " AND is_effect = '2'",
                            "flow_run_step" => " AND frs.is_effect = '2'",
                        );
                        $flowRunArray = $runObject->pluck("run_id");
                        //停用的处理
                        if ($isUsing == "0" && count($flowRunArray)) {
                            if ($hideRunning == "0" && $hideRunningOld == "1") {
                                //仅停用，展示出运行流程
                                foreach ($flowRunArray as $key => $value) {
                                    //is_effect = 2 的设为生效
                                    app($this->flowRunService)->updateFlowIsEffect(array("run_id" => $value, "is_effect" => "1"), "true");
                                    $searchWhere = [
                                        'run_id' => [$value],
                                        'user_last_step_flag' =>[1]
                                    ];
                                    $todoList = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => $searchWhere,'fields' =>['user_id', 'flow_id', 'run_id', 'process_id', 'user_run_type', 'process_time','flow_run_process_id']]);
                                    if ($todoList) {
                                        foreach ($todoList as $todovalue) {
                                            $todu_push_params = [];
                                            $todu_push_params['receiveUser'] = $todovalue['user_id'];
                                            $todu_push_params['deliverUser'] = $own['user_id'];
                                            $todu_push_params['operationType'] = 'add';

                                            switch ($todovalue['user_run_type']) {
                                                case '1':
                                                    $todu_push_params['operationId'] = '1';
                                                    break;
                                                case '2':
                                                    $todu_push_params['operationId'] = '2';
                                                    break;
                                                case '3':
                                                    $todu_push_params['operationId'] = '4';
                                                    break;
                                                default:
                                                    $todu_push_params['operationId'] = '1';
                                                    break;
                                            }
                                            $todu_push_params['flowId'] = $todovalue['flow_id'];
                                            $todu_push_params['runId'] = $todovalue['run_id'];
                                            $todu_push_params['processId'] = $todovalue['process_id'];
                                            $todu_push_params['flowRunProcessId'] = $todovalue['flow_run_process_id'];
                                            $todu_push_params['viewType'] = $todovalue['process_time'] ? '1' : '0';
                                            // 操作推送至集成中心
                                            app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                                        }
                                    }
                                }
                            } else if ($hideRunning == "1") {
                                //停用且隐藏运行流程
                                foreach ($flowRunArray as $key => $value) {
                                    //设为失效
                                    app($this->flowRunService)->updateFlowIsEffect(array("run_id" => $value, "is_effect" => "2"));
                                    $searchWhere = [
                                        'run_id' => [$value],
                                        'user_last_step_flag' =>[1]
                                    ];
                                    $todoList = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => $searchWhere,'fields' =>['user_id', 'flow_id', 'run_id', 'process_id', 'user_run_type', 'process_time','flow_run_process_id']]);
                                    if ($todoList) {
                                        foreach ($todoList as $todovalue) {
                                            $todu_push_params = [];
                                            $todu_push_params['receiveUser'] = $todovalue['user_id'];
                                            $todu_push_params['deliverUser'] = $own['user_id'];
                                            $todu_push_params['operationType'] = 'add';
                                            $todu_push_params['operationId'] = '11';
                                            $todu_push_params['flowId'] = $todovalue['flow_id'];
                                            $todu_push_params['runId'] = $todovalue['run_id'];
                                            $todu_push_params['processId'] = $todovalue['process_id'];
                                            $todu_push_params['flowRunProcessId'] = $todovalue['flow_run_process_id'];
                                            $todu_push_params['viewType'] = $todovalue['process_time'] ? '1' : '0';
                                            // 操作推送至集成中心
                                            app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                                        }
                                    }
                                }
                            }
                        } else if ($isUsing == "1" && count($flowRunArray) && $hideRunningOld == "1") {
                            //将所有隐藏的展示出来
                            foreach ($flowRunArray as $key => $value) {
                                //is_effect = 2 的设为生效
                                app($this->flowRunService)->updateFlowIsEffect(array("run_id" => $value, "is_effect" => "1"), "true");
                                $searchWhere = [
                                    'run_id' => [$value],
                                    'user_last_step_flag' =>[1]
                                ];
                                $todoList = app($this->flowRunProcessRepository)->getFlowRunProcessList(['search' => $searchWhere,'fields' =>['user_id', 'flow_id', 'run_id', 'process_id', 'user_run_type', 'process_time','flow_run_process_id']]);
                                if ($todoList) {
                                    foreach ($todoList as $todovalue) {
                                        $todu_push_params = [];
                                        $todu_push_params['receiveUser'] = $todovalue['user_id'];
                                        $todu_push_params['deliverUser'] = $own['user_id'];
                                        $todu_push_params['operationType'] = 'add';
                                        switch ($todovalue['user_run_type']) {
                                            case '1':
                                                $todu_push_params['operationId'] = '1';
                                                break;
                                            case '2':
                                                $todu_push_params['operationId'] = '2';
                                                break;
                                            case '3':
                                                $todu_push_params['operationId'] = '4';
                                                break;
                                            default:
                                                $todu_push_params['operationId'] = '1';
                                                break;
                                        }
                                        $todu_push_params['flowId'] = $todovalue['flow_id'];
                                        $todu_push_params['runId'] = $todovalue['run_id'];
                                        $todu_push_params['processId'] = $todovalue['process_id'];
                                        $todu_push_params['flowRunProcessId'] = $todovalue['flow_run_process_id'];
                                        $todu_push_params['viewType'] = $todovalue['process_time'] ? '1' : '0';
                                        // 操作推送至集成中心
                                        app($this->flowLogService)->addOperationRecordToIntegrationCenter($todu_push_params);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // 如果这条流程没有其他设置，创建其他设置数据
            if ($flowotherObject = app($this->flowOthersRepository)->getFlowOthersInfo($flowId)) {
                if ($flowotherObject->count() == 0) {
                    app($this->flowOthersRepository)->insertData(["flow_id" => $flowId, "flow_show_text" => "1", "flow_autosave" => "0", "flow_to_doc" => "0"]);
                }
            }
            // 调用日志函数
            $logParam = [];
            // 历史数据
            $logParam["new_info"] = app($this->flowTypeRepository)->getFlowTypeInfoRepository(["flow_id" => $flowId])->toArray();
            $logParam["history_info"] = $flowTypeObject->toArray();
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_type&flow_id", $flowId, "basicInfo", $own, $saveType);
			if (isset($param['flow_sequence']) && $flowTypeObject->flow_sequence != $param['flow_sequence']) {
				Cache::put('flow_base_info_change_' . $flowId, 1, 1800000);
				// Cache::forget('flow_seq_num_' . $flowId);
				Cache::put('flow_seq_num_rule_before' . $flowId, $flowTypeObject->flow_sequence, 1800000);
				Cache::put('flow_seq_num_rule_after' . $flowId, $param['flow_sequence'], 1800000);
			}
            return "1";
        } else {
            return ['code' => ['0x000003', 'common']];
        }
    }

    /**
     * 删除定义流程
     *
     * @method removeFlowDefineBasicInfo
     *
     * @param  [type]                    $param  [description]
     * @param  [type]                    $flowId [description]
     *
     * @return [type]                            [description]
     */
    public function removeFlowDefineBasicInfo($param, $flowId, $own)
    {
        // 取某条定义流程的已运行流程数量，大于0，不能删除。
        // if($flowDefineResult = app($this->flowTypeRepository)->getFlowDefineList(["search" => ["flow_id" => [$flowId]]])) {
        //     if(count($flowDefineResult)) {
        //         if(!count($flowDefineResult[0]["flow_type_has_many_flow_run"])) {
        //             app($this->flowTypeRepository)->deleteById($flowId);
        //             app($this->flowProcessRepository)->deleteByWhere(["flow_id" => [$flowId]]);
        //             app($this->flowOthersRepository)->deleteByWhere(["flow_id" => [$flowId]]);
        //             app($this->flowReportRepository)->deleteByWhere(["flow_id" => [$flowId]]);
        //             // 删除已有定义流程权限数据
        //             $where = ['flow_id' => [$flowId]];
        //             app($this->flowTypeManageUserRepository)->deleteByWhere($where);
        //             app($this->flowTypeCreateUserRepository)->deleteByWhere($where);
        //             app($this->flowTypeCreateRoleRepository)->deleteByWhere($where);
        //             app($this->flowTypeCreateDepartmentRepository)->deleteByWhere($where);
        //             return "1";
        //         }
        //     }
        // }
        // 取某条定义流程的已运行流程数量，大于0，不能删除。
        if ($flowDefineResult = app($this->flowTypeRepository)->getFlowDefineList(["search" => ["flow_id" => [$flowId]]])) {
            if (count($flowDefineResult)) {
                if (count($flowDefineResult[0]["flow_type_has_many_flow_run"])) {
                    return ['code' => ['0x000006', 'common']];
                }
            }
        }
        $flowTypeObject = app($this->flowTypeRepository)->getDetail($flowId, false, ['form_id', 'flow_name']);
        $formId = $flowTypeObject->form_id;
        // 获取表单控件结构
        $formControlTypeArray = app($this->flowRunService)->getFlowFormControlStructure(["form_id" => $formId]);
        if (count($formControlTypeArray)) {
            if ($formId) {
                foreach ($formControlTypeArray as $controlId => $value) {
                    // 明细字段
                    if ($controlId == "detail-layout") {
                        // 删除明细字段表数据 新加
                        app($this->flowRunService)->deleteFlowRunFormData(["run_id" => $flowId, "form_id" => $formId . str_replace("DATA", "", $controlId)]);
                    }
                }
                // 删除表单数据表数据 新加
                app($this->flowRunService)->deleteFlowRunFormData(["run_id" => $flowId, "form_id" => $formId]);
            }
        }
        $runIdArray = [];
        $flowIdArray = [];
        $runObject = app($this->flowRunRepository)->getFlowRunList(["search" => ["flow_id" => [$flowId]]]);
        $flowRunArray = $runObject->pluck("run_id")->toArray();
        //$flowRunArray = []
        if (!empty($flowRunArray)) {
            $runIdArray = ['run_id' => [$flowRunArray, 'in']];
            //删除flow_countersign数据 流程会签 新加
            app($this->flowCountersignRepository)->deleteByWhere($runIdArray);
            //删除flow_run_feedback数据 流程签办反馈 新加
            app($this->flowRunFeedbackRepository)->deleteByWhere($runIdArray);
            //删除flow_run_process数据 流程运行步骤 新加
            app($this->flowRunProcessRepository)->reallyDeleteByWhere($runIdArray);
        }

        $flownodesparam["flow_id"] = $flowId;
        $flownodesparam['fields'][] = "node_id";
        $flownodesparam['returntype'] = "object";
        $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($flownodesparam)->pluck('node_id')->toArray();

        if (!empty($flowNodes)) {
            // 清空节点信息redis缓存
            foreach ($flowNodes as $value) {
                if (Redis::exists('flow_process_info_' . $value)) {
                    Redis::del('flow_process_info_' . $value);
                }
            }
            $nodeIdArray = ['node_id' => [$flowNodes, 'in']];
            //删除 flow_process_control_operation flow_process_control_operation_detail 数据
            $operationParam = ["search" => $nodeIdArray];
            // 删除字段控制缓存
            foreach ($flowNodes as $_flow_node_id) {
                if (Redis::exists('collect_control_purview_info_' . $_flow_node_id)) {
                    Redis::del('collect_control_purview_info_' . $_flow_node_id);
                }
            }
            $operationInfo = app($this->flowProcessControlOperationRepository)->getList($operationParam);
            $operationInfo = $operationInfo->pluck("operation_id")->toArray();
            app($this->flowProcessControlOperationRepository)->deleteByWhere($nodeIdArray);
            app($this->flowProcessControlOperationDetailRepository)->deleteByWhere(['operation_id' => [$operationInfo, 'in']]);
            //删除`flow_outsend`表数据 新加
            app($this->flowOutsendRepository)->deleteByWhere($nodeIdArray);
            //删除`flow_sun_workflow`表数据 新加
            app($this->flowSunWorkflowRepository)->deleteByWhere($nodeIdArray);
            //删除`flow_sun_workflow`表数据 配置的子流程数据
            app($this->flowSunWorkflowRepository)->deleteByWhere(['receive_flow_id' => [$flowId]]);

            $IdArray = ['id' => [$flowNodes, 'in']];
            //删除flow_process_user表数据 新加
            app($this->flowProcessUserRepository)->deleteByWhere($IdArray);
            //删除flow_process_role表数据 新加
            app($this->flowProcessRoleRepository)->deleteByWhere($IdArray);
            //删除flow_process_department表数据 新加
            app($this->flowProcessDepartmentRepository)->deleteByWhere($IdArray);
            //删除flow_process_default_user表数据 新加
            app($this->flowProcessDefaultUserRepository)->deleteByWhere($IdArray);
            //删除flow_process_copy_user表数据 新加
            app($this->flowProcessCopyUserRepository)->deleteByWhere($IdArray);
            //删除flow_process_copy_role表数据 新加
            app($this->flowProcessCopyRoleRepository)->deleteByWhere($IdArray);
            //删除flow_process_copy_department表数据 新加
            app($this->flowProcessCopyDepartmentRepository)->deleteByWhere($IdArray);
            // 删除自由节点相关信息
            app($this->flowProcessFreeRepository)->deleteByWhere(['node_id' => [$flowNodes, 'in']]);
            app($this->flowProcessFreeStepRepository)->deleteByWhere(['node_id' => [$flowNodes, 'in']]);
            app($this->flowProcessFreePresetRepository)->deleteByWhere(['node_id' => [$flowNodes, 'in']]);
        }

        $flowIdArray = ['flow_id' => [$flowId]];
        //删除flow_favorite数据 新加
        app($this->flowFavoriteRepository)->deleteByWhere($flowIdArray);
        //删除flow_term数据  流程出口条件 新加
        app($this->flowTermRepository)->deleteByWhere($flowIdArray);
        //删除flow_agency_detail数据 流程委托详情 新加
        app($this->flowAgencyDetailRepository)->deleteByWhere($flowIdArray);
        //删除flow_run数据  新加
        app($this->flowRunRepository)->reallyDeleteByWhere($flowIdArray);

        app($this->flowTypeRepository)->deleteById($flowId);
        app($this->flowProcessRepository)->deleteByWhere($flowIdArray);
        app($this->flowOthersRepository)->deleteByWhere($flowIdArray);
        app($this->flowReportRepository)->deleteByWhere($flowIdArray);
        // 删除监控规则相关数据
        app($this->flowTypeManageUserRepository)->deleteByWhere($flowIdArray);
        app($this->flowTypeManageRuleRepository)->deleteByWhere($flowIdArray);
        app($this->flowTypeManageRoleRepository)->deleteByWhere($flowIdArray);
        app($this->flowTypeManageScopeUserRepository)->deleteByWhere($flowIdArray);
        app($this->flowTypeManageScopeDeptRepository)->deleteByWhere($flowIdArray);
        // 删除已有定义流程权限数据
        app($this->flowTypeCreateUserRepository)->deleteByWhere($flowIdArray);
        app($this->flowTypeCreateRoleRepository)->deleteByWhere($flowIdArray);
        app($this->flowTypeCreateDepartmentRepository)->deleteByWhere($flowIdArray);
        // 删除超时提醒设置
        app($this->flowOverTimeRemindRepository)->deleteByWhere($flowIdArray);
        app($this->flowRunOverTimeRepository)->deleteByWhere($flowIdArray);
        //删除首节点自由流程必填舍子
        app($this->flowRequiredForFreeFlowRepository)->deleteByWhere($flowIdArray);
        // 删除委托规则
        app($this->flowAgencyDetailRepository)->deleteByWhere($flowIdArray);
        $agentLists = app($this->flowAgencyRepository)->getFlowAgencyList();
        if ($agentLists) {
            $agentLists = $agentLists->toArray();
            foreach ($agentLists as $key => $value) {
                if (isset($value['flow_id_string']) && !empty($value['flow_id_string'])) {
                    $new_id = str_replace($flowId . ',', '', $value['flow_id_string']);
                    app($this->flowAgencyRepository)->updateData(['flow_id_string' => $new_id], ["flow_agency_id" => $value['flow_agency_id']]);
                }
            }
        }
        //记录日志

        $logContent = trans("flow.0x030087", ['flow_name' => $flowTypeObject->flow_name, 'flow_id' => $flowId, 'user_name' => $own['user_name']]); // '定义流程: '.$flowTypeObject->flow_name.'  flow_id: ' .$flowId.' 被: '.$own['user_name'].' 删除';
        $log_type = 'defineFlowDelete';
        $userId = $own['user_id'];
        app($this->flowLogService)->addSystemLog($userId, $logContent, $log_type, 'flow_type', $flowId , '' , 0 , '' , [] , $flowTypeObject->flow_name);
    }

    /**
     * 固定流程统一设置催促时间
     *
     * @method unifiedSetPresstime
     *
     * @param  [type]                    $param  [description]
     * @param  [type]                    $flowId [description]
     *
     * @return [type]                            [description]
     */
    public function unifiedSetPresstime($param, $flowId, $own = [])
    {
        $flowPressTimeSetDay = (isset($param['flowPressTimeSetDay']) && !empty($param['flowPressTimeSetDay']))? $param['flowPressTimeSetDay'] : 0;
        $flowPressTimeSetHour = (isset($param['flowPressTimeSetHour']) && !empty($param['flowPressTimeSetHour'])) ? $param['flowPressTimeSetHour'] : 0;
        $limitSkipHolidayToggle = (isset($param['limit_skip_holiday_toggle']) && !empty($param['limit_skip_holiday_toggle']))? $param['limit_skip_holiday_toggle'] : 0;
        if ($flowPressTimeSetDay || $flowPressTimeSetHour) {
            if ($flowPressTimeSetDay > 0) {
                $flowPressTimeSetHour = $flowPressTimeSetHour + $flowPressTimeSetDay * 24;
            }
            $pressAddHour = ($flowPressTimeSetHour);
        } else {
            // 如果为空，将清空所有节点的催促时间设置
            $pressAddHour = "";
        }
        $historyInfo = [];
        $newInfo = [];
        $flowProcessData = [
            "flow_id" => $flowId,
            "returntype" => "array",
        ];
        if ($flowProcessInfo = app($this->flowProcessRepository)->getFlowProcessList($flowProcessData)) {
            if (!empty($flowProcessInfo)) {
                foreach ($flowProcessInfo as $key => $flowProcessInfoItem) {
                    $nodeId = isset($flowProcessInfoItem["node_id"]) ? $flowProcessInfoItem["node_id"] : "";
                    $processName = isset($flowProcessInfoItem["process_name"]) ? $flowProcessInfoItem["process_name"] : "";
                    $processPressAddHour = isset($flowProcessInfoItem["press_add_hour"]) ? $flowProcessInfoItem["press_add_hour"] : "";
                    if ($pressAddHour != $processPressAddHour) {
                        $historyInfo[$nodeId] = [
                            "node_id" => $nodeId,
                            "process_name" => $processName,
                            "press_add_hour" => $processPressAddHour,
                        ];
                        $newInfo[$nodeId] = [
                            "node_id" => $nodeId,
                            "process_name" => $processName,
                            "press_add_hour" => $pressAddHour,
                        ];
                    }
                }
            }
        }
        $updateData = ['press_add_hour' => $pressAddHour , 'limit_skip_holiday_toggle' =>$limitSkipHolidayToggle ];
        $updateResult = app($this->flowProcessRepository)->updateData($updateData, ["flow_id" => $flowId]);

        $flownodesparam["flow_id"] = $flowId;
        $flownodesparam['fields'][] = "node_id";
        $flownodesparam['returntype'] = "object";
        $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($flownodesparam)->pluck('node_id')->toArray();
        // 清空节点信息redis缓存
        if (!empty($flowNodes)) {
            foreach ($flowNodes as $value) {
                if (Redis::exists('flow_process_info_' . $value)) {
                    Redis::del('flow_process_info_' . $value);
                }
            }
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = ["press_add_hour" => $newInfo];
        $logParam["history_info"] = ["press_add_hour" => $historyInfo];
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&flow_id", $flowId, "editNodeBaseUnifiedSetPresstime", $own, "flow");
        return $updateResult;
    }

    /**
     * 【定义流程】 编辑监控人员
     *
     * @param  {[type]}                 $param  [description]
     * @param  {[type]}                 $flowId [description]
     *
     * @return {[type]}                         [description]
     * @author dingpeng
     *
     */
    public function modifyFlowMonitor($param, $flowId, $own)
    {
        if ($flowId == "batchFlow") {
            $batchFlow = isset($param["batchFlow"]) ? $param["batchFlow"] : [];
            if (empty($batchFlow)) {
                // 保存失败，未获取到流程ID
                return ['code' => ['0x030154', 'flow']];
            } else {
                unset($param["batchFlow"]);
                $saveResult = "";
                foreach ($batchFlow as $key => $flowId) {
                    $saveResult = $this->modifyFlowMonitorRealize($param, $flowId, $own, "batchFlow");
                    if (is_array($saveResult) && isset($saveResult["code"])) {
                        return $saveResult;
                    }
                }
                return "1";
            }
        } else {
            return $this->modifyFlowMonitorRealize($param, $flowId, $own);
        }
    }

    /**
     * 【定义流程】 编辑监控人员函数本体
     * @param  [type] $param  [description]
     * @param  [type] $flowId [description]
     * @return [type]         [description]
     */
    public function modifyFlowMonitorRealize($param, $flowId, $own, $saveType = "")
    {
        if (!isset($param['allow_monitor']) || !isset($param['flow_type_has_many_manage_rule']) || ($param['allow_monitor'] == '1' && empty($param['flow_type_has_many_manage_rule']))) {
            // 监控规则不能为空
            return ['code' => ['0x030156', 'flow']];
        }

        $historyInfo = $this->getFlowDefineInfoService([], $flowId);

        // 删除已有监控人员、角色数据;删除监控范围数据
        $where = ['flow_id' => [$flowId]];
        app($this->flowTypeManageRuleRepository)->deleteByWhere($where);
        app($this->flowTypeManageUserRepository)->deleteByWhere($where);
        app($this->flowTypeManageRoleRepository)->deleteByWhere($where);
        app($this->flowTypeManageScopeUserRepository)->deleteByWhere($where);
        app($this->flowTypeManageScopeDeptRepository)->deleteByWhere($where);

        if ($param['allow_monitor'] == '1') {
            $flowTypeUpdateData = ['allow_monitor' => 1];
            // 启用监控
            foreach ($param['flow_type_has_many_manage_rule'] as $key => $value) {
                $manageRuleInsertData = [
                    'flow_id' => $flowId,
                    'monitor_user_type' => isset($value['monitor_user_type']) ? $value['monitor_user_type'] : 1,
                    'monitor_scope' => isset($value['monitor_scope']) ? $value['monitor_scope'] : 0,
                    'allow_view' => isset($value['allow_view']) ? $value['allow_view'] : 0,
                    'allow_turn_back' => isset($value['allow_turn_back']) ? $value['allow_turn_back'] : 0,
                    'allow_delete' => isset($value['allow_delete']) ? $value['allow_delete'] : 0,
                    'allow_take_back' => isset($value['allow_take_back']) ? $value['allow_take_back'] : 0,
                    'allow_end' => isset($value['allow_end']) ? $value['allow_end'] : 0,
                    'allow_urge' => isset($value['allow_urge']) ? $value['allow_urge'] : 0,
                ];
                $insertRule = app($this->flowTypeManageRuleRepository)->insertData($manageRuleInsertData);
                $insertRuleId = $insertRule->rule_id ?? 0;
                if (empty($insertRuleId)) {
                    continue;
                }
                if (isset($value['monitor_user_type'])) {
                    if ($value['monitor_user_type'] == '1') {
                        // 如果监控人员类型是指定人员 插入监控人员数据
                        $this->insertFlowTypeManageData($value['monitor_user'], $this->flowTypeManageUserRepository, 'user_id', $insertRuleId, $flowId);
                    } elseif ($value['monitor_user_type'] == '2') {
                        // 如果监控人员类型是指定角色 插入监控角色数据
                        $this->insertFlowTypeManageData($value['monitor_role'], $this->flowTypeManageRoleRepository, 'role_id', $insertRuleId, $flowId);
                    }
                }
                if (isset($value['monitor_scope'])) {
                    if ($value['monitor_scope'] == '2') {
                        // 监控范围为指定部门
                        $this->insertFlowTypeManageData($value['monitor_scope_dept'], $this->flowTypeManageScopeDeptRepository, 'dept_id', $insertRuleId, $flowId);
                    } elseif ($value['monitor_scope'] == '5') {
                        // 监控范围为指定人员
                        $this->insertFlowTypeManageData($value['monitor_scope_user'], $this->flowTypeManageScopeUserRepository, 'user_id', $insertRuleId, $flowId);
                    }
                }
            }
        }
        if (isset($historyInfo['allow_monitor']) && ($historyInfo['allow_monitor'] != $param['allow_monitor'])) {
            // 更新流程是否开启监控参数
            app($this->flowTypeRepository)->updateData(['allow_monitor' => $param['allow_monitor']], ['flow_id' => $flowId]);
        }
        // 调用日志函数
        $logParam = [];
        $newInfo = $this->getFlowDefineInfoService([], $flowId);
        $logParam["new_info"] = $newInfo;
        $logParam["history_info"] = $historyInfo;
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_type&flow_id", $flowId, "monitor", $own, $saveType);
        return "1";
    }

    /**
     * 【定义流程】设置监控规则子函数（新增监控和范围数据）
     *
     * @param string $data [插入的数据]
     * @param string $repository [资源]
     * @param string $insertKey [插入数据的key]
     * @param string $insertRuleId [关联的监控规则ID]
     * @param string $flowId [关联的流程ID]
     *
     * @return {[boolean]}              [description]
     * @author 缪晨晨
     *
     */
    public function insertFlowTypeManageData($data, $repository, $insertKey, $insertRuleId, $flowId)
    {
        if (isset($data) && !empty($data)) {
            if (!is_array($data)) {
                $data = explode(',', trim($data, ","));
            }
            if (!empty($data)) {
                $scopeUserData = [];
                foreach (array_filter($data) as $value) {
                    $scopeUserData[] = ['rule_id' => $insertRuleId, 'flow_id' => $flowId, $insertKey => $value];
                }
                return app($repository)->insertMultipleData($scopeUserData);
            }
        }
    }

    /**
     * 【定义流程】 编辑其他设置
     *
     * @param  {[type]}                 $param  [description]
     * @param  {[type]}                 $flowId [description]
     *
     * @return {[type]}                         [description]
     * @author dingpeng
     *
     */
    public function modifyFlowOtherInfo($param, $flowId, $own = [])
    {
        // 定义流程-流程设置，有多个页面都调用此路由，用个参数记录一下来源，用于处理日志
        $routFrom = isset($param['route_from']) ? $param['route_from'] : '';
        $flow_to_doc = isset($param['flow_to_doc']) ? $param['flow_to_doc'] : '';
        $flow_autosave = isset($param['flow_autosave']) ? $param['flow_autosave'] : '0';
        $flow_autosave_time = isset($param['flow_autosave_time']) ? $param['flow_autosave_time'] : '0';
        // $lable_show_default = isset($param['lable_show_default']) ? $param['lable_show_default'] : '1';
        $flow_show_name = isset($param['flow_show_name']) ? $param['flow_show_name'] : '';
        $file_folder_id = isset($param['file_folder_id']) ? $param['file_folder_id'] : '';
        $flow_show_history = isset($param['flow_show_history']) ? $param['flow_show_history'] : '1';
        $feed_back_after_flow_end = isset($param['feed_back_after_flow_end']) ? $param['feed_back_after_flow_end'] : '0';
        $submit_without_dialog = isset($param['submit_without_dialog']) ? $param['submit_without_dialog'] : '0';
        $first_node_delete_flow = isset($param['first_node_delete_flow']) ? $param['first_node_delete_flow'] : '0';
        $flow_print_template_toggle = isset($param['flow_print_template_toggle']) ? $param['flow_print_template_toggle'] : '0';
        $flow_filing_template_toggle = isset($param['flow_filing_template_toggle']) ? $param['flow_filing_template_toggle'] : '0';
        $flow_send_back_required = isset($param['flow_send_back_required']) ? $param['flow_send_back_required'] : '0';
        $flow_send_back_submit_method = isset($param['flow_send_back_submit_method']) ? $param['flow_send_back_submit_method'] : '0';
        $alow_select_handle = isset($param['alow_select_handle']) ? $param['alow_select_handle'] : '1';
        $flow_end_remind = isset($param['flow_end_remind']) ? $param['flow_end_remind'] : '3';
        $remind_target = isset($param['remind_target']) ? $param['remind_target'] : '3';
        $appoint_process = isset($param['appoint_process']) ? $param['appoint_process'] : '';
        $flow_detail_page_choice_other_tabs = isset($param['flow_detail_page_choice_other_tabs']) ? $param['flow_detail_page_choice_other_tabs'] : '';
        $flow_submit_hand_remind_toggle = isset($param['flow_submit_hand_remind_toggle']) ? $param['flow_submit_hand_remind_toggle'] : '';
        $continuous_submission = isset($param['continuous_submission']) ? $param['continuous_submission'] : '1';
        $without_back = isset($param['without_back']) ? $param['without_back'] : '0';
        $without_required = isset($param['without_required']) ? $param['without_required'] : '0';
        $inheritance_sign = isset($param['inheritance_sign']) ? $param['inheritance_sign'] : '2';
        $flow_filing_conditions_setting_toggle = isset($param['flow_filing_conditions_setting_toggle']) ? $param['flow_filing_conditions_setting_toggle'] : '0';
        $flow_filing_conditions_setting_value = isset($param['flow_filing_conditions_setting_value']) ? $param['flow_filing_conditions_setting_value'] : '';

        $flow_filing_folder_rules_toggle = isset($param['flow_filing_folder_rules_toggle']) ? $param['flow_filing_folder_rules_toggle'] : '0';
        $flow_filing_folder_rules = isset($param['flow_filing_folder_rules']) ? json_encode($param['flow_filing_folder_rules']) : '';
        $flow_filing_folder_rules_html = isset($param['flow_filing_folder_rules_html']) ? $param['flow_filing_folder_rules_html'] : '';
        $flow_show_data_template = isset($param['flow_show_data_template']) ? $param['flow_show_data_template'] : '0';
        $flow_filing_document_create = isset($param['flow_filing_document_create']) ? $param['flow_filing_document_create'] : '1';
        $flow_show_user_template = isset($param['flow_show_user_template']) ? $param['flow_show_user_template'] : '0';
        $flow_filing_conditions_verify_mode = isset($param['flow_filing_conditions_verify_mode']) ? $param['flow_filing_conditions_verify_mode'] : '1';
        $flow_filing_conditions_verify_url = isset($param['flow_filing_conditions_verify_url']) ? $param['flow_filing_conditions_verify_url'] : '';
        $form_control_filter = isset($param['form_control_filter']) ? $param['form_control_filter'] : '';
        $flow_submit_hand_overtime_toggle = isset($param['flow_submit_hand_overtime_toggle']) ? $param['flow_submit_hand_overtime_toggle'] : '0';
        $forward_after_flow_end = isset($param['forward_after_flow_end']) ? $param['forward_after_flow_end'] : '0';
        $schedule_config = $param['scheduleConfig'] ?? []; // 定时任务参数
        $trigger_schedule = $param['trigger_schedule'] ?? 0;
        $flow_send_back_verify_condition = isset($param['flow_send_back_verify_condition']) ? $param['flow_send_back_verify_condition'] : '1';
        $flow_print_times_limit_for_show = $param['flow_print_times_limit_for_show'] ?? -1; // 流程打印次数限制
        $flow_print_times_limit = ($flow_print_times_limit_for_show == 1) ? $param['flow_print_times_limit'] : -1; // 流程打印次数限制，设置了则直接用，未设置则取-1为不限制
        $no_print_until_flow_end = $param['no_print_until_flow_end'] ?? -1; // 流程结束后才允许打印
        $flow_print_template_mode = $param['flow_print_template_mode'] ?? 1; // 流程打印规则生效模式

        $updateData = [
            "flow_to_doc" => $flow_to_doc,
            "flow_show_text" => "1",
            "flow_autosave" => $flow_autosave,
            "flow_autosave_time" => $flow_autosave_time,
            // "lable_show_default" => $lable_show_default,
            "flow_show_name" => $flow_show_name,
            "file_folder_id" => $file_folder_id,
            "feed_back_after_flow_end" => $feed_back_after_flow_end,
            "submit_without_dialog" => $submit_without_dialog,
            "first_node_delete_flow" => $first_node_delete_flow,
            "flow_send_back_required" => $flow_send_back_required,
            "flow_print_template_toggle" => $flow_print_template_toggle,
            "flow_filing_template_toggle" => $flow_filing_template_toggle,
            "flow_send_back_submit_method" => $flow_send_back_submit_method,
            "alow_select_handle" => $alow_select_handle,
            "flow_end_remind" => $flow_end_remind,
            "remind_target" => $remind_target,
            "appoint_process" => $appoint_process,
            "flow_detail_page_choice_other_tabs" => $flow_detail_page_choice_other_tabs,
            "flow_submit_hand_remind_toggle" => $flow_submit_hand_remind_toggle,
            "continuous_submission" => $continuous_submission,
            "without_back" => $without_back,
            "without_required" => $without_required,
            "inheritance_sign" => $inheritance_sign,
            "flow_filing_conditions_setting_toggle" => $flow_filing_conditions_setting_toggle,
            "flow_filing_conditions_setting_value" => $flow_filing_conditions_setting_value,
            "flow_show_history" => $flow_show_history,
            "flow_filing_folder_rules_toggle" => $flow_filing_folder_rules_toggle,
            "flow_filing_folder_rules" => $flow_filing_folder_rules,
            "flow_filing_folder_rules_html" => $flow_filing_folder_rules_html,
            "flow_show_data_template" => $flow_show_data_template,
            "flow_filing_document_create" => $flow_filing_document_create,
            "flow_show_user_template" => $flow_show_user_template,
            "flow_filing_conditions_verify_mode" => $flow_filing_conditions_verify_mode,
            "flow_filing_conditions_verify_url" => $flow_filing_conditions_verify_url,
            "form_control_filter" => $form_control_filter,
            'flow_submit_hand_overtime_toggle'=>$flow_submit_hand_overtime_toggle,
            'forward_after_flow_end' => $forward_after_flow_end,
            'trigger_schedule' => $trigger_schedule,
            'flow_send_back_verify_condition' => $flow_send_back_verify_condition,
            'flow_print_times_limit' => $flow_print_times_limit,
            'no_print_until_flow_end' => $no_print_until_flow_end,
            'flow_send_back_verify_condition' => $flow_send_back_verify_condition,
            "flow_print_template_mode" => $flow_print_template_mode,
        ];
        // 过滤待保存的数组，根据页面不同，配置不同的过滤规则，达到只保存指定字段的效果
        $updateData = app($this->flowLogService)->flowOthersUpdateParamsFilter($updateData, $routFrom, $flowId);
        if ($flowId == "batchFlow") {
            $batchFlow = isset($param["batchFlow"]) ? $param["batchFlow"] : [];
            if (empty($batchFlow)) {
                // 保存失败，未获取到流程ID
                return ['code' => ['0x030154', 'flow']];
            } else {
                unset($param["batchFlow"]);
                $saveResult = "";
                foreach ($batchFlow as $key => $flowId) {
                    // 历史数据
                    $flowOthersInfo = app($this->flowOthersRepository)->findFlowOthers($flowId, "*");
                    $logParam = [];
                    // 如果是自由流程，启用移动端流程办理页面待填写控件筛选此项设置为0，设置日志中也不记录此项
                    $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
                    if (!empty($flowTypeInfo->flow_type) && $flowTypeInfo->flow_type == '2') {
                        $freeFlowUpdateData = $updateData;
                        $freeFlowUpdateData['form_control_filter'] = 0;
                        $saveResult = (bool) app($this->flowOthersRepository)->updateData($freeFlowUpdateData, ["flow_id" => $flowId]);
                        unset($freeFlowUpdateData['form_control_filter']);
                        $logParam["new_info"] = $freeFlowUpdateData;
                        if (isset($flowOthersInfo['form_control_filter'])) {
                            unset($flowOthersInfo['form_control_filter']);
                        }
                        $logParam["history_info"] = $flowOthersInfo;
                    } else {
                        $logParam["new_info"] = $updateData;
                        $logParam["history_info"] = $flowOthersInfo;
                        $saveResult = (bool) app($this->flowOthersRepository)->updateData($updateData, ["flow_id" => $flowId]);
                    }
                    // 调用日志函数
                    app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_others&flow_id", $flowId, $routFrom, $own, "batchFlow");
                }
                return $saveResult;
            }
        } else {
            if (isset($param['flow_filing_template_toggle']) && $param['flow_filing_template_toggle'] == 0) {
                //关闭规则时清除规则，防止删除子表单时错误提示子表单已被应用
                app($this->flowFormTemplateRuleRepository)->deleteByWhere(['flow_id' => [$flowId], 'template_type' => ['filing']]);
            }
            if (isset($param['flow_print_template_toggle']) && $param['flow_print_template_toggle'] == 0) {
                //关闭规则时清除规则，防止删除子表单时错误提示子表单已被应用
                app($this->flowFormTemplateRuleRepository)->deleteByWhere(['flow_id' => [$flowId], 'template_type' => ['print']]);
            }
            // 历史数据
            $flowOthersInfo = app($this->flowOthersRepository)->findFlowOthers($flowId, "*");
            // 如果是归档设置/打印模板设置页面，把归档模板列表拼接进历史数据info
            if (($routFrom == "editOtherFiling" || $routFrom == "editOtherPrint") && isset($param["history_rule_list"])) {
                $flowOthersInfo["history_rule_list"] = $param["history_rule_list"];
            }
            // 如果是[表单模板数据设置]页面，把[表单模板数据]历史数据、新数据拼接进info
            if ($routFrom == "editOtherData" && isset($param["history_flow_data_template"]) && isset($param["new_flow_data_template"])) {
                // 历史
                $flowOthersInfo["flow_data_template"] = $param["history_flow_data_template"];
                // new
                $updateData["flow_data_template"] = $param["new_flow_data_template"];
            }
            // 保存函数本体
            $saveResult = (bool) app($this->flowOthersRepository)->updateData($updateData, ["flow_id" => $flowId]);

            // 20200408,zyx,增加定时任务参数
            if ($trigger_schedule) {
                if ($schedule_config) {
                    // 格式化处理定时任务参数配置
                    $schedule_config = app($this->flowParseService)->parseScheduleConfig($schedule_config);
                    $schedule_config['flow_id'] = $flowId;
                    // 清除原来的定时任务配置
                    DB::table('flow_schedule')->where(['flow_id' => $flowId])->delete();
                    // 插入新的定时任务配置
                    DB::table('flow_schedule')->insert($schedule_config);
                }
            } else {
                // 清除原来的定时任务配置
                DB::table('flow_schedule')->where(['flow_id' => $flowId])->delete();
            }


            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = $updateData;
            $logParam["history_info"] = $flowOthersInfo;
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_others&flow_id", $flowId, $routFrom, $own, "flow");
            return $saveResult;
        }
    }

    /**
     * 【定义流程】 【节点设置】 获取节点列表
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function getFlowNodeListService($param, $flowId)
    {
        $param = $this->parseParams($param);

        $param["flow_id"] = $flowId;
        if (isset($param["requestFrom"]) && $param["requestFrom"] == "nodeSelect") {
            $param['fields'][] = "head_node_toggle";
            $param['fields'][] = "sort";
            $param['fields'][] = "process_transact_type";
            $param['fields'][] = "process_type";
        }
        $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($param);
        if (isset($param['returnNodesList']) && $param['returnNodesList']) {
            if (isset($param['addEndFilter']) && $param['addEndFilter']) {
                $flowNodes[] = ['node_id' => 0, 'process_name' => trans("flow.0x030088")]; // 已结束
            }
            return $flowNodes;
        }
        if (isset($param["requestFrom"]) && ($param["requestFrom"] == "nodeSelect" || $param["requestFrom"] == "nodelist")) {
            $newflowNodes = [];
            foreach ($flowNodes as $key => $value) {
                if (isset($param['set_merge']) && isset($param['current_node'])  &&  ($value['process_type'] == 'free' || $value['node_id'] == $param['current_node']) ) {
                    continue;
                }
                if ($value['head_node_toggle'] === 1) {
                    $flowNodes[$key]['process_name'] = $value['process_name'] . "[" . trans("flow.0x030089") . "]"; // 首节点
                }
                array_push($newflowNodes, $flowNodes[$key]);
            }
            return $newflowNodes;
        } else {
            if ( isset($param['exclude_free']) && $param['exclude_free'] == 1 ) {
                // 是否去除独立的节点
                $process_to = '';
                foreach ($flowNodes as $nodeKey => $nodeValue) {
                    $process_to = $process_to.",".$nodeValue['process_to'];
                }
                $process_to = array_unique(explode(',', $process_to));
                unset($process_to[0]);
                foreach ($flowNodes as $nodeKey => $nodeValue) {
                    if ( $nodeValue['head_node_toggle'] != 1) {
                        if (!in_array($nodeValue['node_id'], $process_to) && empty($nodeValue['process_to'])) {
                            unset($flowNodes[$nodeKey]);
                        }
                    }
                }

            }
            $flowEdges = app($this->flowTermRepository)->getFlowNodeOutletList(["flow_id" => $flowId]);
            return [
                "nodes" => $flowNodes,
                "edges" => $flowEdges,
            ];
        }
    }
    /**
     * 【定义流程】 【节点设置】 获取节点列表-查看办理页面
     *
     * @author dingpeng
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     */
    public function getFlowNodeListForRunPage($param, $flowId, $userInfo)
    {
        $param = $this->parseParams($param);
        $param["flow_id"] = $flowId;
        $runId = $param['run_id'];
        unset($param['run_id']);
        $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($param);
        $flowEdges = app($this->flowTermRepository)->getFlowNodeOutletList(["flow_id" => $flowId]);
        $edgesInfo = [];
        foreach ($flowEdges as  $edges) {
            $edgesInfo[] = $edges['source_id'].'_'.$edges['target_id'];
        }
        $freeProcessInfo = [];
        $freeProcessSetpInfo = [];
        if ($runId) {
            // 获取设置的自由节点
            foreach ($flowNodes as $key => $value) {
                if ($value['process_type'] == 'free') {
                    // 获取父级节点位置信息
                    $position = json_decode($value['position']);
                    $left = 50;
                    $top = 50;
                    if (isset($position->left)) {
                        $left = intval($position->left);
                    }
                    if (isset($position->top)) {
                        $top = intval($position->top);
                    }
                    // 获取自由节点设置流转列表
                    $_freeProcessInfo = app($this->flowRunService)->getFreeNodeStepList($runId,$value['node_id'],$param = []);
                    if ($_freeProcessInfo) {
                        $_freeProcessInfo = $_freeProcessInfo->toArray();
                        foreach ($_freeProcessInfo as $_key => $_value) {
                            // 如果是上级审批 查找是否流转过
                            if ($_value['is_superior']) {
                                $flowRunProcessData = [
                                    "run_id" => $_value['run_id'],
                                    "search" => ["flow_process" => [$_value['node_id']], "free_process_step" => [$_value['step_id']]],
                                ];
                                if ($flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($flowRunProcessData)) {
                                    if ($flowRunProcessObject->count() == 0) {
                                        continue;
                                    }
                                }
                            }
                            $processTo = '';
                            if (isset($_freeProcessInfo[$_key+1]) && isset($_freeProcessInfo[$_key+1]['step_id'])) {
                                $processTo = floatval($_value['run_id']).floatval($_freeProcessInfo[$_key+1]['step_id']).floatval($_value['node_id']).'00001';
                            }
                            // 虚拟自由节点位置信息
                            $left = $left + 100;
                            $top = $top + 100;
                            $_position = ['left'=>$left,'top'=>$top];
                            $_node_id = floatval($_value['run_id']).floatval($_value['step_id']).floatval($_value['node_id']).'00001';
                            $freeProcessInfo[] = [
                                'node_id' => $_node_id,
                                'flow_id' => $flowId,
                                'process_name' => $_value['process_name'],
                                'process_type' => 'free',
                                'process_to' => $processTo,
                                'position' => json_encode($_position),
                            ];
                            // 增加自由节点父节点流出节点信息
                            if ($_key == 0) {
                                $flowNodes[$key]['process_to'] = !empty($flowNodes[$key]['process_to']) ? ($flowNodes[$key]['process_to'].','.$_node_id) : $_node_id;
                                // 增加edges信息
                                if (!in_array($flowNodes[$key]['node_id'].'_'.$_node_id, $edgesInfo) && $_node_id) {
                                    $freeProcessSetpInfo[] = [
                                        'condition' => '',
                                        'flow_id' => $flowId,
                                        'source_id' => $flowNodes[$key]['node_id'],
                                        'target_id' => $_node_id,
                                    ];
                                    $edgesInfo[] = $flowNodes[$key]['node_id'].'_'.$_node_id;
                                }

                            }
                            if (!in_array($_node_id.'_'.$processTo, $edgesInfo) && $_node_id && $processTo) {
                                // 增加edges信息
                                $freeProcessSetpInfo[] = [
                                    'condition' => '',
                                    'flow_id' => $flowId,
                                    'source_id' => $_node_id,
                                    'target_id' => $processTo,
                                ];
                                $edgesInfo[] = $_node_id.'_'.$processTo;
                            }
                        }
                    }
                }
            }
            if ($freeProcessSetpInfo) {
                $flowNodes = array_merge($flowNodes, $freeProcessInfo);
            }
            // 获取设置的自由节点流转信息
        }
        // 追加自由节点流转步骤
        if($flowRunningInfo = app($this->flowRunRepository)->getFlowRunningInfo($runId, [])) {
            $flowRunningInfo = $flowRunningInfo->toArray();
            $flowPorcessInfos = $flowRunningInfo["flow_run_has_many_flow_run_process"];
            // 按分支来追加数据
            $barchInfo = array_group_by($flowPorcessInfos, 'branch_serial');
            foreach ($barchInfo as $key => $flowPorcessInfo) {
                foreach ($flowPorcessInfo as $keys => $values) {
                    if ($values['process_type'] == 'free' && $values['free_process_step'] !== 0) {
                        $current_node_id = floatval($values['run_id']).floatval($values['free_process_step']).floatval($values['flow_process']).'00001';
                    }else {
                        $current_node_id = $values['flow_process'];
                    }
                    $currentProcessId = $values['process_id'];
                    if(isset($flowPorcessInfo[$keys+1]['process_type']) && $flowPorcessInfo[$keys+1]['process_type'] == 'free' && $flowPorcessInfo[$keys+1]['free_process_step'] != 0) {
                        $next_node_id = floatval($flowPorcessInfo[$keys+1]['run_id']).floatval($flowPorcessInfo[$keys+1]['free_process_step']).floatval($flowPorcessInfo[$keys+1]['flow_process']).'00001';
                    }else {
                        $next_node_id = isset($flowPorcessInfo[$keys+1]['flow_process']) ? $flowPorcessInfo[$keys+1]['flow_process'] : '';
                    }
                    $nextProcessId = '';
                    if(isset($flowPorcessInfo[$keys+1]['process_id']) && $flowPorcessInfo[$keys+1]['process_id']) {
                        $nextProcessId = $flowPorcessInfo[$keys+1]['process_id'];
                    }
                    if ($current_node_id && $next_node_id && !in_array($current_node_id.'_'.$next_node_id, $edgesInfo)) {

                        if ($key) {
                            $freeProcessSetpInfo[] = [
                                'condition' => '',
                                'flow_id' => $flowId,
                                'source_id' => $current_node_id,
                                'target_id' => $next_node_id,
                            ];
                            $edgesInfo[] = $current_node_id.'_'.$next_node_id;
                        }else {
                            //branch_serial为0时，可能存在两个节点跨越并发分支的情况
                            if ($currentProcessId && $nextProcessId && (($nextProcessId - $currentProcessId) ==1)) {
                                $freeProcessSetpInfo[] = [
                                    'condition' => '',
                                    'flow_id' => $flowId,
                                    'source_id' => $current_node_id,
                                    'target_id' => $next_node_id,
                                ];
                                $edgesInfo[] = $current_node_id.'_'.$next_node_id;
                            }
                        }
                    }
                }
            }
        }
        $flowEdges = array_merge($flowEdges, $freeProcessSetpInfo);
        return [
            "nodes" => $flowNodes,
            "edges" => $flowEdges,
        ];
    }
    /**
     * 【定义流程】 【节点设置】 更新节点排序
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function updateNodeSort($flowId, $param, $own)
    {
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $param = $this->parseParams($param);
        $historyInfo = [];
        $newInfo = [];
        foreach ($param as $value) {
            $nodeId = $value['node_id'];
            // 清空节点信息redis缓存
            if (Redis::exists('flow_process_info_' . $nodeId)) {
                Redis::del('flow_process_info_' . $nodeId);
            }
            $historySortId = "";
            $processName = "";
            if ($nodeInfo = app($this->flowPermissionService)->getProcessInfo($nodeId)) {
                $nodeInfo = $nodeInfo->toArray();
                $historySortId = isset($nodeInfo["sort"]) ? $nodeInfo["sort"] : "";
                $processName = isset($nodeInfo["process_name"]) ? $nodeInfo["process_name"] : "";
            }
            $result = app($this->flowProcessRepository)->updateData(['sort' => $value['sort']], ['flow_id' => [$flowId], 'node_id' => [$nodeId]]);
            if ($historySortId && $historySortId != $value['sort']) {
                $historyInfo[$nodeId] = [
                    "node_id" => $nodeId,
                    "process_name" => $processName,
                    "sort" => $historySortId,
                ];
                $newInfo[$nodeId] = [
                    "node_id" => $nodeId,
                    "process_name" => $processName,
                    "sort" => $value['sort'],
                ];
            }
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = ["sort" => $newInfo];
        $logParam["history_info"] = ["sort" => $historyInfo];
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&flow_id", $flowId, "editNodeBaseProcessSort", $own, "flow");
    }

    /**
     * 【定义流程】 【节点设置】 批量保存流程节点信息
     * 1、处理假id的地方：nodes-node_id字段，nodes-process_to字段，edges-source_id[target_id]字段
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function batchSaveFlowNodeService($param, $flowId)
    {
        $param = $this->parseParams($param);
        $flowProcessData = [
            "flow_id" => $flowId,
        ];
        if ($flowProcessInfoObject = app($this->flowProcessRepository)->getFlowProcessList($flowProcessData)) {
            $flowProcessNodeIdList = $flowProcessInfoObject->pluck("node_id")->toArray();
        }
        if (isset($param["nodes"]) && count($param["nodes"])) {
            $nodesInfo = $param["nodes"];
            // 记录新建出来的node_id
            $createNodeIdArray = [];
            // 记录原始数据里面的 process_to
            $initProcessToArray = [];
            foreach ($nodesInfo as $nodesKey => $nodesValue) {
                // 参数里的node_id
                $paramNodeId = $nodesValue["node_id"];
                $paramNodesProcessTo = $nodesValue["process_to"];
                $nodesValue["flow_id"] = $flowId;
                unset($nodesValue["node_id"]);
                // position处理
                $nodesValue["position"] = json_encode($nodesValue["position"]);
                $truthNodeId = "";
                // 要新建的节点
                if (strstr($paramNodeId, "new_")) {
                    unset($nodesValue["process_to"]);
                    $nodesValue["flow_outmail"] = "0";
                    $nodesValue["flow_outsend_type"] = "1";
                    $nodesValue["process_forward"] = "0";
                    $nodesValue["process_transact_type"] = "0";
                    if ($processObject = app($this->flowProcessRepository)->insertData($nodesValue)) {
                        $createNodeId = $processObject->node_id;
                        if ($createNodeId > 0) {
                            $createNodeIdArray[$paramNodeId] = $createNodeId;
                            $truthNodeId = $createNodeId;
                        }
                    }
                } else {
                    if (in_array($paramNodeId, $flowProcessNodeIdList)) {
                        // 要编辑的节点
                        $this->modifyFlowNode($nodesValue, $paramNodeId);
                        $truthNodeId = $paramNodeId;
                        unset($flowProcessNodeIdList[array_search($paramNodeId, $flowProcessNodeIdList)]);
                    }
                }
                if ($truthNodeId && $paramNodesProcessTo) {
                    // 后面要进行转换，然后保存
                    $initProcessToArray[$truthNodeId] = $paramNodesProcessTo;
                }
            }
            // 处理process_to里面的未保存节点id
            if (count($initProcessToArray)) {
                foreach ($initProcessToArray as $processToKey => $processToValue) {
                    $processToArray = explode(",", $processToValue);
                    if (count($processToArray)) {
                        $truthProcessToString = "";
                        foreach ($processToArray as $iteamKey => $iteamValue) {
                            if (strstr($iteamValue, "new_") && $createNodeIdArray[$iteamValue]) {
                                $truthProcessToString .= $createNodeIdArray[$iteamValue] . ",";
                            } else {
                                $truthProcessToString .= $iteamValue . ",";
                            }
                        }
                        $truthProcessToString = trim($truthProcessToString, ",");
                        // 更新process_to
                        app($this->flowProcessRepository)->updateData(["process_to" => $truthProcessToString], ["node_id" => $processToKey]);
                    }
                }
            }
            // 删除参数里没有的node_id
            if (count($flowProcessNodeIdList)) {
                foreach ($flowProcessNodeIdList as $deleteKey => $deleteValue) {
                    app($this->flowProcessRepository)->deleteById($deleteValue);
                }
            }
            if (isset($param["edges"]) && count($param["edges"])) {
                $edgesInfo = $param["edges"];
                foreach ($edgesInfo as $edgesKey => $edgesValue) {
                    $paramCondition = $edgesValue["condition"];
                    if ($paramCondition) {
                        $paramSourceId = $edgesValue["source_id"];
                        $paramTargetId = $edgesValue["target_id"];
                        if (strstr($paramSourceId, "new_")) {
                            $sourceId = $createNodeIdArray[$paramSourceId];
                        } else {
                            $sourceId = $paramSourceId;
                        }
                        if (strstr($paramTargetId, "new_")) {
                            $targetId = $createNodeIdArray[$paramTargetId];
                        } else {
                            $targetId = $paramTargetId;
                        }
                        if ($sourceId && $targetId) {
                            // 根据flow_id，删除出口条件
                            $wheres = ["flow_id" => [$flowId]];
                            app($this->flowTermRepository)->deleteByWhere($wheres);
                            // 插入
                            $insertTermParam = [
                                "source_id" => $sourceId,
                                "target_id" => $targetId,
                                "condition" => $paramCondition,
                                "flow_id" => $flowId,
                            ];
                            app($this->flowTermRepository)->insertData($insertTermParam);
                        }
                    }
                }
            }

            $flownodesparam["flow_id"] = $flowId;
            $flownodesparam['fields'][] = "node_id";
            $flownodesparam['returntype'] = "object";
            $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($flownodesparam)->pluck('node_id')->toArray();
            // 清空节点信息redis缓存
            if (!empty($flowNodes)) {
                foreach ($flowNodes as $value) {
                    if (Redis::exists('flow_process_info_' . $value)) {
                        Redis::del('flow_process_info_' . $value);
                    }
                }
            }
            return $createNodeIdArray;
        }
        return "";
    }

    /**
     * 【定义流程】 【节点设置】 获取节点详情
     *
     * 20160928，被 flowService 内部调用过，修改注意
     *
     * @method getFlowNodeInfo
     *
     * @param  [type]          $nodeId [description]
     *
     * @return [type]                  [description]
     */
    public function getFlowNodeInfo($nodeId, $formId = 0)
    {
	    $formId = $formId ? $formId : app($this->flowRunService)->getFormIdByNodeId($nodeId);
        //优化判断全局变量中是否有节点信息--(TODO)改动时机太多 不能及时更新 暂时去掉
        // if (isset($GLOBALS['getFlowNodeInfo'.$nodeId]) && !empty($GLOBALS['getFlowNodeInfo'.$nodeId]) ) {
        //         return $GLOBALS['getFlowNodeInfo'.$nodeId];
        // }
        if ($detailResult = app($this->flowRunService)->getFlowNodeDetail($nodeId, $formId)) {
            // 是否首节点
            $headNodeToggle = isset($detailResult->head_node_toggle) ? $detailResult->head_node_toggle : '';
            // 办理方式
            $processTransactType = isset($detailResult->process_transact_type) ? $detailResult->process_transact_type: 0;
            if (isset($detailResult->flowProcessHasManyUser) && count($detailResult->flowProcessHasManyUser)) {
                $handle_user = $detailResult->flowProcessHasManyUser->pluck("user_id");
            }
            if (isset($detailResult->flowProcessHasManyRole) && count($detailResult->flowProcessHasManyRole)) {
                $handle_role = $detailResult->flowProcessHasManyRole->pluck("role_id");
            }
            if (isset($detailResult->flowProcessHasManyDept) && count($detailResult->flowProcessHasManyDept)) {
                $handle_dept = $detailResult->flowProcessHasManyDept->pluck("dept_id");
            }
            if (isset($detailResult->flowProcessHasManyCopyUser) && count($detailResult->flowProcessHasManyCopyUser)) {
                $copy_user = $detailResult->flowProcessHasManyCopyUser->pluck("user_id");
            }
            if (isset($detailResult->flowProcessHasManyCopyRole) && count($detailResult->flowProcessHasManyCopyRole)) {
                $copy_role = $detailResult->flowProcessHasManyCopyRole->pluck("role_id");
            }
            if (isset($detailResult->flowProcessHasManyCopyDept) && count($detailResult->flowProcessHasManyCopyDept)) {
                $copy_dept = $detailResult->flowProcessHasManyCopyDept->pluck("dept_id");
            }
            if (isset($detailResult->flowProcessHasManyDefaultUser) && count($detailResult->flowProcessHasManyDefaultUser)) {
                $default_user = $detailResult->flowProcessHasManyDefaultUser->pluck("user_id");
            }
            if (isset($detailResult->flowProcessHasManyOutsend) && count($detailResult->flowProcessHasManyOutsend)) {
                $outsend = $detailResult->flowProcessHasManyOutsend->toArray();
            }
            if (isset($detailResult->flowProcessHasManySunWorkflow) && count($detailResult->flowProcessHasManySunWorkflow)) {
                $sunWorkflow = $detailResult->flowProcessHasManySunWorkflow->toArray();
            }
            if (isset($detailResult->flowProcessHasManyOverTimeRemind) && count($detailResult->flowProcessHasManyOverTimeRemind)) {
                $overTimeRemind = $detailResult->flowProcessHasManyOverTimeRemind->toArray();
            }
            $validate = [];
            if (isset($detailResult->flowProcessHasManyDataValidate) && count($detailResult->flowProcessHasManyDataValidate)) {
                $validate = $detailResult->flowProcessHasManyDataValidate->toArray();
            }
            // 处理 flowProcessControlOperation
            if (isset($detailResult->flowProcessHasManyControlOperation) && count($detailResult->flowProcessHasManyControlOperation)) {
                $controlHasManyOperation = $detailResult->flowProcessHasManyControlOperation;
                $controlOperationInfo = [];
                // 处理新添加控件没有字段控制信息问题
                $controlInfo = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search'=>['form_id'=>[$formId]],'fields'=>['control_id']]);
                if($controlInfo) {
                    foreach ($controlInfo as $key => $value) {
                        $controlOperationInfo[$value['control_id']] = [];
                    }
                }
                $controlOperationCondition = [];
                if (count($controlHasManyOperation)) {
                    foreach ($controlHasManyOperation as $key => $value) {
                        $controlId = (isset($value->control_id) && $value->control_id) ? $value->control_id : "";
                        if ($controlId) {
                            // control_required 和 condition_required，单独处理必填有关的条件属性返回
                            $operationType = $value->controlOperationDetail->pluck("operation_type")->toArray();
                            $operationCondition = $value->controlOperationDetail->pluck('operation_condition')->toArray();
                            $key = array_search('condition_required', $operationType);
                            if ($key !== false && $operationCondition[$key]) {
                                $controlOperationCondition[$controlId]['condition_required'] = $operationCondition[$key];
                            }
                            $key = array_search('control_required', $operationType);
                            if ($key !== false) {
                                $controlOperationCondition[$controlId]['control_required'] = json_decode($operationCondition[$key], true);
                            }
                            $operationType = array_merge(array_diff($operationType, ['control_required']));
                            $operationType = array_merge(array_diff($operationType, ['condition_required']));
                            $controlOperationInfo[$controlId] = $operationType;
                        }
                    }
                }
            }
            $result = $detailResult->toArray();
            $result['show_finish_option'] = app($this->flowParseService)->isShowFinishOption($result);
            $result["form_id"] = $formId;
            if (isset($handle_user)) {
                $result["handle_user_id"] = $handle_user;
            }
            if (isset($handle_role)) {
                $result["handle_role_id"] = $handle_role;
            }
            if (isset($handle_dept)) {
                $result["handle_dept_id"] = $handle_dept;
            }
            if (isset($copy_user)) {
                $result["copy_user_id"] = $copy_user;
            }
            if (isset($copy_role)) {
                $result["copy_role_id"] = $copy_role;
            }
            if (isset($copy_dept)) {
                $result["copy_dept_id"] = $copy_dept;
            }
            if (isset($default_user)) {
                $result["default_user_id"] = $default_user;
            }
            if (isset($controlOperationInfo)) {
                $result["controlOperation"] = $controlOperationInfo;
            }
            if (empty($controlOperationCondition)) {
                $result["control_operation_condition"] = (object) null;
            } else {
                $result["control_operation_condition"] = $controlOperationCondition;
            }

            if (isset($outsend) && count($outsend) > 0) {
                // 20200426,zyx,获取节点数据外发具体参数的方法调整至flowOutsendService
                $result["outsend"] = app($this->flowOutsendService)->handleOutsendInfoForNode($outsend, $detailResult->flow_id);
            } else {
                $result["flow_outsend_toggle"] = 0;
            }
            if (isset($sunWorkflow) && count($sunWorkflow) > 0) {
                $sequence = 1;
                foreach ($sunWorkflow as $key => $value) {
                    $divCollection = [];
                    if (!empty($value['porcess_fields']) && !empty($value['receive_fields'])) {
                        $porcess_fields_array = explode(',', $value['porcess_fields']);
                        $receive_fields_array = explode(',', $value['receive_fields']);
                        if (isset($formId) && !empty($formId) ) {
                            $porcessformId = $formId;
                        } else {
                            $porcessformInfo = app($this->flowTypeRepository)->getDetail($detailResult->flow_id);
                            // $porcessformInfo = $this->getFlowDefineInfoService([], $detailResult->flow_id);
                            $porcessformId = $porcessformInfo->form_id ?? 0;
                        }
                        $receiveformInfo = app($this->flowTypeRepository)->getDetail($value['receive_flow_id'] , false , ['form_id']);
                        $receiveformId = $receiveformInfo['form_id'] ?? "";

                        //此处优化：这块会循环数据库查询，导致速度会慢很多0730
                        $data['search'] = ['form_id' => [$porcessformId]];
                        $data['fields'] = ['control_title' , 'control_id'];
                        $processcontrolTitle = app($this->flowFormService)->getFlowFormControlStructure($data);

                        if($porcessformId == $receiveformId) {
                            $receivecontrolTitle = $processcontrolTitle ;
                        } else {
                            $data['search'] = ['form_id' => [$receiveformId]];
                            $data['fields'] = ['control_title' , 'control_id'];
                            $receivecontrolTitle = app($this->flowFormService)->getFlowFormControlStructure($data);
                        }


                        $num = 0;
                        for ($i = 0; $i < count($porcess_fields_array); $i++) {
                            if (empty($porcess_fields_array[$i]) || empty($receive_fields_array[$i])) {
                                continue;
                            }
                            $divCollection[$num]['formFileds'] = $porcess_fields_array[$i];
                            $divCollection[$num]['receiveFileds'] = $receive_fields_array[$i];
                            if ($porcessformId == $receiveformId) {
                                foreach ($processcontrolTitle as $kp => $vp) {
                                    if($vp['control_id'] == $porcess_fields_array[$i]){
                                        $divCollection[$num]['formFiledsTitle'] = $vp['control_title'];
                                    }
                                    if($vp['control_id'] == $receive_fields_array[$i]){
                                        $divCollection[$num]['receiveFiledsTitle'] = $vp['control_title'];
                                    }
                                    continue;
                                }
                            } else {
                                foreach ($processcontrolTitle as $kp => $vp) {
                                    if($vp['control_id'] == $porcess_fields_array[$i]){
                                        $divCollection[$num]['formFiledsTitle'] = $vp['control_title'];
                                    }
                                    continue;
                                }
                                foreach ($receivecontrolTitle as $kr => $vr) {
                                    if($vr['control_id'] == $receive_fields_array[$i]){
                                        $divCollection[$num]['receiveFiledsTitle'] = $vr['control_title'];
                                    }
                                    continue;
                                }
                            }

                            $num++;
                        }


                    }
                    $result["outsendToSunWorkflow"][$key]['sunflow_id'] = isset($value['receive_flow_id']) ? $value['receive_flow_id'] : '';
                    $result["outsendToSunWorkflow"][$key]['sequence'] = $sequence;
                    $result["outsendToSunWorkflow"][$key]['formFileds'] = null;
                    $result["outsendToSunWorkflow"][$key]['moduleFileds'] = null;
                    $result["outsendToSunWorkflow"][$key]['relations'] = $divCollection;
                    $result["outsendToSunWorkflow"][$key]['sunflow_id'] = isset($value['receive_flow_id']) ? $value['receive_flow_id'] : '';
                    $result["outsendToSunWorkflow"][$key]['run_ways'] = isset($value['run_ways']) ? $value['run_ways'] : '';
                    $result["outsendToSunWorkflow"][$key]['premise'] = isset($value['premise']) ? $value['premise'] : '';
                    $sequence++;
                }
                // foreach ($sunWorkflow as $key => $value) {
                //     $divCollection = [];
                //     if (!empty($value['porcess_fields']) && !empty($value['receive_fields'])) {
                //         $porcess_fields_array = explode(',', $value['porcess_fields']);
                //         $receive_fields_array = explode(',', $value['receive_fields']);

                //         $porcessformInfo = $this->getFlowDefineInfoService([], $detailResult->flow_id);
                //         $porcessformId = $porcessformInfo['form_id'];
                //         $receiveformInfo = $this->getFlowDefineInfoService([], $value['receive_flow_id']);
                //         $receiveformId = $receiveformInfo['form_id'];
                //         $num = 0;
                //         for ($i = 0; $i < count($porcess_fields_array); $i++) {
                //             if (empty($porcess_fields_array[$i]) || empty($receive_fields_array[$i])) {
                //                 continue;
                //             }
                //             $divCollection[$num]['formFileds'] = $porcess_fields_array[$i];
                //             $divCollection[$num]['receiveFileds'] = $receive_fields_array[$i];
                //             $divCollection[$num]['formFiledsTitle'] = $this->getFlowFormControlStructureControlTitle(["form_id" => $porcessformId, 'control_id' => $porcess_fields_array[$i]]);
                //             $divCollection[$num]['receiveFiledsTitle'] = $this->getFlowFormControlStructureControlTitle(["form_id" => $receiveformId, 'control_id' => $receive_fields_array[$i]]);
                //             $num++;
                //         }
                //     }

                //     $result["outsendToSunWorkflow"][$key]['sunflow_id'] = isset($value['receive_flow_id']) ? $value['receive_flow_id'] : '';
                //     $result["outsendToSunWorkflow"][$key]['sequence'] = $sequence;
                //     $result["outsendToSunWorkflow"][$key]['formFileds'] = null;
                //     $result["outsendToSunWorkflow"][$key]['moduleFileds'] = null;
                //     $result["outsendToSunWorkflow"][$key]['relations'] = $divCollection;
                //     $result["outsendToSunWorkflow"][$key]['sunflow_id'] = isset($value['receive_flow_id']) ? $value['receive_flow_id'] : '';
                //     $result["outsendToSunWorkflow"][$key]['run_ways'] = isset($value['run_ways']) ? $value['run_ways'] : '';
                //     $result["outsendToSunWorkflow"][$key]['premise'] = isset($value['premise']) ? $value['premise'] : '';
                //     $sequence++;
                // }
            }
            $result["validate"] = $validate;
            //格式化超时提醒时间
            if (isset($overTimeRemind) && count($overTimeRemind)>0){
                 $sequence =  1;
                foreach ($overTimeRemind as $remindKey => &$remindValue) {
                    if (isset($remindValue['remind_time']) && !empty($remindValue['remind_time']) && $remindValue['remind_time']!=0) {
                        $remindValue['remindDay'] = intval(floor($remindValue['remind_time'] / 24));
                        $remindValue['remindHour']  =number_format($remindValue['remind_time']- $remindValue['remindDay'] *24 , 1);
                        $remindValue['sequence'] = $sequence;
                        $remindValue['remind_id'] = $remindValue['id'];
                    }
                    $result["overtime"][$remindKey]['flow_id'] =   $remindValue['flow_id'];
                    $result["overtime"][$remindKey]['node_id'] =   $remindValue['node_id'];
                    $result["overtime"][$remindKey]['remind_time'] =   $remindValue['remind_time'];
                    $result["overtime"][$remindKey]['overtime_ways'] =   $remindValue['overtime_ways'];
                    $sequence++;

                }
                $result["overTimeRemind"] = $overTimeRemind;
            }
            $pressAddHour = isset($result["press_add_hour"]) ? $result["press_add_hour"] : '';
            if ($pressAddHour) {
                $flowPressTimeSetDay = intval(floor($pressAddHour / 24));
                // $flowPressTimeSetHour = $pressAddHour % 24;

                $flowPressTimeSetHour = number_format($pressAddHour - $flowPressTimeSetDay *24 , 1);
                if ($flowPressTimeSetDay == 0) {
                    $flowPressTimeSetDay = 0;
                }
                if ($flowPressTimeSetHour == 0) {
                    $flowPressTimeSetHour = 0;
                }
                $result["flowPressTimeSetDay"] = $flowPressTimeSetDay;
                $result["flowPressTimeSetHour"] = $flowPressTimeSetHour;
            }
            unset($result['flow_process_has_many_outsend']);
            // 将节点信息保存在global中,以便后续调用--(TODO)改动时机太多 不能及时更新 暂时去掉
            // $GLOBALS['getFlowNodeInfo'.$nodeId] = $result;
            return $result;
        }
    }
    public function getFlowNodeForBasePage($nodeId, $type)
    {
        $result = [];
        if ($type == 'true') {
            $result['nodeInfo'] = app($this->flowProcessRepository)->getDetail($nodeId, false, ['process_type', 'sort', 'flow_id']);
        }else {
            $result['nodeInfo'] = app($this->flowProcessRepository)->getDetail($nodeId);
            $getNodeParam["returntype"] = "first";
            $getNodeParam["search"] = ["flow_id" => [$result['nodeInfo']->flow_id] , 'merge' => [ 0 ,  '<>']]; //
            $mergeNodeInfo = app($this->flowProcessRepository)->getFlowProcessList( $getNodeParam );
            if (isset( $mergeNodeInfo->node_id)) {
                $result['nodeInfo']->set_merger_node =  $mergeNodeInfo->node_id;
                $result['nodeInfo']->merge_properties =  $mergeNodeInfo->merge;
            }
        }

        $formId = app($this->flowTypeRepository)->getDetail($result['nodeInfo']->flow_id, false, ['form_id'])->form_id;
        $formInfo = $this->getParseForm($formId, []);
        $required_scope = [];
        for ($i = 0, $length = count($formInfo); $i < $length; $i++) {
            $id = $formInfo[$i]['control_id'];
            $title = $formInfo[$i]['control_title'];
            $type = $formInfo[$i]['control_type'];
            $attribute = $formInfo[$i]['control_attribute'];
            if ($type != 'detail-layout' && $type != 'barcode' && (!isset($attribute['data-efb-hide']) || $attribute['data-efb-hide'] != 'true') && (!isset($attribute['data-efb-readonly']) || $attribute['data-efb-readonly'] != 'true') && $type != 'dynamic-info') {
                $_value =  [
                    'id' => $id,
                    'title' => $title,
                    'type' => $type
                ];
                array_push($required_scope,$_value);
            }
        }
        $getNodeParam["returntype"] = "count";
        $getNodeParam["search"] = ["flow_id" => [$result['nodeInfo']->flow_id] , 'concurrent' => [ 0 ,  '<>']]; // 判断这个流程有没有设置并发节点，如果没有并发节点就不要显示合并选项
        $result['nodeInfo']['show_merge'] = app($this->flowProcessRepository)->getFlowProcessList( $getNodeParam );
		$result['nodeInfo']['show_finish_option'] = app($this->flowParseService)->isShowFinishOption($result['nodeInfo']);
        $result['formInfo']['required_scope'] = $required_scope;
        $result['freeNodeInfo'] = $this->getFlowFreeNodeInfo($nodeId);

        return $result;
    }
    /**
     * 根据表单模板/原表单，获取表单内控件，过滤必填字段
     * 20180515--修改，函数功能变更为：根据表单模板，过滤控件的操作权限，不仅仅是过滤必填了，签办反馈/附件等不受影响
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function filterFlowNodeRequiredControl($param, $formTemplateRuleInfo)
    {
        $controlOperation = $param["controlOperation"];

        $formId = $param["form_id"];
        $getParseFormParam = [];
        if ($formTemplateRuleInfo && count($formTemplateRuleInfo) && isset($formTemplateRuleInfo["run"]) && $formTemplateRuleInfo["run"]) {
            $controlOperationNew = [];
            $getParseFormParam["formTemplateRuleInfo"] = json_encode($formTemplateRuleInfo);
            $formControlStructure = $this->getParseForm($formId, $getParseFormParam);
            if (!empty($formControlStructure)) {
                $controlEfbHideInfo = [];
                $controlAttributeInfo = collect($formControlStructure)->pluck("control_attribute")->toArray();
                if (count($controlAttributeInfo)) {
                    foreach ($controlAttributeInfo as $key => $value) {
                        $id = isset($value["id"]) ? $value["id"] : "";
                        $dataEfbHide = isset($value["data-efb-hide"]) ? $value["data-efb-hide"] : false;
                        if ($id) {
                            $controlEfbHideInfo[$id] = $dataEfbHide;
                        }
                    }
                }
                $controlIdInfo = collect($formControlStructure)->pluck("control_id")->toArray();
                if (count($controlOperation)) {
                    foreach ($controlOperation as $key => $value) {
                        if (strpos($key, 'DATA_') !== false) {
                            if (in_array($key, $controlIdInfo)) {
                                if (isset($controlEfbHideInfo[$key]) && !empty($value)) {
                                    $itemOperation = [];
                                    foreach ($value as $operation_key => $operation) {
                                        if ($operation == "required") {
                                            if (!$controlEfbHideInfo[$key]) {
                                                $itemOperation[] = $operation;
                                            }
                                        } else {
                                            $itemOperation[] = $operation;
                                        }
                                    }
                                    $controlOperationNew[$key] = $itemOperation;
                                } else {
                                    $controlOperationNew[$key] = $value;
                                }
                            }
                        } else {
                            $controlOperationNew[$key] = $value;
                        }
                    }
                }
            }
            return $controlOperationNew;
        } else {
            $formControlStructure = $this->getParseForm($formId, []);
            if (!empty($formControlStructure)) {
                $controlEfbHideInfo = [];
                $controlAttributeInfo = collect($formControlStructure)->pluck("control_attribute")->toArray();
                if (count($controlAttributeInfo)) {
                    foreach ($controlAttributeInfo as $key => $value) {
                        $id = isset($value["id"]) ? $value["id"] : "";
                        $dataEfbHide = isset($value["data-efb-hide"]) ? $value["data-efb-hide"] : false;
                        if ($id) {
                            $controlEfbHideInfo[$id] = $dataEfbHide;
                        }
                    }
                }
                $controlOperationNew = [];
                if (count($controlOperation)) {
                    foreach ($controlOperation as $key => $value) {
                        if (isset($controlEfbHideInfo[$key]) && !empty($value) && strpos($key, 'DATA_') !== false) {
                            $itemOperation = [];
                            foreach ($value as $operation_key => $operation) {
                                if ($operation == "required") {
                                    if (!$controlEfbHideInfo[$key]) {
                                        $itemOperation[] = $operation;
                                    }
                                } else {
                                    $itemOperation[] = $operation;
                                }
                            }
                            $controlOperationNew[$key] = $itemOperation;
                        } else {
                            $controlOperationNew[$key] = $value;
                        }
                    }
                }
                return $controlOperationNew;
            }
            return $controlOperation;
        }
    }

    /**
     * 【定义流程】 【节点设置】 获取节点子流程详情
     *
     *
     * @method getSunflowInfo
     *
     * @param  [type]          $nodeId [description]
     *
     * @return [type]                  [description]
     */
    public function getSunflowInfo($nodeId, $data = [], $circle = false)
    {
        if (empty($nodeId)) {
            return [];
        }
        $nodeInfo = app($this->flowProcessRepository)->getDetail($nodeId, false, ['sun_flow_toggle' , 'trigger_son_flow_back']);
        $toggle = $nodeInfo->sun_flow_toggle ?? 0;
        $result = [];
        if ($toggle == 1) {
            $returnType = $data['return_type'] ?? 'array';
            $result = app($this->flowSunWorkflowRepository)->getSunflowInfo($nodeId, $returnType);
            if (empty($result)) {
                return $result;
            }
            if ($returnType == 'count') {
                return $result;
            }
            foreach ($result as $key => &$value) {
                if (!isset($value['receive_flow_id']) || empty($value['receive_flow_id'])) {
                    continue;
                }
                $value['trigger_son_flow_back'] =  $nodeInfo->trigger_son_flow_back;
                $value['user_scope'] = $this->getFlowFirstNodeUserScope($value['receive_flow_id']);
            }
        }
		/*
		if (!$circle && !empty($data['monitorSubmit']) && !empty($data['process_id']) && !empty($data['node_id']) && !empty($data['run_id'])) {
    		$flowSerial = 1;
    		$processSerial = 1;
    		$search = ["search" => ["run_id" => [$data['run_id']], "flow_process" =>[$data['node_id']],"process_id" =>[$data['process_id']]],"order_by"=>["flow_run_process_id" => "desc"]];
    		if ($flowRunProcessObject = app($this->flowRunProcessRepository)->getFlowRunProcessList($search)) {
    			$flowRunProcessObject = $flowRunProcessObject->toArray();
    			if (!empty($flowRunProcessObject[0]['flow_serial'])) {
    				$flowSerial = $flowRunProcessObject[0]['flow_serial'];
    				$processSerial = $flowRunProcessObject[0]['process_serial'];
    			}
    		}
			$dbData = app($this->flowRunProcessRepository)->getFlowRunProcessInfo(['flow_process','process_id','user_id','origin_process','deliver_time'],['run_id'=>$data['run_id'],'flow_serial'=>$flowSerial,'process_serial'=>$processSerial,'host_flag'=>'1']);
			foreach($dbData as $v){
				if ($v['flow_process'] != $data['node_id'] && empty($v['deliver_time'])) {
					$param = $v['flow_process'];
					$flowInfo = $this->getSunflowInfo($param,[],true);
					if (!empty($flowInfo)) {
						$result = array_merge($result,$flowInfo);
					}
				}
			}
		}
		*/
        return $result;
    }

    /**
     * 【流程流转】获取流程首节点的办理人员范围
     *
     * @param  {[string]}    $flowId  [流程ID]
     *
     * @return {[type]}               [description]
     * @author 缪晨晨
     *
     */
    public function getFlowFirstNodeUserScope($flowId)
    {
        $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId , false , ['flow_type' , 'create_user' , 'create_role' , 'create_dept']);
        if (empty($flowTypeInfo) || !isset($flowTypeInfo->flow_type)) {
            return [];
        }
        if ($flowTypeInfo->flow_type == '1') {
            // 固定流程
            $firstNodeId = app($this->flowProcessRepository)->getFirstNodeId($flowId);
            if (!$firstNodeId) {
                return [];
            }
            $processInfo = app($this->flowProcessRepository)->getFlowNodeUserInfoDetail($firstNodeId);
            if (empty($processInfo)) {
                return [];
            }
            // 如果是设置的智能获取办理人则返回空，第一节点一般不设置智能获取
            if ($processInfo->process_auto_get_user) {
                return [];
            }
            if (isset($processInfo->process_user) && $processInfo->process_user == "ALL"
                || isset($processInfo->process_role) && $processInfo->process_role == "ALL"
                || isset($processInfo->process_dept) && $processInfo->process_dept == "ALL") {
                return "ALL";
            } else {
                // 获取符合范围的人员
                $getUserParam = [
                    "fields" => ["user_id", "user_name"],
                    "page" => "0",
                    "returntype" => "object",
                ];
                $processUserId = $processInfo->flowProcessHasManyUser->pluck("user_id");
                $processRoleId = $processInfo->flowProcessHasManyRole->pluck("role_id");
                $processDeptId = $processInfo->flowProcessHasManyDept->pluck("dept_id");
                $getUserParam["search"] = [
                    "user_id" => $processUserId,
                    "role_id" => $processRoleId,
                    "dept_id" => $processDeptId,
                ];
                $userIdsArray = app($this->userRepository)->getConformScopeUserList($getUserParam)->pluck('user_id')->toArray();
                return $userIdsArray;
            }
        } else {
            // 自由流程
            if (isset($flowTypeInfo->create_user) && $flowTypeInfo->create_user == "ALL"
                || isset($flowTypeInfo->create_role) && $flowTypeInfo->create_role == "ALL"
                || isset($flowTypeInfo->create_dept) && $flowTypeInfo->create_dept == "ALL") {
                return "ALL";
            } else {
                // 获取符合范围的人员
                $getUserParam = [
                    "fields" => ["user_id", "user_name"],
                    "page" => "0",
                    "returntype" => "object",
                ];
                $processUserId = app($this->flowTypeCreateUserRepository)->getList($flowId)->pluck("user_id")->toArray();
                $processRoleId = app($this->flowTypeCreateRoleRepository)->getList($flowId)->pluck("role_id")->toArray();
                $processDeptId = app($this->flowTypeCreateDepartmentRepository)->getList($flowId)->pluck("dept_id")->toArray();
                $getUserParam["search"] = [
                    "user_id" => $processUserId,
                    "role_id" => $processRoleId,
                    "dept_id" => $processDeptId,
                ];
                $userIdsArray = app($this->userRepository)->getConformScopeUserList($getUserParam)->pluck('user_id')->toArray();
                return $userIdsArray;
            }
        }
    }


    /**
     * 判断节点是否被其他节点在流程办理人处引用
     * @param $param
     * @return bool
     */
    public function isNodeQuotedInHandler($param)
    {
        $flowId = $param['flow_id'];
        $nodeId = $param['node_id'];
        $result = app($this->flowProcessRepository)->getFieldInfo(['flow_id' => [$flowId]], ['process_auto_get_user']);
        foreach($result as $key => $value ){
            if ($value['process_auto_get_user'] && (explode('|', $value['process_auto_get_user'])[1] == $nodeId)) {
                return 1;
            }
        }
        return 0;
    }

    /**
     * 【定义流程】 【节点设置】 获取表单字段title
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function getFlowFormControlStructureControlTitle($param)
    {
        $data = [];
        $data['search'] = ['form_id' => [$param['form_id']], 'control_id' => [$param['control_id']]];
        $data['fields'] = ['control_title'];
        $controlTitle = app($this->flowFormService)->getFlowFormControlStructure($data);

        if (!empty($controlTitle)) {
            return $controlTitle[0]['control_title'];
        }
        return "";
    }

    /**
     * 【定义流程】 【节点设置】 删除节点
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function removeFlowNode($param, $nodeId)
    {
        // 取某条定义流程的已运行流程数量，大于0，不能删除。
        if ($detailResult = app($this->flowPermissionService)->getProcessInfo($nodeId)) {
            $flowId = $detailResult->flow_id;
            if ($flowDefineResult = app($this->flowTypeRepository)->getFlowDefineList(["search" => ["flow_id" => [$flowId]]])) {
                if (count($flowDefineResult)) {
                    if (!count($flowDefineResult[0]["flow_type_has_many_flow_run"])) {
                        // 清空节点信息redis缓存
                        if (Redis::exists('flow_process_info_' . $nodeId)) {
                            Redis::del('flow_process_info_' . $nodeId);
                        }
                        return app($this->flowProcessRepository)->deleteById($nodeId);
                    }
                }
            }
        }
    }

    /**
     * 【定义流程】 【节点设置】 新建节点--节点信息
     *  好像已经没有地方用到这个函数了，可以删掉！
     *
     * flow_id,process_name 必填!
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     * @author dingpeng
     *
     */
    public function createFlowNode($param)
    {
        if (!isset($param["flow_id"]) || !isset($param["process_name"])) {
            return "";
        }
        $insertData = $param;
        // 经办人员范围为全体的处理
        if (isset($param["process_user"]) && $param["process_user"] == 'ALL') {
            $insertData['process_user'] = "ALL";
            unset($param['process_user']);
        } else {
            $insertData['process_user'] = "";
        }
        if (isset($param["process_role"]) && $param["process_role"] == 'ALL') {
            $insertData['process_role'] = "ALL";
            unset($param['process_role']);
        } else {
            $insertData['process_role'] = "";
        }
        if (isset($param["process_dept"]) && $param["process_dept"] == 'ALL') {
            $insertData['process_dept'] = "ALL";
            unset($param['process_dept']);
        } else {
            $insertData['process_dept'] = "";
        }
        // 抄送人员范围为全体的处理
        if (isset($param["process_copy_user"]) && $param["process_copy_user"] == 'ALL') {
            $insertData['process_copy_user'] = "ALL";
            unset($param['process_copy_user']);
        } else {
            $insertData['process_copy_user'] = "";
        }
        if (isset($param["process_copy_role"]) && $param["process_copy_role"] == 'ALL') {
            $insertData['process_copy_role'] = "ALL";
            unset($param['process_copy_role']);
        } else {
            $insertData['process_copy_role'] = "";
        }
        if (isset($param["process_copy_dept"]) && $param["process_copy_dept"] == 'ALL') {
            $insertData['process_copy_dept'] = "ALL";
            unset($param['process_copy_dept']);
        } else {
            $insertData['process_copy_dept'] = "";
        }
        // 流程设置的默认办理人为全体的处理
        if (isset($param["process_default_user"]) && $param["process_default_user"] == 'ALL') {
            $insertData['process_default_user'] = "ALL";
            unset($param['process_default_user']);
        } else {
            $insertData['process_default_user'] = "";
        }
        // 经办人员范围为全体的处理
        $processUser = isset($param['process_user']) ? $param['process_user'] : '';
        $processRole = isset($param['process_role']) ? $param['process_role'] : '';
        $processDept = isset($param['process_dept']) ? $param['process_dept'] : '';
        // 抄送人员范围为全体的处理
        $processCopyUser = isset($param['process_copy_user']) ? $param['process_copy_user'] : '';
        $processCopyRole = isset($param['process_copy_role']) ? $param['process_copy_role'] : '';
        $processCopyDept = isset($param['process_copy_dept']) ? $param['process_copy_dept'] : '';
        // 流程设置的默认办理人为全体的处理
        $processDefaultUser = isset($param['process_default_user']) ? $param['process_default_user'] : '';
        // 处理流出节点的逗号
        if (isset($param['process_to'])) {
            $insertData['process_to'] = str_replace("，", ",", $param['process_to']);
        }
        if ($processObject = app($this->flowProcessRepository)->insertData($insertData)) {
            $id = $processObject->node_id;
            // 插入固定流程经办人员范围数据
            if (!empty($processUser)) {
                $userData = [];
                foreach (array_filter(explode(',', trim($processUser, ","))) as $v) {
                    $userData[] = ['id' => $id, 'user_id' => $v];
                }
                app($this->flowProcessUserRepository)->insertMultipleData($userData);
            }
            if (!empty($processRole)) {
                $roleData = [];
                foreach (array_filter(explode(',', trim($processRole, ","))) as $v) {
                    $roleData[] = ['id' => $id, 'role_id' => $v];
                }
                app($this->flowProcessRoleRepository)->insertMultipleData($roleData);
            }
            if (!empty($processDept)) {
                $deptData = [];
                foreach (array_filter(explode(',', trim($processDept, ","))) as $v) {
                    $deptData[] = ['id' => $id, 'dept_id' => $v];
                }
                app($this->flowProcessDepartmentRepository)->insertMultipleData($deptData);
            }
            // 插入固定流程抄送人员范围数据
            if (!empty($processCopyUser)) {
                $userData = [];
                foreach (array_filter(explode(',', trim($processCopyUser, ","))) as $v) {
                    $userData[] = ['id' => $id, 'user_id' => $v];
                }
                app($this->flowProcessCopyUserRepository)->insertMultipleData($userData);
            }
            if (!empty($processCopyRole)) {
                $roleData = [];
                foreach (array_filter(explode(',', trim($processCopyRole, ","))) as $v) {
                    $roleData[] = ['id' => $id, 'role_id' => $v];
                }
                app($this->flowProcessCopyRoleRepository)->insertMultipleData($roleData);
            }
            if (!empty($processCopyDept)) {
                $deptData = [];
                foreach (array_filter(explode(',', trim($processCopyDept, ","))) as $v) {
                    $deptData[] = ['id' => $id, 'dept_id' => $v];
                }
                app($this->flowProcessCopyDepartmentRepository)->insertMultipleData($deptData);
            }
            // 插入流程默认办理人范围数据
            if (!empty($processDefaultUser)) {
                $userData = [];
                foreach (array_filter(explode(',', trim($processDefaultUser, ","))) as $v) {
                    $userData[] = ['id' => $id, 'user_id' => $v];
                }
                app($this->flowProcessDefaultUserRepository)->insertMultipleData($userData);
            }
            $processType = $processObject->process_type;
            if($processType=='free') {
                $freeData = [
                    'node_id' =>$processObject->node_id
                ];
                app($this->flowProcessFreeRepository)->insertData($freeData);
            }
            return $id;
        }
    }

/**
     * 【定义流程】 【节点设置】 编辑节点信息
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNode($param, $nodeId, $own = [], $from = "")
    {
        if ($nodeId == "batchNode") {
            $batchNode = isset($param["batchNode"]) ? $param["batchNode"] : [];
            if (empty($batchNode)) {
                // 保存失败，未获取到流程节点ID
                return ['code' => ['0x030155', 'flow']];
            } else {
                unset($param["batchNode"]);
                $saveResult = "";
                foreach ($batchNode as $key => $nodeId) {
                    $saveResult = $this->modifyFlowNode($param, $nodeId, $own, "batchNode");
                    if(isset($saveResult['code'])){
                        return $saveResult;
                    }
                }
                return $saveResult;
            }
        } else {
            if ( isset($param["branch"]) && !empty($param["branch"])) {
                 if (!empty($param["merge"])){
                     return ['code' => ['flow_multi_force_error', 'flow']];
                 } else if (!empty($param["concurrent"])) {
                     return ['code' => ['flow_multi_concurrent_error', 'flow']];
                 }
            }
            // 自由节点暂时不支持并发与合并
            if (!empty($param['concurrent'])) {
                $param['flow_process_type'] = 2;
            }
            if (isset($param['flow_process_type']) && $param['flow_process_type'] == 1) {
                $param['concurrent'] = 0;
            }
            $routFrom = isset($param['route_from']) ? $param['route_from'] : '';
             // editNodeBase / editNodeTemplate 两个地方会传
            if($routFrom == "editNodeBase" && $from != "batchNode") {
                $flowProcessInfo = app($this->flowParseService)->getFlowProcessInfo($param['flow_id']);
                $flowProcessnodeKeyInfo = array_column($flowProcessInfo , null ,'node_id');
                $processToArray = array_filter(explode(',', $flowProcessnodeKeyInfo[$nodeId]['process_to']));
                // 设置的合并节点
                $set_merger_node =  isset( $param['set_merger_node']) ? $param['set_merger_node'] : 0;
                // 合并属性
                $merge_properties =  isset( $param['merge_properties']) ? $param['merge_properties'] : 0;
                // 历史合并节点
                 $history_set_merger_node = 0;
                 $history_merge_properties = 0;
                // 此时对该节点设置并发
                if ( $param["concurrent"] ){
                    // 如果该节点准备设置成并发，需要对出口分支上有连线的情况进行判断，如果分支间存在连线，则不能保存。
                    $verifyNodes = [];
                    $mergeNode = !empty($set_merger_node) ? $set_merger_node : 0;
                    // 并发节点不能直接连接合并节点
                    if (isset($param['process_to']) && $param['process_to'] && $mergeNode &&  in_array($mergeNode , explode(',', $param['process_to']))) {
                        return ['code' => ['flow_concurrent_merge_error', 'flow']];
                    }
                    foreach ($flowProcessnodeKeyInfo as $nodeKey => $nodeVal) {
                        // 暂时只支持一组并发节点和合并节点
                        if ($nodeVal['concurrent'] && $nodeId !=  $nodeKey) {
                            return ['code' => ['only_one_set_of_concurrent_and_merge_nodes', 'flow'], 'dynamic' => trans('flow.only_one_set_of_concurrent_and_merge_nodes', ['type' => trans('flow.concurrent_node'),'node_name' => $flowProcessnodeKeyInfo[$nodeKey]['process_name']])];
                        }
                    }
                    if (!empty($flowProcessnodeKeyInfo[$nodeId]['process_to'])) {
                        foreach ($processToArray as $pk => $pv) {
                            if (!empty($flowProcessnodeKeyInfo[$pv]['concurrent'])) {
                                 return ['code' => ['two_node_is_on_one_concurrent_branches', 'flow'], 'dynamic' => trans('flow.two_node_is_on_one_concurrent_branches', ['node_name' => $flowProcessnodeKeyInfo[$nodeId]['process_name'] , 'node_name2' => $flowProcessnodeKeyInfo[$pv]['process_name'] ])];
                            }
                            // 去找分支线
                            if ($flowProcessnodeKeyInfo[$nodeId]['sort'] < $flowProcessnodeKeyInfo[$pv]['sort']) {
                                 $verify = app($this->flowParseService)->recursivelyVerifyBranch($flowProcessnodeKeyInfo ,$pv ,$nodeId ,true ,$set_merger_node);
                                 if (isset( $verify['concurrent']) && !empty($verify['concurrent'])) {
                                        // 此时说明后有一个并发此时再设置了并发
                                        return ['code' => ['two_node_is_on_one_concurrent_branches', 'flow'], 'dynamic' => trans('flow.two_node_is_on_one_concurrent_branches', ['node_name' => $flowProcessnodeKeyInfo[$nodeId]['process_name'] , 'node_name2' => $flowProcessnodeKeyInfo[$verify['concurrent'][0]]['process_name'] ])];
                                 }
                                 // 如果存在交集，说明一个节点会在两个并发分支上
                                 $intersectResult = array_intersect( $verifyNodes , array_merge([$pv] , $verify['verifyNodes'])) ;
                                 // 如果该节点是合并节点或者要设置合并节点 ,则过滤掉
                                foreach ($intersectResult as $ik => $iv) {
                                    if ( $iv ==  $set_merger_node) {
                                         unset($intersectResult[$ik]);
                                    }
                                }
                                 if (empty( $intersectResult )) {
                                    $verifyNodes = array_unique(array_merge($verifyNodes , array_merge([$pv] , $verify['verifyNodes'])));
                                 } else {
                                    //此时说明存在分支节点间连线的情况
                                    return ['code' => ['a_node_is_on_two_concurrent_branches', 'flow'], 'dynamic' => trans('flow.a_node_is_on_two_concurrent_branches', ['node_name' => $flowProcessnodeKeyInfo[array_shift($intersectResult)]['process_name']])];
                                 }
                                 if (empty($mergeNode) && !empty($verify['mergeNode'])) {
                                    $mergeNode = $verify['mergeNode'];
                                 }
                                 // 一条分支上只有最后一个分支节点才能连向合并节点
                                 if (count($verify['forwardToMerge']) > 1) {
                                    return ['code' => ['last_node_can_set_to_merge', 'flow'], 'dynamic' => trans('flow.last_node_can_set_to_merge', ['node_name' => $flowProcessnodeKeyInfo[$verify['forwardToMerge'][0]]['process_name']])];
                                 } else if (count($verify['forwardToMerge']) == 1){
                                    // 如果只有一个节点连向合并节点，还要判断是否该节点还有正向流出
                                    $nodeArr = explode(',', $flowProcessnodeKeyInfo[$verify['forwardToMerge'][0]]['process_to']);
                                    // 判断是否是最后一个节点
                                     foreach ($nodeArr as $nk => $nv) {
                                            if (!empty($nv) && $nv!= $verify['mergeNode'] &&  $flowProcessnodeKeyInfo[$verify['forwardToMerge'][0]]['sort'] < $flowProcessnodeKeyInfo[$nv]['sort']) {
                                                 return ['code' => ['last_node_can_set_to_merge', 'flow'], 'dynamic' => trans('flow.last_node_can_set_to_merge', ['node_name' => $flowProcessnodeKeyInfo[$verify['forwardToMerge'][0]]['process_name']])];
                                            }
                                    }
                                 }
                                // 分支上的节点不能设置多个出口
                                 if (count($verify['forwardToMany']) > 0) {
                                    return ['code' => ['branch_not_support_multiple_exits', 'flow']];
                                 }
                            }
                        }

                    }
                    // 并发节点保存时不能有合并节点退回不是最后一个分支节点
                    if ($mergeNode && !empty($flowProcessnodeKeyInfo[$mergeNode]['process_to'])) {
                        $merProcessTo = explode(',', $flowProcessnodeKeyInfo[$mergeNode]['process_to']);
                        foreach ($merProcessTo as $mk => $mv) {
                            // 如果不在分支上直接提示
                            if (!in_array($mv , $verifyNodes)  && $flowProcessnodeKeyInfo[$mergeNode]['sort'] >  $flowProcessnodeKeyInfo[$mv]['sort']) {
                                 return ['code' => ['merging_node_rollback', 'flow']];
                            }
                            $backProcessTo = $flowProcessnodeKeyInfo[$mv]['process_to'];
                            if (in_array($mv , $verifyNodes) && $flowProcessnodeKeyInfo[$mergeNode]['sort'] >  $flowProcessnodeKeyInfo[$mv]['sort'] && !empty($backProcessTo)) {
                                // 再判断这个节点有没有正向流入其它节点（不是合并节点）
                                $backProcessTo = explode(',', $backProcessTo);
                                foreach ($backProcessTo as $bk => $vk) {
                                    if ($flowProcessnodeKeyInfo[$vk]['sort'] > $flowProcessnodeKeyInfo[$mv]['sort'] && $vk!= $mergeNode) {
                                         return ['code' => ['merging_node_rollback', 'flow']];
                                    }
                                }
                            }
                        }
                    }
                    // 以上判断的是节点流出，还需要判断节点流入
                    foreach ($flowProcessnodeKeyInfo as $nodeKey => $nodeVal) {
                        $nodeValProcessTo = array_filter(explode(',', $nodeVal['process_to']));
                        if ($flowProcessnodeKeyInfo[$nodeId]['sort'] > $nodeVal['sort'] && in_array($nodeId,  $nodeValProcessTo) && !empty($nodeVal['branch'])) {
                             return ['code' => ['flow_multi_concurrent_error', 'flow']]; // 只有流入节点有一个在并发分支上，则该节点不能再设置成并发节点
                        }
                        $intersact = array_intersect($verifyNodes, $nodeValProcessTo);
                        // 在遍历所有节点的同时 ， 还需要判断处于该并发节点并发出来的分支上的所有节点，原则是分支上的节点不能被分支外的节点退回
                        foreach ($intersact as $ik => $iv) {
                            if ($nodeVal['sort'] > $flowProcessnodeKeyInfo[$iv]['sort'] && !in_array($nodeVal['node_id'], $verifyNodes) && $nodeVal['node_id']!=$nodeId) {
                                // 此时说明当前节点会退回该并发节点并发上的分支节点上
                                // 暂时只判断合并节点确定的情况下
                                if ($mergeNode && $nodeVal['node_id']!= $mergeNode) {
                                     return ['code' => ['to_branch_must_be_same_merge', 'flow'], 'dynamic' => trans('flow.to_branch_must_be_same_merge', ['node_name' => $nodeVal['process_name'],'node_name1' => $flowProcessnodeKeyInfo[$iv]['process_name']])];
                                }
                            }
                        }
                    }
                    if ($param["concurrent"] == 2) {
                        $processInfo = app($this->flowParseService)->getProcessInfo($nodeId);
                        if (!empty($processInfo)) {
                            $processToArrayNum = 0;
                            $processToArray = explode(",", trim($processInfo['process_to'], ","));
                            foreach ($processToArray as $v){
                                $processToInfo = app($this->flowParseService)->getProcessInfo($v);
                                if (isset($processToInfo['sort']) && $processToInfo['sort'] > $processInfo['sort']) {
                                    $processToArrayNum++;
                                }
                            }
                            if ($processToArrayNum < 2) {
                                return ['code' => ['process_force_merge_set_error', 'flow']];
                            }
                        }
                    }
                }
                // 此时该节点设置合并
                if ( $set_merger_node && $param["concurrent"]) {
                        $origin_node = $nodeId;
                        $mergeProcessToArray = array_filter(explode(',', $flowProcessnodeKeyInfo[$set_merger_node]['process_to']));
                        // 保存合并节点需要判断合并节点是否退回分支上最后一个节点
                        foreach ($mergeProcessToArray as $tk => $tv) {
                            if ( $flowProcessnodeKeyInfo[$set_merger_node]['sort'] > $flowProcessnodeKeyInfo[$tv]['sort'] ) {
                                if ( $flowProcessnodeKeyInfo[$tv]['origin_node'] && $flowProcessnodeKeyInfo[$tv]['origin_node'] != $origin_node) {
                                    return ['code' => ['merging_node_rollback', 'flow']];
                                } else {
                                    // 同一个并发源时还需要判断是否是分支上的最后一个节点
                                    $x = array_filter(explode(',', $flowProcessnodeKeyInfo[$tv]['process_to']));
                                    foreach ($x as $xk => $xv) {
                                       if ($flowProcessnodeKeyInfo[$xv]['sort'] > $flowProcessnodeKeyInfo[$tv]['sort'] && $xv != $set_merger_node) {
                                          return ['code' => ['merging_node_rollback', 'flow']];
                                       }
                                    }
                                }
                            }
                        }
                }
                // 如果是将并发流程改成普通流程，或者将普通流程改为并发流程，如果有正在运行中的流程那么是不能设置的，这种流程类型的切换会导致流程在流转时会有问题 ，暂时限制住
                if (($flowProcessnodeKeyInfo[$nodeId]['concurrent'] && !$param['concurrent']) || (!$flowProcessnodeKeyInfo[$nodeId]['concurrent'] && $param['concurrent'])) {
                    // 查看是否有运转中的流程
                    $hasRunningFlow = app($this->flowRunRepository)->getFlowRunList(['returntype' => 'count',  "search" => ["flow_id" => [$param['flow_id']] , 'current_step' => [0 , '<>']]]);
                    if ( $hasRunningFlow) {
                        return ['code' => ['still_running_processes_finish_before_setting', 'flow'], 'dynamic' => trans('flow.still_running_processes_finish_before_setting', ['number' => $hasRunningFlow ])];

                    }
                }
                if (!$param["concurrent"]) {
                    $param['set_merger_node'] = 0;
                    $param['merge_properties'] = 0;
                }
                foreach ($flowProcessnodeKeyInfo as $nodeKey => $nodeVal) {
                    if ($nodeVal['merge']) {
                        $history_set_merger_node = $nodeKey;
                        $history_merge_properties = $nodeVal['merge'];
                    }
                }
            } else if ($from == "batchNode") {
                unset($param['concurrent']);
                unset($param['merge']);
            }
        }
        // 定义流程-节点设置，有多个页面都调用此路由，用个参数记录一下来源，用于处理日志
        unset($param['route_from']);
        unset($param['show_merge']);
        unset($param['show_finish_option']);
        unset($param['merge_node']);
        $insertData = $param;
        if (isset($param['process_to'])) {
            $insertData['process_to'] = str_replace("，", ",", $param['process_to']);
        }

        // 取节点信息
        $flowProcessData = [
            // "flow_id" => $param['flow_id'],
            "search" => ["node_id" => [$nodeId]],
        ];
        $historyData = $this->getFlowNodeInfo($nodeId);
        $head_node_toggle = 0;
        if (isset($insertData['head_node_toggle']) && $insertData['head_node_toggle'] ==1){
            $head_node_toggle =1;
        } else {
            if($historyData['head_node_toggle']==1){
                $head_node_toggle =1;
            }
        }
        if($head_node_toggle){
            if (!empty($insertData['merge'])){
                $insertData['merge'] = 0;
            }
        }
        if (  $from == "batchNode" && ($historyData['branch'] ||  $historyData['concurrent']) ) {
            $insertData['end_workflow'] = 0;
        }
        $oldProcessTransactType = "";
        if ($flowProcessInfoObject = app($this->flowProcessRepository)->getFlowProcessList($flowProcessData)) {
            $flowProcessInfoFirstObject = $flowProcessInfoObject->first();
            $oldProcessTransactType = $flowProcessInfoFirstObject->process_transact_type;
        }
        // 办理方式修改之后，去除默认办理人
        // 定义流程--流程图--保存设置，也会调用此函数，但是不会保存 process_transact_type 。
        if (isset($param['process_transact_type'])) {
            // if(($oldProcessTransactType == "1" || $oldProcessTransactType == "2" || $oldProcessTransactType == "3") && $param['process_transact_type'] == "0") {
            //     // 删除分表数据
            //     app($this->flowProcessDefaultUserRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            //     // 更新节点表数据
            //     app($this->flowProcessRepository)->updateData(["process_default_type" => '',"process_default_manage" => ''],["node_id" => $nodeId]);
            // }
            //办理方式改变时，清除默认办理人信息
            if ($oldProcessTransactType != $param['process_transact_type']) {
                $insertData['process_default_manage'] = "";
                // 如果办理方式从第一种切换到非第一种清空默认经办人
                if ($oldProcessTransactType == '0') {
                    app($this->flowProcessDefaultUserRepository)->deleteByWhere(['id' => [$nodeId]]);
                }
            }
        }

        // 如果设置了合并节点则还要更新合并节点
        if ($routFrom == "editNodeBase" && $from != "batchNode") {
            $historyData['set_merger_node'] = $history_set_merger_node;
            $historyData['merge_properties'] = $history_merge_properties;
            app($this->flowProcessRepository)->updateData(['merge' => 0 ], ["flow_id" => $param['flow_id'] ]);
            app($this->flowProcessRepository)->updateData(['merge' => $merge_properties ], ["node_id" => $set_merger_node]);
        }
        // 保存函数本体
        app($this->flowProcessRepository)->updateData($insertData, ["node_id" => $nodeId]);
        if ($routFrom == "editNodeBase" && isset($param['process_type']) && $param['process_type'] == 'free') {
            // 查询自由节点信息-保存日志用

            $freeNodeInfoHistory = $this->getFlowFreeNodeInfo($nodeId);

            $historyData['circular_superior'] = $freeNodeInfoHistory['circular_superior'] ?? '';
            $historyData['circular_superior_type'] = $freeNodeInfoHistory['circular_superior_type'] ?? '';
            $historyData['entrust_get_superior_rule'] = $freeNodeInfoHistory['entrust_get_superior_rule'] ?? '';
            $historyData['circular_superior_degree'] = $freeNodeInfoHistory['circular_superior_degree'] ?? '';
            $historyData['circular_superior_user'] = $freeNodeInfoHistory['circular_superior_user'] ?? '';
            $historyData['circular_superior_role'] = $freeNodeInfoHistory['circular_superior_role'] ?? '';
            $historyData['circular_superior_dept'] = $freeNodeInfoHistory['circular_superior_dept'] ?? '';
            $historyData['quit_type'] = $freeNodeInfoHistory['quit_type'] ?? '';
            $historyData['back_type'] = $freeNodeInfoHistory['back_type'] ?? '';
            $historyData['can_set_required'] = $freeNodeInfoHistory['can_set_required'] ?? '';
            $historyData['back_to_type'] = $freeNodeInfoHistory['back_to_type'] ?? '';
            $historyData['set_required_type'] = $freeNodeInfoHistory['set_required_type'] ?? '';
            $historyData['required_control_id'] = $freeNodeInfoHistory['required_control_id'] ?? '';
            $historyData['run_type'] = $freeNodeInfoHistory['run_type'] ?? '';
            $historyData['preset_process'] = $freeNodeInfoHistory['preset_process'] ?? '';
            $historyData['free_preset_info'] = $freeNodeInfoHistory['free_preset_info'] ?? '';

            if (isset($insertData['free_preset_info'])) {
                foreach ($insertData['free_preset_info'] as $key => $value) {
                    if (isset($value['required_scope_config'])) {
                        $insertData['free_preset_info'][$key]['required_scope_config'] = "";
                    }
                    if (isset($value['required_control_id']) && !empty($value['required_control_id'])) {
                        if (is_array($value['required_control_id'])) {
                            $value['required_control_id'] = implode(',',$value['required_control_id']);
                        }
                        $insertData['free_preset_info'][$key]['required_control_id'] = $value['required_control_id'];
                    }
                }
            }
            unset($insertData['flow_process_free_has_many_preset']);
            unset($insertData['editField']);

            // 处理自由节点
            $this->editFlowFreeNode($nodeId,$param);
        }
        unset($insertData['origin_sort']);
        unset($insertData['flow_process_type']);
        // 清空节点信息redis缓存
        if (Redis::exists('flow_process_info_' . $nodeId)) {
            Redis::del('flow_process_info_' . $nodeId);
        }
        // 如果是 editNodeTemplate-节点表单模板设置页面，把归档模板列表拼接进历史数据info
        if ($routFrom == "editNodeTemplate") {
            if (isset($param["history_rule_list"])) {
                $historyData["history_rule_list"] = $param["history_rule_list"];
            } else if (isset($param["batch_history_rule_list"])) {
                $historyData["batch_history_rule_list"] = $param["batch_history_rule_list"];
            }
            if (isset($param['flow_run_template_toggle']) && $param['flow_run_template_toggle'] == 0) {
                //关闭规则时清楚规则，防止删除子表单时错误提示子表单已被应用
                app($this->flowFormTemplateRuleRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            }
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = $insertData;
        $logParam["history_info"] = json_decode(json_encode($historyData), true);
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, $routFrom, $own, $from);
        // 重新生成branch数据
        if (isset($param['flow_id'])  && $from != "batchNode" ) {
            app($this->flowParseService)->resetbranchInfo($param['flow_id']);
        }
        return "1";
    }

    /**
     * 【定义流程】 【节点设置】 编辑办理人员[默认办理人一起保存]
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodeTransactUser($param, $nodeId, $own = [], $from = "")
    {
        if ($nodeId == "batchNode") {
            $batchNode = isset($param["batchNode"]) ? $param["batchNode"] : [];
            if (empty($batchNode)) {
                // 保存失败，未获取到流程节点ID
                return ['code' => ['0x030155', 'flow']];
            } else {
                unset($param["batchNode"]);
                $saveResult = "";
                foreach ($batchNode as $key => $nodeId) {
                    $saveResult = $this->modifyFlowNodeTransactUser($param, $nodeId, $own, "batchNode");
                }
                return $saveResult;
            }
        }
        if ($from == "batchNode") {
            // 批量设置的时候，处理几个逻辑
            // 1 办理方式为123的节点，不能设置默认【主办人】
            // 2 首节点，不能设置默认办理人&主办人
            $getNodeParam = [];
            $getNodeParam["returntype"] = "first";
            $getNodeParam["search"] = ["node_id" => [$nodeId]];
            if ($nodeDetail = app($this->flowProcessRepository)->getFlowProcessList($getNodeParam)) {
                $nodeDetail = $nodeDetail->toArray();
                $processTransactType = $nodeDetail["process_transact_type"];
                if ($processTransactType > 0) {
                    $param["process_default_manage"] = "";
                }
                $headNodeToggle = $nodeDetail["head_node_toggle"];
                if ($headNodeToggle == "1") {
                    $param["process_default_user"] = "";
                    $param["process_default_manage"] = "";
                }
            }
        }
        $routFrom = isset($param['route_from']) ? $param['route_from'] : '';
        unset($param['route_from']);
        $historyData = $this->getFlowNodeInfo($nodeId);
        $newData = $param;
        /*
        // 1、验证 process_default_user 、 process_default_manage 在设置的经办人部门角色用户的范围内，不在，清除！
        // 2、参数注意： process_user 、 process_dept 、 process_role 和 process_auto_get_user 互斥！
         */
        $insertData = $param;
        // 经办人员范围为全体的处理
        if (isset($param["process_user"]) && $param["process_user"] == 'ALL') {
            $insertData['process_user'] = "ALL";
            unset($param['process_user']);
        } else {
            $insertData['process_user'] = "";
        }
        if (isset($param["process_role"]) && $param["process_role"] == 'ALL') {
            $insertData['process_role'] = "ALL";
            unset($param['process_role']);
        } else {
            $insertData['process_role'] = "";
        }
        if (isset($param["process_dept"]) && $param["process_dept"] == 'ALL') {
            $insertData['process_dept'] = "ALL";
            unset($param['process_dept']);
        } else {
            $insertData['process_dept'] = "";
        }
        if (isset($historyData['head_node_toggle']) && $historyData['head_node_toggle'] == '1') {
            $insertData['process_default_user'] = "";
            $param['process_default_user'] = '';
        } else {
            // 流程设置的默认办理人为全体的处理
            if (isset($param["process_default_user"]) && $param["process_default_user"] == 'ALL') {
                $insertData['process_default_user'] = "ALL";
                unset($param['process_default_user']);
            } else {
                $insertData['process_default_user'] = "";
            }
        }

        //流程设置智能获取办理人时处理原数据
        if (!empty($param['process_auto_get_user'])) {
            $insertData['process_dept'] = "";
            $insertData['process_role'] = "";
            $insertData['process_user'] = "";
        }
        // 经办人员范围为全体的处理
        $processUser = isset($param['process_user']) ? $param['process_user'] : '';
        $processRole = isset($param['process_role']) ? $param['process_role'] : '';
        $processDept = isset($param['process_dept']) ? $param['process_dept'] : '';
        // 流程设置的默认办理人为全体的处理
        $processDefaultUser = isset($param['process_default_user']) ? $param['process_default_user'] : '';
        app($this->flowProcessRepository)->updateData($insertData, ["node_id" => $nodeId]);
        // 清空节点信息redis缓存
        if (Redis::exists('flow_process_info_' . $nodeId)) {
            Redis::del('flow_process_info_' . $nodeId);
        }
        // 20200415，清除流程定时触发的流程数据Redis
        if (Redis::exists('flow_schedule_infos_needed:flow_id_' . $param['flow_id'])) {
            Redis::del('flow_schedule_infos_needed:flow_id_' . $param['flow_id']);
        }
        // 删除已有分表的数据
        $where = ['id' => [$nodeId]];
        if (isset($param['process_user']) || $insertData["process_user"] == 'ALL' || $insertData["process_role"] == 'ALL' || $insertData["process_dept"] == 'ALL' || !empty($param['process_auto_get_user'])) {
            app($this->flowProcessUserRepository)->deleteByWhere($where);
        }
        if (isset($param['process_role']) || $insertData["process_user"] == 'ALL' || $insertData["process_role"] == 'ALL' || $insertData["process_dept"] == 'ALL' || !empty($param['process_auto_get_user'])) {
            app($this->flowProcessRoleRepository)->deleteByWhere($where);
        }
        if (isset($param['process_dept']) || $insertData["process_user"] == 'ALL' || $insertData["process_role"] == 'ALL' || $insertData["process_dept"] == 'ALL' || !empty($param['process_auto_get_user'])) {
            app($this->flowProcessDepartmentRepository)->deleteByWhere($where);
        }
        if (isset($param['process_default_user']) || (isset($param['process_default_user']) && $param["process_default_user"] == 'ALL') || !empty($param['process_auto_get_user'])) {
            app($this->flowProcessDefaultUserRepository)->deleteByWhere($where);
        }
        // 插入新的
        // 插入固定流程经办人员范围数据
        $id = $nodeId;
        if (!empty($processUser)) {
            foreach ($processUser as $v) {
                $userData[] = ['id' => $id, 'user_id' => $v];
            }
            //$userData = array_reverse($userData, TRUE);
            app($this->flowProcessUserRepository)->insertMultipleData($userData);
        }
        if (!empty($processRole)) {
            $roleData = [];
            foreach ($processRole as $v) {
                $roleData[] = ['id' => $id, 'role_id' => $v];
            }
            //$roleData = array_reverse($roleData, TRUE);
            app($this->flowProcessRoleRepository)->insertMultipleData($roleData);
        }
        if (!empty($processDept)) {
            $deptData = [];
            foreach ($processDept as $v) {
                $deptData[] = ['id' => $id, 'dept_id' => $v];
            }
            //$deptData = array_reverse($deptData, TRUE);
            app($this->flowProcessDepartmentRepository)->insertMultipleData($deptData);
        }
        // 插入流程默认办理人范围数据
        if (!empty($processDefaultUser)) {
            $processDefaultUserData = [];
            foreach ($processDefaultUser as $v) {
                $processDefaultUserData[] = ['id' => $id, 'user_id' => $v];
            }
            //$processDefaultUserData = array_reverse($processDefaultUserData, TRUE);
            app($this->flowProcessDefaultUserRepository)->insertMultipleData($processDefaultUserData);
        } else {
            app($this->flowProcessDefaultUserRepository)->deleteByWhere($where);;
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = $newData;
        $logParam["history_info"] = json_decode(json_encode($historyData), true);
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, $routFrom, $own, $from);
        return $nodeId;
    }

    /**
     * 【定义流程】 【节点设置】 编辑字段控制
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodeFieldControl($param, $nodeId, $own = [])
    {
        if ($nodeId == "batchFlow") {
            $batchFlow = isset($param["batchFlow"]) ? $param["batchFlow"] : [];
            if (empty($batchFlow)) {
                // 保存失败，未获取到流程ID
                return ['code' => ['0x030154', 'flow']];
            } else {
                unset($param["batchFlow"]);
                $getNodeParam = [];
                $getNodeParam["flow_id"] = $batchFlow;
                $getNodeParam["fields"] = ["node_id"];
                $getNodeParam["returntype"] = "object";
                $batchNodeInfo = [];
                if ($flowProcessResult = app($this->flowProcessRepository)->getFlowProcessList($getNodeParam)) {
                    $batchNodeInfo = $flowProcessResult->pluck("node_id")->toArray();
                }
                if (!empty($batchNodeInfo)) {
                    foreach ($batchNodeInfo as $key => $nodeId) {
                        $this->modifyFlowNodeFieldControlRealize($param, $nodeId, $own, "batchFlow");
                    }
                }
                return "1";
            }
        } else if ($nodeId == "batchNode") {
            $batchNode = isset($param["batchNode"]) ? $param["batchNode"] : [];
            if (empty($batchNode)) {
                // 保存失败，未获取到流程节点ID
                return ['code' => ['0x030155', 'flow']];
            } else {
                unset($param["batchNode"]);
                $saveResult = "";
                foreach ($batchNode as $key => $nodeId) {
                    $saveResult = $this->modifyFlowNodeFieldControlRealize($param, $nodeId, $own, "batchNode");
                }
                return $saveResult;
            }
        } else {
            return $this->modifyFlowNodeFieldControlRealize($param, $nodeId, $own);
        }
    }

    /**
     * 【定义流程】 【节点设置】 编辑字段控制函数本体
     * @param  [type] $param  [description]
     * @param  [type] $nodeId [description]
     * @return [type]         [description]
     */
    public function modifyFlowNodeFieldControlRealize($param, $nodeId, $own = [], $saveType = "")
    {
        if (count($param)) {
            // 删除字段控制缓存
            if (Redis::exists('collect_control_purview_info_' . $nodeId)) {
                Redis::del('collect_control_purview_info_' . $nodeId);
            }
            $where = ['node_id' => [$nodeId]];
            // 先查 flow_process_control_operation
            $operationParam = ["search" => $where];
            $operationInfo = app($this->flowProcessControlOperationRepository)->getList($operationParam)->toArray();
            $controlIdRelationOperation = [];
            // 收集历史信息
            $historyData = [];
            if (count($operationInfo)) {
                foreach ($operationInfo as $key => $value) {
                    if (isset($value["control_id"]) && isset($value["operation_id"])) {
                        $controlIdRelationOperation[$value["control_id"]] = $value["operation_id"];
                        $operationDetailPluck = collect($value["control_operation_detail"])->pluck("operation_type")->toArray();
                        $historyData[$value["control_id"]] = implode(",", $operationDetailPluck);
                    }
                }
            }
            $routFrom = isset($param['route_from']) ? $param['route_from'] : '';
            $controlOperationCondition = $param['control_operation_condition'] ?? []; // 必填条件 属性
            if (isset($param['control_operation_condition'])) unset($param['control_operation_condition']);
            unset($param["route_from"]);
            $newData = [];
            foreach ($param as $paramKey => $paramValue) {
                // $paramKey == $controlId
                $operationId = "";
                // 有操作主表的数据，取 operation_id
                if (isset($controlIdRelationOperation[$paramKey])) {
                    $operationId = $controlIdRelationOperation[$paramKey];
                } else {
                    // 插入 flow_process_control_operation 获取 operation_id
                    $operationId = app($this->flowProcessControlOperationRepository)->insertGetId(['node_id' => $nodeId, 'control_id' => $paramKey]);
                }
                if ($operationId) {
                    // 删除 flow_process_control_operation_detail 再插入
                    app($this->flowProcessControlOperationDetailRepository)->deleteByWhere(['operation_id' => [$operationId]]);
                    if (count($paramValue)) {
                        $operationDetailData = [];
                        foreach ($paramValue as $v) {
                            $operationDetailData[] = ['operation_id' => $operationId, 'operation_type' => $v, 'operation_condition' => ''];
                        }
                        if (isset($controlOperationCondition[$paramKey])) {
                            if (isset($controlOperationCondition[$paramKey]['condition_required'])) {
                                $operationDetailData[] = ['operation_id' => $operationId, 'operation_type' => 'condition_required', 'operation_condition' => $controlOperationCondition[$paramKey]['condition_required']];
                            }
                            if (isset($controlOperationCondition[$paramKey]['control_required'])) {
                                $operationDetailData[] = ['operation_id' => $operationId, 'operation_type' => 'control_required', 'operation_condition' => json_encode($controlOperationCondition[$paramKey]['control_required'])];
                            }
                        }
                        app($this->flowProcessControlOperationDetailRepository)->insertMultipleData($operationDetailData);
                    }
                }
                $newData[$paramKey] = is_array($paramValue) ? implode("," ,$paramValue) : "";
            }
            // 清除main函数里用到的字段控制缓存
            Redis::hdel('fixed_flow_node_field_control_operation', $nodeId);
            Redis::hdel('fixed_flow_node_field_control_operation_condition', $nodeId);
            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = $newData;
            $logParam["history_info"] = json_decode(json_encode($historyData), true);
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process_control_operation&node_id", $nodeId, $routFrom, $own, $saveType);
        }
        return "1";
    }

    /**
     * 【定义流程】 【节点设置】 字段控制，解析表单控件，获取控件类型作为筛选条件，带数量
     *
     * @param  {[type]}       $param  [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function getFlowNodeFieldControlFilterInfo($param)
    {
        $type = isset($param["type"]) ? $param["type"] : "common";
        // 参数 flow_id 必填
        $filterInfo = [
            ["type" => "common", "fieldKey" => "text", "title" => trans("flow.input"), "total" => "0"],
            ["type" => "common", "fieldKey" => "textarea", "title" => trans("flow.textarea"), "total" => "0"],
            ["type" => "common", "fieldKey" => "radio", "title" => trans("flow.radio"), "total" => "0"],
            ["type" => "common", "fieldKey" => "checkbox", "title" => trans("flow.check_box"), "total" => "0"],
            ["type" => "common", "fieldKey" => "select", "title" => trans("flow.dropdown_box"), "total" => "0"],
            ["type" => "more", "fieldKey" => "editor", "title" => trans("flow.editor"), "total" => "0"],
            ["type" => "more", "fieldKey" => "data-selector", "title" => trans("flow.system_data"), "total" => "0"],
            ["type" => "more", "fieldKey" => "signature-picture", "title" => trans("flow.signature_picture"), "total" => "0"],
            ["type" => "more", "fieldKey" => "upload", "title" => trans("flow.attachments_upload"), "total" => "0"],
            ["type" => "more", "fieldKey" => "countersign", "title" => trans("flow.countersign_control"), "total" => "0"],
            ["type" => "more", "fieldKey" => "detail-layout", "title" => trans("flow.detail_layout"), "total" => "0"],
            // ["fieldKey"=>"dynamicInfo","title"=>trans("flow.dynamic_information"),"total"=>"0"],
            ["type" => "more", "fieldKey" => "electronic-signature", "title" => trans("flow.electronic_signature"), "total" => "0"],
        ];
        $flowId = isset($param['flow_id']) && !empty($param['flow_id']) ? $param['flow_id'] : '';
        $flowFormFilterArray = array();
        if ($flowId) {
            $flowDetail = app($this->flowTypeRepository)->getDetail($flowId);
            if (!empty($flowDetail)) {
                $flowFromData = app($this->flowFormService)->getParseForm($flowDetail->form_id, array());
                if (!empty($flowFromData)) {
                    foreach ($flowFromData as $key => $value) {
                        $controlType = $value['control_type'] ?? ($value['type'] ?? '');
                        // $controlParentId = isset($value['control_parent_id']) ? $value['control_parent_id'] : "";
                        // if($controlParentId != "") {
                        //     $controlType = "detail-layout";
                        // }
                        // 排除[动态信息]控件
                        if ($controlType != 'dynamic-info') {
                            // 排除只读控件
                            if (isset($value['control_attribute']) && ((isset($value['control_attribute']['data-efb-readonly']) && ($value['control_attribute']['data-efb-readonly'] === 'true' || $value['control_attribute']['data-efb-readonly'] == true)))) {
                            }else {
                                if (isset($flowFormFilterArray[$controlType])) {
                                    $flowFormFilterArray[$controlType]++;
                                } else {
                                    $flowFormFilterArray[$controlType] = "1";
                                }
                            }
                        }
                    }
                }
            }
        }
        $result = [];
        foreach ($filterInfo as $filterInfoKey => $filterInfoValue) {
            if (isset($flowFormFilterArray[$filterInfoValue["fieldKey"]]) && $filterInfoValue["type"] == $type) {
                $filterInfoValue["total"] = $flowFormFilterArray[$filterInfoValue["fieldKey"]];
                if ($type == "more") {
                    $filterInfoValue["title"] = $filterInfoValue["title"] . " (" . $filterInfoValue["total"] . ")";
                }
                $result[] = $filterInfoValue;
            }
        }
        return $result;
    }

    /**
     * 【定义流程】 【节点设置】 编辑路径设置
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodePathSet($param, $nodeId)
    {
        // 清空节点信息redis缓存
        if (Redis::exists('flow_process_info_' . $nodeId)) {
            Redis::del('flow_process_info_' . $nodeId);
        }
        // 一个参数：process_to
        return (bool) app($this->flowProcessRepository)->updateData($param, ["node_id" => $nodeId]);
    }

    /**
     * 【定义流程】 【节点设置】 获取出口条件列表
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function getFlowNodeOutletList($param, $nodeId)
    {
        if ($detailResult = app($this->flowRunService)->getFlowNodeDetail($nodeId)) {
            // 处理出口条件内容
            $outTermAll = $detailResult->flowProcessHasManyOutCondition;
            if ($flowObject = app($this->flowTypeRepository)->getFlowTypeInfoRepository(["flow_id" => $detailResult->flow_id], ['flow_process'])) {
                $process_id = $detailResult->process_id;
                $process_to = $detailResult->process_to;
                if (!$process_to) {
                    // 默认流转到下一节点
                    $process_to = $process_id + 1;
                }
                $result = "";
                $process_to_array = explode(",", trim($process_to, ","));
                sort($process_to_array);
                $process_to_process_array = [];
                foreach ($flowObject->flowTypeHasManyFlowProcess as $keyProcess => $valueProcess) {
                    $process_to_process_array[$valueProcess->process_id] = $valueProcess;
                }
                foreach ($process_to_array as $key => $value) {
                    $termInfo = "";
                    foreach ($outTermAll as $termKey => $termValue) {
                        if ($termValue->process_to_process == $process_id . "-" . $value) {
                            $termValue["relation_name"] = app($this->flowRunService)->getOutConditionRelationString($termValue->relation);
                            $termInfo[] = $termValue;
                        }
                    }
                    if (isset($process_to_process_array[$value])) {
                        $result[$value]["list"] = $termInfo;
                        $result[$value]["info"] = $process_to_process_array[$value];
                    }
                }
                $detailResult["out_condition_list"] = $result;
                return $detailResult;
            }
        }
    }

    /**
     * 【定义流程】 【节点设置】 获取出口条件详情
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function getFlowNodeOutletInfo($termId)
    {
        return app($this->flowTermRepository)->getFlowNodeOutletDetail($termId);
    }

    /**
     * 【定义流程】 【节点设置】 添加出口条件
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function newFlowNodeOutlet($param)
    {
        return app($this->flowTermRepository)->insertDataBatch($param);
    }

    /**
     * 【定义流程】 【节点设置】 编辑出口条件
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodeOutlet($param, $termId)
    {
        return (bool) app($this->flowTermRepository)->updateData($param, ["term_id" => $termId]);
    }

    /**
     * 【定义流程】 【节点设置】 删除出口条件
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function removeFlowNodeOutlet($param, $termId)
    {
        $wheres = ["term_id" => [$termId]];
        app($this->flowTermRepository)->deleteByWhere($wheres);
        return "1";
    }

    /**
     * 【定义流程】 【节点设置】 编辑出口条件的关联关系
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodeOutletRelation($param, $nodeId)
    {
        $connect_relation = $param["connect_relation"];
        $process_to_process = $param["process_to_process"];
        return (bool) app($this->flowTermRepository)->updateData(["connect_relation" => $connect_relation], ["id" => $nodeId, "process_to_process" => $process_to_process]);
    }

    /**
     * 【定义流程】 【节点设置】 编辑子流程
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodeSubflow($param, $nodeId)
    {
        // 清空节点信息redis缓存
        if (Redis::exists('flow_process_info_' . $nodeId)) {
            Redis::del('flow_process_info_' . $nodeId);
        }
        // 参数： sub_workflow_ids 、 run_ways
        return (bool) app($this->flowProcessRepository)->updateData(["sub_workflow_ids" => $param["sub_workflow_ids"], "run_ways" => $param["run_ways"]], ["node_id" => $nodeId]);
    }

    /**
     * 【定义流程】 【节点设置】 编辑抄送人员
     *
     * @param  {[type]}       $param  [description]
     * @param  {[type]}       $nodeId [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function modifyFlowNodeCopyUser($param, $nodeId, $own, $saveType = "")
    {
        if ($nodeId == "batchNode") {
            $batchNode = isset($param["batchNode"]) ? $param["batchNode"] : [];
            if (empty($batchNode)) {
                // 保存失败，未获取到流程节点ID
                return ['code' => ['0x030155', 'flow']];
            } else {
                unset($param["batchNode"]);
                $saveResult = "";
                foreach ($batchNode as $key => $nodeId) {
                    $saveResult = $this->modifyFlowNodeCopyUser($param, $nodeId, $own, "batchNode");
                }
                return $saveResult;
            }
        }

        $routFrom = isset($param['route_from']) ? $param['route_from'] : '';
        unset($param['route_from']);
        $historyData = $this->getFlowNodeInfo($nodeId);
        $insertData = $param;
        $newData = $param;
        // 抄送人员范围为全体的处理
        if (isset($param["process_copy_user"]) && $param["process_copy_user"] == 'ALL') {
            $insertData['process_copy_user'] = "ALL";
            unset($param['process_copy_user']);
        } else {
            $insertData['process_copy_user'] = "";
        }
        if (isset($param["process_copy_role"]) && $param["process_copy_role"] == 'ALL') {
            $insertData['process_copy_role'] = "ALL";
            unset($param['process_copy_role']);
        } else {
            $insertData['process_copy_role'] = "";
        }
        if (isset($param["process_copy_dept"]) && $param["process_copy_dept"] == 'ALL') {
            $insertData['process_copy_dept'] = "ALL";
            unset($param['process_copy_dept']);
        } else {
            $insertData['process_copy_dept'] = "";
        }

        //流程设置智能获取抄送人时处理原数据
        if (!empty($param['process_auto_get_copy_user'])) {
            $insertData['process_copy_dept'] = "";
            $insertData['process_copy_role'] = "";
            $insertData['process_copy_user'] = "";
        }

        // 抄送人员范围为全体的处理
        $processCopyUser = isset($param['process_copy_user']) ? $param['process_copy_user'] : '';
        $processCopyRole = isset($param['process_copy_role']) ? $param['process_copy_role'] : '';
        $processCopyDept = isset($param['process_copy_dept']) ? $param['process_copy_dept'] : '';
        // 触发时机默认值处理
        $insertData['trigger_copy_submit'] = $param['trigger_copy_submit'] ?? 0;
        $insertData['trigger_copy_back'] = $param['trigger_copy_back'] ?? 0;
        $insertData['trigger_copy_end'] = $param['trigger_copy_end'] ?? 0;
        app($this->flowProcessRepository)->updateData($insertData, ["node_id" => $nodeId]);
        // 清空节点信息redis缓存
        if (Redis::exists('flow_process_info_' . $nodeId)) {
            Redis::del('flow_process_info_' . $nodeId);
        }
        // 删除已有分表的数据
        $where = ['id' => [$nodeId]];
        if (isset($param['process_copy_user'])) {
            app($this->flowProcessCopyUserRepository)->deleteByWhere($where);
        }
        if (isset($param['process_copy_role'])) {
            app($this->flowProcessCopyRoleRepository)->deleteByWhere($where);
        }
        if (isset($param['process_copy_dept'])) {
            app($this->flowProcessCopyDepartmentRepository)->deleteByWhere($where);
        }
        // 插入新的
        $id = $nodeId;
        // 插入固定流程抄送人员范围数据
        if (!empty($processCopyUser)) {
            $userData = [];
            foreach ($processCopyUser as $v) {
                $userData[] = ['id' => $id, 'user_id' => $v];
            }
            app($this->flowProcessCopyUserRepository)->insertMultipleData($userData);
        }
        if (!empty($processCopyRole)) {
            $roleData = [];
            foreach ($processCopyRole as $v) {
                $roleData[] = ['id' => $id, 'role_id' => $v];
            }
            app($this->flowProcessCopyRoleRepository)->insertMultipleData($roleData);
        }
        if (!empty($processCopyDept)) {
            $deptData = [];
            foreach ($processCopyDept as $v) {
                $deptData[] = ['id' => $id, 'dept_id' => $v];
            }
            app($this->flowProcessCopyDepartmentRepository)->insertMultipleData($deptData);
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = $newData;
        $logParam["history_info"] = json_decode(json_encode($historyData), true);
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, $routFrom, $own, $saveType);
        return $nodeId;
    }

    /**
     * 获取解析后的流程表单，即流程表单里的所有控件
     * 使用了流程模板之后，要从这里判断后分发
     * @param  [type] $formId [description]
     * @param  [type] $param   [description]
     * @return [type]         [description]
     */
    public function getParseForm($formId, $param)
    {
        $status   = isset($param["status"]) ? $param["status"] : "";
        $parentId = isset($param["parentId"]) ? $param["parentId"] : "";
        // 子表单预览，手机版
        if ($parentId > 0 && $status == "preview") {
            return app($this->flowFormService)->getParseForm("", $param, $formId);
        } else {
            // 已经传了模板id，flowService里面调用的时候--20180129，查到这里，这段if里的可以废弃
            if (isset($param["template_id"]) && $param["template_id"] > 0) {
                $formTemplateId = $param["template_id"];
                unset($param["template_id"]);
                return app($this->flowFormService)->getParseForm($formId, $param, $formTemplateId);
            } else {
                // pageMain 解析出来的表单模板规则的info
                $formTemplateRuleInfo = isset($param["formTemplateRuleInfo"]) ? $param["formTemplateRuleInfo"] : "";
                if ($formTemplateRuleInfo) {
                    $formTemplateRuleInfo = json_decode($formTemplateRuleInfo, true);
                }
                $moduleType = isset($param["moduleType"]) ? $param["moduleType"] : "";
                if ($moduleType == "filing") {
                    // 手机版，流程归档的文档，打开的时候，获取数据
                    $ruleId = isset($formTemplateRuleInfo["filing"]) ? $formTemplateRuleInfo["filing"] : "";
                } else {
                    // 这里不存在获取打印模板的情况，所以直接获取运行模板
                    $ruleId = isset($formTemplateRuleInfo["run"]) ? $formTemplateRuleInfo["run"] : "";
                }
                if ($ruleId) {
                    $ruleInfo = app($this->flowFormTemplateRuleRepository)->getDetail($ruleId);
                    // 子表单id
                    $templateId = (isset($ruleInfo["template_id"]) && $ruleInfo["template_id"] > 0) ? $ruleInfo["template_id"] : "";
                    return app($this->flowFormService)->getParseForm($formId, $param, $templateId);
                } else {
                    return app($this->flowFormService)->getParseForm($formId, $param);
                }
                // // 尝试获取模板
                // $flowTemplateInfo = $this->getFlowTemplateFormDetail($param);
                // if(isset($flowTemplateInfo->template_id) && $flowTemplateInfo->template_id) {
                //     $formTemplateId = $flowTemplateInfo->template_id;
                //     return app($this->flowFormService)->getParseForm($formId, $param,$formTemplateId);
                // } else {
                //     return app($this->flowFormService)->getParseForm($formId, $param);
                // }
            }
        }
        return [];
    }

    /**
     * 【定义流程】 【节点设置】 【办理人员】 经办人员/部门/角色的值的变化，会触发【默认办理人/主办人】的验证事件，验证人员是否在范围内，返回处理后的，在范围内的【默认办理人/主办人】
     *
     * @param  {[type]}       $param  [description]
     *
     * @return {[type]}               [description]
     * @author dingpeng
     *
     */
    public function verifyDefaultUserInclude($param)
    {
        $param = $this->parseParams($param);
        if (empty($param['search'])) {
            return [
                "default_user_id" => [],
                "process_default_manage" => '',
                "scope_user" => [],
            ];
        }
        // 默认办理人
        $defaultUserId = isset($param["default_user_id"]) ? $param["default_user_id"] : '';
        // 默认主办人
        $processDefaultManage = isset($param["process_default_manage"]) ? $param["process_default_manage"] : '';
        $scopeUserInfo = app($this->userService)->getConformScopeUserList($param);
        $scopeUserArray = $scopeUserInfo->pluck("user_id")->toArray();
        $scopeUserString = trim(implode(",", $scopeUserArray), ",");
        $defaultUserIdArray = [];
        // 验证是否在范围内
        if ($defaultUserId) {
            $defaultUserIdArray = explode(",", trim($defaultUserId, ","));
            if (count($defaultUserIdArray)) {
                foreach ($defaultUserIdArray as $key => $value) {
                    if (!in_array($value, $scopeUserArray)) {
                        unset($defaultUserIdArray[$key]);
                    }
                }
            }
        }
        if ($processDefaultManage) {
            if (!in_array($processDefaultManage, $scopeUserArray)) {
                $processDefaultManage = "";
            }
        }
        if (!empty($scopeUserArray) && isset($param['node_id']) && $param['node_id']) {
            // app($this->flowProcessRepository)->updateData(['handle_user_instant_save' => json_encode($scopeUserArray)], ['node_id' => [$param['node_id']]]);
            // 清空节点信息redis缓存
            if (Redis::exists('flow_process_info_' . $param['node_id'])) {
                Redis::del('flow_process_info_' . $param['node_id']);
            }
        }
        return [
            "default_user_id" => array_values($defaultUserIdArray),
            "process_default_manage" => $processDefaultManage,
            "scope_user" => array_values($scopeUserArray),
        ];
    }

    /**
     * 【流程表单控件序号】 根据流程表单id，查询此流程表单里所有的控件，按照序号（control_sort_id）排序（asc），关联所属分组（belongs_group）的信息。为了路由的规范性，表单id（flow_form_id）通过必填参数的方式传递。
     *
     * @return [type] [description]
     * @author dingpeng
     *
     */
    public function getFlowFormControlSort($param)
    {
        $param = $this->parseParams($param);
        $formId = isset($param['flow_form_id']) ? $param['flow_form_id'] : '';
        if (!$formId) {
            return [];
        }
        return app($this->flowFormControlSortRepository)->getFlowFormControlSortList($param);
    }

    /**
     * 【流程表单控件分组】 根据流程表单id（flow_form_id），获取此表单里的所有“控件分组”，按照序号（group_sort_id）排序（asc），关联下属所有表单控件信息。
     *
     * @return [type]          [description]
     * @author dingpeng
     *
     */
    public function getFlowFormControlGroup($param)
    {
        $param = $this->parseParams($param);
        $formId = isset($param['flow_form_id']) ? $param['flow_form_id'] : '';
        if (!$formId) {
            return [];
        }
        return app($this->flowFormControlGroupRepository)->getFlowFormControlGroupList($param);
    }

    /**
     * 【流程表单控件分组】 排序，分组两个表的数据保存只需要一个路由，格式化之后传到这个路由里，在此路由里进行处理。
     *
     * @return [type]          [description]
     * @author dingpeng
     *
     */
    public function saveFlowFormControlGroup($param)
    {
        $formId = isset($param['flow_form_id']) ? $param['flow_form_id'] : '';
        if (!$formId) {
            return [];
        }
        $saveSort = app($this->flowFormService)->modifyFlowFormControlSort($param, $formId);
        $saveGroup = app($this->flowFormService)->modifyFlowFormControlGroup($param, $formId);
        return $param;
    }

    /**
     * 【会签控件】 获取会签控件列表
     *
     * @author dingpeng
     *
     * @param  {[type]}               $param [description]
     *
     * @return {[type]}                      [description]
     */
    public function getFlowCounterSign($runId, $param)
    {
        $param = $this->parseParams($param);
        $nodeId = isset($param["nodeId"]) ? $param["nodeId"] : "";
        $userId = isset($param['user_id']) ? $param['user_id'] : '';
        // 验证流程的查看权限
        $verifyParams = [
            "type" => 'view',
            'run_id' => $runId,
            'user_id' => $userId,
        ];
        if (!app($this->flowPermissionService)->verifyFlowHandleViewPermission($verifyParams)) {
            return ['code' => ['0x000006', 'common']];
        }
        // 根据runid取flowid，取表单控件列表，取会签控件，取会签控件的排序属性
        $porcessformId = app($this->flowRunService)->getFormIdByRunId($runId);
        // 主流程结构
        $formControlStructure = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$porcessformId]]]);
        $countersignSortInfo = $this->getCountersignControlSortConfig($formControlStructure);
        // 字段控制权限
        $collectControlPurviewInfo = $this->getParseFormDataControlPurviewInfo($formControlStructure, $nodeId);
        $countersignList = [];
        // 取【非明细的】会签字段的值
        if (count($countersignSortInfo)) {
            foreach ($countersignSortInfo as $countersignControlId => $countersignSortItem) {
                $controlPurview = isset($collectControlPurviewInfo[$countersignControlId]) ? $collectControlPurviewInfo[$countersignControlId] : ["edit" => "", "empty" => "", "always" => "", "countersignVisible" => ""];
                // eachOtherNotVisible -- 互不可见，筛选数据
                $countersignVisible = isset($controlPurview["countersignVisible"]) ? $controlPurview["countersignVisible"] : [];
                $countersignVisibleNodeId = isset($countersignVisible["nodeId"]) ? $countersignVisible["nodeId"] : "";
                $countersignVisible = isset($countersignVisible["flag"]) ? $countersignVisible["flag"] : "";

                $countersignParam = [];
                $countersignParam["page"] = "0";
                $countersignParam["search"]["run_id"] = [$runId];
                $countersignParam["search"]["control_id"] = [str_replace("DATA_", "", $countersignControlId)];
                if (isset($countersignSortItem["sort"]) && $countersignSortItem["sort"] && isset($countersignSortItem["order"]) && $countersignSortItem["order"]) {
                    if ($countersignSortItem["sort"] == "countersign_time") {
                        $countersignParam["order_by"] = [$countersignSortItem["sort"] => $countersignSortItem["order"]];
                    } else {
                        $countersignParam["order_by"] = [$countersignSortItem["sort"] => $countersignSortItem["order"], 'countersign_time' => 'desc'];
                    }
                }
                $countersignInfoItem = app($this->flowCountersignRepository)->getCountersign($countersignParam);
                $countersignInfoItem = $this->flowCounterSignDataFilter($countersignInfoItem);
                // 存入主数组
                if (count($countersignInfoItem)) {
                    foreach ($countersignInfoItem as $key => $value) {
                        $roleName = '';
                        if (!empty($value['countersign_user']['user_has_many_role'])) {
                            foreach ($value['countersign_user']['user_has_many_role'] as $roleInfo) {
                                if (!empty($roleInfo['has_one_role']['role_name'])) {
                                    $roleName .= $roleInfo['has_one_role']['role_name'] . ',';
                                }
                            }
                            $value['countersign_user']['role_name'] = rtrim($roleName, ',');
                        }
                        $flowProcess = isset($value["flow_process"]) ? $value["flow_process"] : "";
                        if ($countersignVisibleNodeId == $flowProcess) {
                            if ($countersignVisible == "eachOtherNotVisible") {
                                if ($userId == $value["countersign_user_id"]) {
                                    $countersignList[] = $value;
                                }
                            } else {
                                if ($userId == $value["countersign_user_id"] ||  $value["save_type"] == 2) {
                                    $countersignList[] = $value;
                                }
                            }
                        } else {
                            $countersignList[] = $value;
                        }
                    }
                }
            }
        }
        return ["list" => $countersignList];
        // exit();
        // $param["page"] = "0";
        // $param["search"]["run_id"] = [$runId];
        // $countersignList = $this->response(app($this->flowCountersignRepository), 'getCountersignTotal', 'getCountersign', $param);
        // return $this->flowCounterSignDataFilter($countersignList);
    }

    /**
     * 过滤会签控件数据
     * 有两个地方调用 [function getFlowCounterSign] [function getParseFormDataFlowRunDatabaseData ==> getCountersign]，传的值不一样
     * @param  [type] $data [description]
     * @return [type]       [description]
     */
    public function flowCounterSignDataFilter($data)
    {
        if (isset($data["total"]) && isset($data["list"])) {
            $list = $data["list"];
        } else {
            $list = $data;
        }
        if (count($list)) {
            foreach ($list as $key => $value) {
                if (isset($value["countersign_user"]) && isset($value["countersign_user"]["user_has_one_system_info"]) && isset($value["countersign_user"]["user_has_one_system_info"]["user_system_info_belongs_to_department"])) {
                    $deptInfo = $value["countersign_user"]["user_has_one_system_info"]["user_system_info_belongs_to_department"];
                    $deptName = isset($deptInfo["dept_name"]) ? $deptInfo["dept_name"] : "";
                    $list[$key]["countersign_user"]["dept_name"] = $deptName;
                }
                if (isset($value["countersign_user"])) {
                    $countersignUser = $value["countersign_user"];
                    $listNumber = isset($countersignUser["list_number"]) ? $countersignUser["list_number"] : "";
                    $list[$key]["list_number"] = $listNumber;
                }
            }
        }
        if (isset($data["total"]) && isset($data["list"])) {
            $data["list"] = $list;
            return $data;
        } else {
            return $list;
        }
    }

    /**
     * 【会签控件】 新建会签
     *
     * @author 丁鹏
     *
     * @param  array $param [description]
     *
     * @since  2015-10-16 创建
     *
     * @return json 表单版本数据
     */
    public function createFlowCounterSign($runId, $data)
    {
        $formData = array_intersect_key($data, array_flip(app($this->flowCountersignRepository)->getTableColumns()));
        $insertResult = app($this->flowCountersignRepository)->insertData($formData);
        return $insertResult->countersign_id;
    }

    /**
     * 【会签控件】 编辑会签
     *
     * @author 丁鹏
     *
     * @param  array $data [description]
     *
     * @since  2015-10-16 创建
     *
     * @return json 表单版本数据
     */
    public function editFlowCounterSign($data, $countersignId)
    {
        $formData = array_intersect_key($data, array_flip(app($this->flowCountersignRepository)->getTableColumns()));
        return app($this->flowCountersignRepository)->updateData($formData, ['countersign_id' => $countersignId]);
    }

    /**
     * 【会签控件】 删除会签
     *
     * @author 丁鹏
     *
     * @param  string $formId [description]
     *
     * @since  2015-10-16 创建
     *
     * @return json 删除结果
     */
    public function deleteFlowCounterSign($countersignId)
    {
        return app($this->flowCountersignRepository)->deleteById($countersignId);
    }

    /**
     * 【会签控件】 获取会签详情
     *
     * @author 丁鹏
     *
     * @param  string $formId [description]
     *
     * @since  2015-10-16 创建
     *
     * @return json 某条表单版本详情数据
     */
    public function getFlowCounterSignDetail($countersignId)
    {
        return app($this->flowCountersignRepository)->getDetail($countersignId);
    }

    /**
     * 【流程定义】 节点设置-流程图节点信息更新
     * 1、节点设置-列表模式，出口设置
     * 2、流程图模式，节点位置更改
     * 3、流程图模式，拖动节点间连接线
     *
     */
    public function chartEditNode($data, $nodeId, $own = [])
    {
        // 判断节点编辑权限
        if (!app($this->flowPermissionService)->verifyFlowNodePermission($nodeId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $nodeInfo = app($this->flowPermissionService)->getProcessInfo($nodeId);
        if (isset($data['position'])) {
            $data['position'] = json_encode($data['position']);
        }
        if (isset($data['process_to'])) {
            if ($data['process_to'] == "") {
                return ['code' => ['0x000003', 'common']];
            }
            if ($checkChartResult = app($this->flowParseService)->checkChartNode($nodeId,$data['process_to'])){
				return $checkChartResult;
            }
            if ($nodeInfo->process_to) {
                $data['process_to'] = $nodeInfo->process_to . "," . $data['process_to'];
            }
        }
        // 清空节点信息redis缓存
        if (Redis::exists('flow_process_info_' . $nodeId)) {
            Redis::del('flow_process_info_' . $nodeId);
        }
        if (isset($data['nodesortstring'])) {
            // 去掉流出节点为空的控制
            // if ($data['nodesortstring'] == "") {
            //     return ['code' => ['0x000003', 'common']];
            // }
			$nodesortstring = explode(',',$data['nodesortstring']);
            $oldProcess_to = explode(',', $nodeInfo->process_to);
			foreach($nodesortstring as  $v){
				if ($checkChartResult = app($this->flowParseService)->checkChartNode($nodeId,$v ,$data['nodesortstring'])){
					return $checkChartResult;
				}
			}
			if (!empty($data['check'])) {
				return '1';
			}
            if (!empty($nodeInfo->concurrent) && $nodeInfo->concurrent == '2' && count($nodesortstring) < 2) {
                // 强制并发节点需要流出节点两个以上
                return ['code' => ['process_force_merge_set_error', 'flow']];
            }
            $updateResult = app($this->flowProcessRepository)->updateData(['process_to' => $data['nodesortstring']], ['node_id' => $nodeId]);
            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = ["process_to" => $data['nodesortstring']];
            $logParam["history_info"] = ["process_to" => $nodeInfo->process_to];
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, "editNodeBaseProcessTo", $own, "node");
			if (isset($nodeInfo->flow_id)) {
                app($this->flowParseService)->resetbranchInfo($nodeInfo->flow_id);
            }
            return $updateResult;
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = $data;
        $logParam["history_info"] = json_decode(json_encode($nodeInfo->toArray()), true);
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, "editNodeBaseFlowMapNodeInfoUpdate", $own, "node");
        $updateResult = app($this->flowProcessRepository)->updateData($data, ['node_id' => $nodeId]);
		// app($this->flowParseService)->updateProcessSerial($nodeInfo->flow_id);
        // 重新生成branch数据
        if (isset($nodeInfo->flow_id)) {
            app($this->flowParseService)->resetbranchInfo($nodeInfo->flow_id);
        }
        return $updateResult;
    }

    /**
     * 【流程定义】 节点设置-流程图节点删除
     *
     */
    public function chartDeleteNode($nodeId, $own = [])
    {
        // 判断节点编辑权限
        if (!app($this->flowPermissionService)->verifyFlowNodePermission($nodeId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $nodeInfo = app($this->flowPermissionService)->getProcessInfo($nodeId)->toArray();
        if (!$nodeInfo || $nodeInfo['head_node_toggle'] == 1) {
            return ['code' => ['0x030034', 'flow']];
        }
        $flowInfo = $this->getFlowDefineInfoService([], $nodeInfo['flow_id']);
        if (!empty($flowInfo['flow_type_has_many_flow_run'])) {
            return ['code' => ['0x030151', 'flow']];
        }
        $targetIds = app($this->flowProcessRepository)->getTargetNodeId($nodeId)->toArray();
        if (app($this->flowProcessRepository)->deleteById($nodeId)) {
            // 清空节点信息redis缓存
            if (Redis::exists('flow_process_info_' . $nodeId)) {
                Redis::del('flow_process_info_' . $nodeId);
            }
            // 删除字段控制缓存
            if (Redis::exists('collect_control_purview_info_' . $nodeId)) {
                Redis::del('collect_control_purview_info_' . $nodeId);
            }
            // 删除节点办理人设置
            app($this->flowProcessUserRepository)->deleteByWhere(['id' => [$nodeId]]);
            app($this->flowProcessRoleRepository)->deleteByWhere(['id' => [$nodeId]]);
            app($this->flowProcessDepartmentRepository)->deleteByWhere(['id' => [$nodeId]]);
            app($this->flowProcessDefaultUserRepository)->deleteByWhere(['id' => [$nodeId]]);
            // 删除字段控制设置
            app($this->flowProcessControlOperationRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            // 删除抄送人员设置
            app($this->flowProcessCopyUserRepository)->deleteByWhere(['id' => [$nodeId]]);
            app($this->flowProcessCopyRoleRepository)->deleteByWhere(['id' => [$nodeId]]);
            app($this->flowProcessCopyDepartmentRepository)->deleteByWhere(['id' => [$nodeId]]);
            // 删除子流程设置
            app($this->flowSunWorkflowRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            // 删除数据外发设置
            app($this->flowOutsendRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            // 删除表单模板设置flow_form_template_rule
            app($this->flowFormTemplateRuleRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            // 删除超时提醒设置
            app($this->flowOverTimeRemindRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            app($this->flowRunOverTimeRepository)->deleteByWhere(['node_id' => [$nodeId]]);
            // 删除出口条件
            $wheres = ["source_id" => [$nodeId]];
            app($this->flowTermRepository)->deleteByWhere($wheres);
            $wheres = ["target_id" => [$nodeId]];
            app($this->flowTermRepository)->deleteByWhere($wheres);
            //删除连接到此节点的连接信息 process_to
            //查找连接到此节点的节点
            foreach ($targetIds as $key => $value) {
                $oldProcess_to = explode(',', $value['process_to']);
                $newProcess_to = array_diff($oldProcess_to, [$nodeId]);
                $process_to = implode(',', $newProcess_to);
                app($this->flowProcessRepository)->updateData(['process_to' => $process_to], ['node_id' => $value['node_id']]);
            }
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = ["node_info" => ""];
        $logParam["history_info"] = ["node_info" => $nodeInfo];
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&flow_id", $nodeInfo['flow_id'], "editNodeBaseDeleteFlowProcess", $own, "node");
        //删除节点
        return true;
    }

    /**
     * 【流程定义】 节点设置-流程图节点新建
     *
     */
    public function chartCreateNode($data, $own = [])
    {
        // 判断流程编辑权限
        if (isset($data['flow_id']) && !app($this->flowPermissionService)->verifyFlowSettingPermission($data['flow_id'], $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        if (isset($data['position'])) {
            $data['position'] = json_encode($data['position']);
        }
        //查找当前最大sort
        $flowId = $data['flow_id'];
        // 如果有传入排序序号，不计算新序号
        if (isset($data['sort']) && is_numeric($data['sort'])) {
            $data['sort'] = intval($data['sort']);
        } else  {
            $maxSort = app($this->flowProcessRepository)->findMaxSort($flowId);
            $data['sort'] = $maxSort + 1;
        }
        $insertResult = app($this->flowProcessRepository)->insertData($data);
        if($insertResult) {
            $processType = $insertResult->process_type;
            if($processType=='free') {
                $freeData = [
                    'node_id' =>$insertResult->node_id
                ];
                app($this->flowProcessFreeRepository)->insertData($freeData);
            }
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = ["node_info" => $data];
        $logParam["history_info"] = ["node_info" => ""];
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&flow_id", $flowId, "editNodeBaseAddFlowProcess", $own, "node");
        return $insertResult;
    }

    /**
     * 【流程定义】 节点设置-流程图节点清除所有连线
     *
     */
    public function chartDeleteAllNodeProcessTo($flowId, $own = [])
    {
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $listParams = ['flow_id' => $flowId, 'returntype' => 'array'];
        $historyTermInfo = app($this->flowTermRepository)->getFlowNodeOutletList($listParams);
        $historyProcessToInfo = [];
        $flowProcessData = [
            "flow_id" => $flowId,
            "returntype" => "array",
        ];
        if ($flowProcessInfo = app($this->flowProcessRepository)->getFlowProcessList($flowProcessData)) {
            if (!empty($flowProcessInfo)) {
                foreach ($flowProcessInfo as $key => $flowProcessInfoItem) {
                    $nodeId = isset($flowProcessInfoItem["node_id"]) ? $flowProcessInfoItem["node_id"] : "";
                    $processTo = isset($flowProcessInfoItem["process_to"]) ? $flowProcessInfoItem["process_to"] : "";
                    $processName = isset($flowProcessInfoItem["process_name"]) ? $flowProcessInfoItem["process_name"] : "";
                    $historyProcessToInfo[$nodeId] = [
                        "node_id" => $nodeId,
                        "process_name" => $processName,
                        "process_to" => $processTo,
                    ];
                }
            }
        }
        //删除出口条件
        $wheres = ["flow_id" => [$flowId]];
        app($this->flowTermRepository)->deleteByWhere($wheres);
        $updateResult = app($this->flowProcessRepository)->updateData(['process_to' => ""], ['flow_id' => $flowId]);
        $flownodesparam["flow_id"] = $flowId;
        $flownodesparam['fields'][] = "node_id";
        $flownodesparam['returntype'] = "object";
        $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($flownodesparam)->pluck('node_id')->toArray();
        // 清空节点信息redis缓存
        if (!empty($flowNodes)) {
            foreach ($flowNodes as $value) {
                if (Redis::exists('flow_process_info_' . $value)) {
                    Redis::del('flow_process_info_' . $value);
                }
            }
        }
        // 调用日志函数
        $logParam = [];
        $logParam["new_info"] = ["term" => "", "process_to" => ""];
        $logParam["history_info"] = ["term" => $historyTermInfo, "process_to" => $historyProcessToInfo];
        app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, "editNodeBaseFlowMapDeleteAllNodeLink", $own, "node");
        return $updateResult;
    }

    /**
     * 【流程定义】 节点设置-流程图节点清除连线
     *
     */
    public function chartDeleteNodeProcessTo($data, $own = [])
    {
        // 判断节点编辑权限
        if (isset($data[0]) && !app($this->flowPermissionService)->verifyFlowNodePermission($data[0], $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        if (!empty($data)) {
            $nodeId = $data[0];
            $process_to = $data[1];
            $nodeInfo = app($this->flowPermissionService)->getProcessInfo($nodeId);
            $oldProcess_to = explode(',', $nodeInfo->process_to);
            if (!empty($nodeInfo->concurrent) && $nodeInfo->concurrent == '2' && (count($oldProcess_to) == 2) && in_array($process_to, $oldProcess_to)) {
                // 强制并发节点需要流出节点两个以上
                return ['code' => ['process_force_merge_set_error', 'flow']];
            }
            $newTermInfo = [];
            $historyTermInfo = app($this->flowTermRepository)->getOneNodeCondition($nodeId, $process_to);
            // 删除出口条件
            $wheres = ["source_id" => [$nodeId], "target_id" => [$process_to]];
            app($this->flowTermRepository)->deleteByWhere($wheres);
            $newProcess_to = array_diff($oldProcess_to, [$process_to]);
            $process_to = implode(',', $newProcess_to);
            $updateResult = app($this->flowProcessRepository)->updateData(['process_to' => $process_to], ['node_id' => $nodeId]);
            // 清空节点信息redis缓存
            if (Redis::exists('flow_process_info_' . $nodeId)) {
                Redis::del('flow_process_info_' . $nodeId);
            }
            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = ["term" => $newTermInfo, "process_to" => $process_to];
            $logParam["history_info"] = ["term" => $historyTermInfo, "process_to" => $nodeInfo->process_to];
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, "editNodeBaseFlowMapDeleteNodeLink", $own, "node");
            // 重新生成branch数据
            if (isset($nodeInfo->flow_id)) {
                app($this->flowParseService)->resetbranchInfo($nodeInfo->flow_id);
            }
            return $updateResult;
        } else {
            return ['code' => ['0x000003', 'common']];
        }

    }

    /**
     * 【流程定义】 节点设置-流程图节点保存出口条件
     *
     */
    public function chartUpdateNodeCondition($data, $own)
    {
        // 判断流程编辑权限
        if (isset($data['flow_id']) && !app($this->flowPermissionService)->verifyFlowSettingPermission($data['flow_id'], $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        if (isset($data['flow_id']) && isset($data['condition']) && isset($data['source_id']) && isset($data['source_id']) && !empty($data['flow_id']) && !empty($data['source_id']) && !empty($data['source_id'])) {
            $historyTermInfo = app($this->flowTermRepository)->getOneNodeCondition($data['source_id'], $data['target_id']);
            $historyTermInfo = $historyTermInfo->count() ? $historyTermInfo->first()->toArray() : [];
            $historyInfo = isset($historyTermInfo["condition"]) ? $historyTermInfo["condition"] : "";
            // 删除原有出口条件
            $wheres = ["source_id" => [$data['source_id']], "target_id" => [$data['target_id']]];
            app($this->flowTermRepository)->deleteByWhere($wheres);
            // 插入
            $insertTermParam = [
                "source_id" => $data['source_id'],
                "target_id" => $data['target_id'],
                "condition" => $data['condition'],
                "flow_id" => $data['flow_id'],
            ];
            $insertResult = app($this->flowTermRepository)->insertData($insertTermParam);
            $newTermInfo = app($this->flowTermRepository)->getOneNodeCondition($data['source_id'], $data['target_id']);
            $newTermInfo = $newTermInfo->count() ? $newTermInfo->first()->toArray() : [];
            $newInfo = isset($newTermInfo["condition"]) ? $newTermInfo["condition"] : "";
            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = ["term" => $newInfo];
            $logParam["history_info"] = ["term" => $historyInfo];
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $data['source_id'], "editNodeBaseEditNodeCondition", $own, "node");
            return $insertResult;
        } else {
            return ['code' => ['0x030148', 'flow']];
        }

    }

    // /**
    //  * 【流程定义】 节点设置-流程外发获取内部模块列表
    //  *
    //  */
    // function flowOutsendGetModuleList()
    // {
    //     $result = [];
    //     //获取配置模块列表
    //     $config = config('flowoutsend.module');
    //     foreach ($config as $key => $value) {
    //         $result[] = ['id' => $key,'title' => trans('outsend.'.$key.'.title'),'isSystemCustom'=>false];
    //     }//$value['title']
    //     //获取内置自定义模块列表
    //     $systemCustomList = app($this->formModelingService)->getCustomMenuList(['is_dynamic'=>1]);
    //     $result = array_merge($result,$systemCustomList);
    //     return $result;

    // }

    /**
     * 【流程定义】 节点设置-超时设置保存数据
     *
     */
    public function flowOverTimeSaveData($data, $userInfo, $saveType = "")
    {
        if (isset($data["node_id"]) && $data["node_id"] == "batchNode") {
            $batchNode = isset($data["batchNode"]) ? $data["batchNode"] : [];
            if (empty($batchNode)) {
                // 保存失败，未获取到流程节点ID
                return ['code' => ['0x030155', 'flow']];
            } else {
                unset($data["batchNode"]);
                $saveResult = "";
                foreach ($batchNode as $key => $nodeId) {
                    $data["node_id"] = $nodeId;
                    $saveResult = $this->flowOverTimeSaveData($data, $userInfo, "batchNode");
                }
                return $saveResult;
            }
        }
        //格式过滤
        if(isset($data['flowPressTimeSetDay']) && !empty($data['flowPressTimeSetDay'])  && !preg_match("/^[1-9][0-9]*$/",$data['flowPressTimeSetDay'])){
            return ['code' => ['flow_overtime_day_must_be_positive', 'flow']];
        }
        if(isset($data['flowPressTimeSetHour']) && !empty($data['flowPressTimeSetHour']) && !preg_match("/^\d+\.{0,1}\d{0,1}$/",$data['flowPressTimeSetHour'])){
            return ['code' => ['hours_are_positive_real_numbers', 'flow']];
        }
        $flowPressTimeSetDay = isset($data['flowPressTimeSetDay']) && !empty($data['flowPressTimeSetDay']) ? $data['flowPressTimeSetDay']:0;
        $flowPressTimeSetHour = isset($data['flowPressTimeSetHour'])  && !empty($data['flowPressTimeSetHour']) ? $data['flowPressTimeSetHour']:0;
        if ($flowPressTimeSetDay || $flowPressTimeSetHour) {
                if ($flowPressTimeSetDay > 0) {
                    $flowPressTimeSetHour = $flowPressTimeSetHour + $flowPressTimeSetDay * 24;
                }
                $press_add_hour = ($flowPressTimeSetHour);
        } else {
                // 如果为空，将清空所有节点的催促时间设置
                $press_add_hour = 0;
        }
        foreach ($data['overTimeRemind'] as $k => $v) {
            if(isset($v['remindHour']) && !empty($v['remindHour']) && !preg_match("/^\d+\.{0,1}\d{0,1}$/",$v['remindHour'])){
                return ['code' => ['hours_are_positive_real_numbers', 'flow']];
            }
            if(isset($v['remindDay']) && !empty($v['remindDay']) && !preg_match("/^\d+\.{0,1}\d{0,1}$/",$v['remindDay'])){
                return ['code' => ['flow_overtime_day_must_be_positive', 'flow']];
            }
        }
        $time = date('Y-m-d H:i:s' , time());
        if (isset($data['node_id']) && $data['node_id']) {
            $nodeId = $data['node_id'];
            // 清空节点信息redis缓存
            if (Redis::exists('flow_process_info_' . $nodeId)) {
                Redis::del('flow_process_info_' . $nodeId);
            }
            // 判断节点编辑权限
            if (!app($this->flowPermissionService)->verifyFlowNodePermission($nodeId, $userInfo)) {
                return ['code' => ['0x000006', 'common']];
            }
                    //新增超时提醒
                    if (count($data['overTimeRemind']) > 0) {
                        $insertData = [];
                        foreach ($data['overTimeRemind'] as $key => $value) {
                            $remindDay = isset($value['remindDay']) && !empty($value['remindDay'])  ? $value['remindDay']:0;
                            $remindHour = isset($value['remindHour']) && !empty($value['remindHour']) ? $value['remindHour']:0;
                            if ($remindDay || $remindHour) {
                                    if ($remindDay > 0) {
                                        $remindHour = $remindHour + $remindDay * 24;
                                    }
                                    $remind_time = ($remindHour);
                            } else {
                                    //清空该节点超时提醒数据
                                    app($this->flowOverTimeRemindRepository)->deleteByWhere(["node_id" => [$nodeId]]);
                                    continue;
                                    // 如果为空，将清空所有节点的催促时间设置
                            }
                            //更新超时提醒数据
                            $insertData[] = [
                                'flow_id' => $data['flow_id'],
                                'node_id' => $nodeId,
                                'overtime_ways' => isset($value['overtime_ways']) ? $value['overtime_ways'] : 0,
                                'remind_time' => $remind_time,
                                'created_at' => $time,
                                'updated_at' => $time,
                            ];

                        }
                        if (!empty($insertData)) {
                            app($this->flowOverTimeRemindRepository)->deleteByWhere(["node_id" => [$nodeId]]);
                            app($this->flowOverTimeRemindRepository)->insertMultipleData($insertData);
                        }
                    }
                    //更新flowprocess表数据
                    $updateData = [
                        'press_add_hour'         => $press_add_hour,
                        'overtime_except_nonwork'=> isset($data['overtime_except_nonwork']) ?$data['overtime_except_nonwork']:0 ,
                        'press_add_hour_remind'  => isset($data['press_add_hour_remind']) ? $data['press_add_hour_remind']:0 ,
                        'overtime_handle_required' => isset($data['overtime_handle_required']) ? $data['overtime_handle_required']:0,
                        'press_add_hour_turn'    => isset($data['press_add_hour_turn']) ? $data['press_add_hour_turn']:0,
                        'limit_skip_holiday_toggle' => isset($data['limit_skip_holiday_toggle']) ? $data['limit_skip_holiday_toggle']:0,
			/*
            $historyNodeInfo = $this->getFlowNodeInfo($nodeId);
            //保存超时时间设置
            //新增超时提醒
            if (count($data['overTimeRemind']) > 0) {
                $insertData = [];
                foreach ($data['overTimeRemind'] as $key => $value) {
                    $remindDay = isset($value['remindDay']) && !empty($value['remindDay'])  ? $value['remindDay']:0;
                    $remindHour = isset($value['remindHour']) && !empty($value['remindHour']) ? $value['remindHour']:0;
                    if ($remindDay || $remindHour) {
                            if ($remindDay > 0) {
                                $remindHour = $remindHour + $remindDay * 24;
                            }
                            $remind_time = ($remindHour);
                    } else {
                            //清空该节点超时提醒数据
                            app($this->FlowOverTimeRemindRepository)->deleteByWhere(["node_id" => [$nodeId]]);
                            continue;
                            // 如果为空，将清空所有节点的催促时间设置
                    }
                    //更新超时提醒数据
                    $insertData[] = [
                        'flow_id' => $data['flow_id'],
                        'node_id' => $nodeId,
                        'overtime_ways' => isset($value['overtime_ways']) ? $value['overtime_ways'] : 0,
                        'remind_time' => $remind_time,
                        'created_at' => $time,
                        'updated_at' => $time,
				*/
                    ];
                // }
                if (!empty($insertData)) {
                    app($this->flowOverTimeRemindRepository)->deleteByWhere(["node_id" => [$nodeId]]);
                    app($this->flowOverTimeRemindRepository)->insertMultipleData($insertData);
                }
            // }
            //更新flowprocess表数据
            $updateData = [
                'press_add_hour'         => $press_add_hour,
                'overtime_except_nonwork'=> isset($data['overtime_except_nonwork']) ?$data['overtime_except_nonwork']:0 ,
                'press_add_hour_remind'  => isset($data['press_add_hour_remind']) ? $data['press_add_hour_remind']:0 ,
                'overtime_handle_required' => isset($data['overtime_handle_required']) ? $data['overtime_handle_required']:0,
                'press_add_hour_turn'    => isset($data['press_add_hour_turn']) ? $data['press_add_hour_turn']:0,
                'limit_skip_holiday_toggle' => isset($data['limit_skip_holiday_toggle']) ? $data['limit_skip_holiday_toggle']:0,
            ];
            app($this->flowProcessRepository)->updateData($updateData, ['node_id' => [$nodeId]]);
            $historyData = [];
            $historyData["flowPressTimeSetDay"] = isset($historyNodeInfo["flowPressTimeSetDay"]) ? $historyNodeInfo["flowPressTimeSetDay"] : "0";
            $historyData["flowPressTimeSetHour"] = isset($historyNodeInfo["flowPressTimeSetHour"]) ?  $historyNodeInfo["flowPressTimeSetHour"] : "0";
            $historyData["overtime"] = isset($historyNodeInfo["overtime"]) ? $historyNodeInfo["overtime"] : [];
            $historyData["overtime_except_nonwork"] = isset($historyNodeInfo["overtime_except_nonwork"]) ? $historyNodeInfo["overtime_except_nonwork"] : [];
            $historyData["limit_skip_holiday_toggle"] = isset($historyNodeInfo["limit_skip_holiday_toggle"]) ? $historyNodeInfo["limit_skip_holiday_toggle"] : [];
            $historyData["press_add_hour_remind"] = isset($historyNodeInfo["press_add_hour_remind"]) ?$historyNodeInfo["press_add_hour_remind"] : [];
            $historyData["press_add_hour_turn"] = isset($historyNodeInfo["press_add_hour_turn"]) ?$historyNodeInfo["press_add_hour_turn"] : [];
            $historyData["overtime_handle_required"] = isset($historyNodeInfo["overtime_handle_required"]) ? $historyNodeInfo["overtime_handle_required"] : [];
            $newData = [];
            if (isset($GLOBALS['getFlowNodeDetail'.$nodeId])) {
                unset($GLOBALS['getFlowNodeDetail'.$nodeId]);
            }
            $newNodeInfo = $this->getFlowNodeInfo($nodeId);
            $newData["flowPressTimeSetDay"] = isset($newNodeInfo["flowPressTimeSetDay"]) ? $newNodeInfo["flowPressTimeSetDay"] : "0";
            $newData["flowPressTimeSetHour"] = isset($newNodeInfo["flowPressTimeSetHour"]) ? $newNodeInfo["flowPressTimeSetHour"] : "0";
            $newData["overtime"] = isset($newNodeInfo["overtime"]) ? $newNodeInfo["overtime"] : [];
            $newData["overtime_except_nonwork"] = isset($newNodeInfo["overtime_except_nonwork"]) ? $newNodeInfo["overtime_except_nonwork"] : [];
            $newData["limit_skip_holiday_toggle"] = isset($newNodeInfo["limit_skip_holiday_toggle"]) ?$newNodeInfo["limit_skip_holiday_toggle"] : [];
            $newData["press_add_hour_remind"] = isset($newNodeInfo["press_add_hour_remind"]) ? $newNodeInfo["press_add_hour_remind"] : [];
            $newData["press_add_hour_turn"] = isset($newNodeInfo["press_add_hour_turn"]) ? $newNodeInfo["press_add_hour_turn"] : [];
            $newData["overtime_handle_required"] = isset($newNodeInfo["overtime_handle_required"]) ? $newNodeInfo["overtime_handle_required"] : [];
            $routFrom = isset($data['route_from']) ? $data['route_from'] : '';
            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = json_decode(json_encode($newData), true);
            $logParam["history_info"] = json_decode(json_encode($historyData), true);
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_process&node_id", $nodeId, $routFrom, $userInfo, $saveType);

            return 1;
        } else if (isset($data['flow_id']) && !isset($data['node_id'])){
                //验证编辑权限
                $flowId = $data['flow_id'];
                 if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $userInfo)) {
                             return ['code' => ['0x000006', 'common']];
                 }
                 $historyInfo = $this->getFlowDefineInfoService([], $flowId);
                    //新增超时提醒
                    if (count($data['overTimeRemind']) > 0) {
                        $insertData = [];
                        foreach ($data['overTimeRemind'] as $key => $value) {
                            $remind_time = 0;
                            $remindDay = isset($value['remindDay']) && !empty($value['remindDay'])  ? $value['remindDay']:0;
                            $remindHour = isset($value['remindHour']) && !empty($value['remindHour']) ? $value['remindHour']:0;
                            if ($remindDay || $remindHour) {
                                    if ($remindDay > 0) {
                                        $remindHour = $remindHour + $remindDay * 24;
                                    }
                                    $remind_time = ($remindHour);
                            } else {
                                    continue;
                                    // 如果为空，将清空所有节点的催促时间设置
                            }
                            if (!empty($remind_time)) {
                                //更新超时提醒数据
                                $insertData[] = [
                                    'flow_id' => $flowId,
                                    'overtime_ways' => isset($value['overtime_ways']) ? $value['overtime_ways'] : 0,
                                    'remind_time' => $remind_time,
                                    'created_at' => $time,
                                    'updated_at' => $time,
                                ];
                            }
                        }

                    }
                     app($this->flowOverTimeRemindRepository)->deleteByWhere(["flow_id" => [$flowId]]);
                    if (!empty($insertData)) {
                        app($this->flowOverTimeRemindRepository)->insertMultipleData($insertData);
                    }
                //更新flowprocess表数据
                $updateData = [
                    'press_add_hour'         => $press_add_hour,
                    'overtime_except_nonwork'=> $data['overtime_except_nonwork'],
                    'limit_skip_holiday_toggle' => isset($data['limit_skip_holiday_toggle']) ? $data['limit_skip_holiday_toggle']:0,
                ];
                app($this->flowTypeRepository)->updateData($updateData, ['flow_id' => [$flowId]]);
                $historyData = [];
                $historyData["flowPressTimeSetDay"] = isset($historyInfo["flowPressTimeSetDay"]) ? $historyInfo["flowPressTimeSetDay"] : "0";
                $historyData["flowPressTimeSetHour"] = isset($historyInfo["flowPressTimeSetHour"]) ?$historyInfo["flowPressTimeSetHour"] : "0";
                $historyData["overtime"] = isset($historyInfo["overtime"]) ? $historyInfo["overtime"] : [];
                $historyData["overtime_except_nonwork"] = isset($historyInfo["overtime_except_nonwork"]) ?$historyInfo["overtime_except_nonwork"] : [];
                $historyData["limit_skip_holiday_toggle"] = isset($historyInfo["limit_skip_holiday_toggle"]) ? $historyInfo["limit_skip_holiday_toggle"] : [];
                $newInfo = $this->getFlowDefineInfoService([], $flowId);
                $newData = [];
                $newData["flowPressTimeSetDay"] = isset($newInfo['flowPressTimeSetDay']) ? $newInfo['flowPressTimeSetDay'] : "0";
                $newData["flowPressTimeSetHour"] = isset($newInfo['flowPressTimeSetHour']) ? $newInfo['flowPressTimeSetHour'] : "0";
                $newData["overtime"] = isset($newInfo["overtime"]) ? $newInfo["overtime"] : [];
                $newData["overtime_except_nonwork"] = isset($newInfo["overtime_except_nonwork"]) ? $newInfo["overtime_except_nonwork"] : [];
                $newData["limit_skip_holiday_toggle"] = isset($newInfo["limit_skip_holiday_toggle"]) ? $newInfo["limit_skip_holiday_toggle"] : [];
                $routFrom = isset($data['route_from']) ? $data['route_from'] : '';
                // 调用日志函数
                $logParam = [];
                $logParam["new_info"] = json_decode(json_encode($newData), true);
                $logParam["history_info"] = json_decode(json_encode($historyData), true);
                app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_others&flow_id", $flowId,'editOtherOvertime', $userInfo, $saveType);
            return 1;
        } else {
            return ['code' => ['0x000003', 'common']];
        }
    }


    /**未发现调用源，废弃wz
    /*
     * 为了解决流程设置主办人选择器，传递用户id字符串太长的问题
     * return "" -- 表示全体，
     * return ['user_id' => []] -- 表示范围内没人，
     * return ['user_id' => ['WV00000001','WV00000002']] -- 表示正常设置范围，
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function flowDefineHostUserSelectDirector($param)
    {
        // 20200804,zyx,原来的逻辑没有对自由流程的处理，现在统一获取
        $userScope = app($this->flowSettingService)->getBothFreeAndFixedFlowHandlers($param);
        if ($userScope["scope"]["user_id"] == "ALL") {
            return ""; // ""表示全部
        } else {
            return ['user_id' => $userScope["scope"]["user_id"]]; // []表示范围内没有人，非空数组表示有人
        }

        // 20200714,zyx,如果只有flow_id则需要获取首节点node_id
        // if (!isset($param['node_id']) && isset($param['flow_id'])) {
        //     $param['node_id'] = app($this->flowProcessRepository)->getFieldValue('node_id', ['flow_id' => $param['flow_id'], 'head_node_toggle' => 1]);
        // }
        // $nodeInfo = app($this->flowPermissionService)->getProcessInfo($param['node_id']);
        // if (!empty($nodeInfo->handle_user_instant_save)) {
        //     $scopeUserArray = json_decode($nodeInfo->handle_user_instant_save);
        //     return ['user_id' => $scopeUserArray];
        // } else {
        //     return "";
        // }
    }

    /**
     * 创建子流程
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function createSunflow($param, $userInfo)
    {
        if (!isset($param["node_id"]) || !isset($param["run_id"]) || !isset($param["user_id"]) || empty($param["node_id"]) || empty($param["run_id"]) || empty($param["user_id"])) {
            // 创建子流程失败，失败原因
            $logContent = $param["run_name"] . trans("flow.0x030100") . '： ' . trans('outsend.0x000008');
            app($this->flowLogService)->addSystemLog($param["user_id"], $logContent, 'sunflow' , '' , '' , '' ,0, '',[] , $param["run_name"]);
            return 1;
        }
        // 判断/获取子流程定义信息
        $flowId = $param["flow_id"];
        $nodeId = $param["node_id"];
        $userId = $param["user_id"];
        $runId = $param["run_id"];
        $runName = $param["run_name"];
        $processId = $param["process_id"];

        $detailResult = app($this->flowProcessRepository)->getFlowNodeSunFlowDetail($nodeId)->toArray();
        if ($detailResult) {
            // 搜集可触发的子流程ID，用于过滤前端传非法的参数
            $sunFlowIdArray = [];
            foreach ($detailResult['flow_process_has_many_sun_workflow'] as $key => $value) {
                if ($value['receive_flow_id']) {
                    // 20200515，zyx,原来的匹配字段是子流程id
                    // 但是没有考虑多个子流程配置同一个流程的、但触发条件不一致的情况
                    // 需要使用主键id作为唯一依赖
                    $sunFlowIdArray[$value['id']] = $value['premise'] ?? '';
                }
            }
            //子流程外发开关
            $sunFlowToggle = $detailResult['sun_flow_toggle'];
            //触发外发子流程数据
            $outsendToSunWorkflowData = $param['sonFlowInfo'];
            //20191209,获取当前节点已触发的子流程
            $sonFlowRunIds = DB::table('flow_run_process')->where('run_id', $runId)->where('process_id', $processId)->select('sub_flow_run_ids')->first();
            if (is_object($sonFlowRunIds)) {
                $sonFlowRunIds = json_decode(json_encode($sonFlowRunIds), TRUE);
            }
            $sub_run_id = $sonFlowRunIds['sub_flow_run_ids'];
            if (!empty($outsendToSunWorkflowData) && $sunFlowToggle == 1 && !empty($sunFlowIdArray)) {
                //主流程表单id
                $porcessformId = app($this->flowRunService)->getFormIdByRunId($runId);
                //主流程结构
                $formControlStructure = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$porcessformId]]]);
                //主流程数据
                $flowRunDatabaseData = [];
                if (count($formControlStructure)) {
                    $flowRunDatabaseData = $this->getParseFormDataFlowRunDatabaseData($formControlStructure, $runId, $porcessformId , '' ,$userInfo );
                }
                //多个子流程 逐个进行数据外发
                foreach ($outsendToSunWorkflowData as $key => $value) {
                    if (empty($value['receive_flow_id']) || !isset($sunFlowIdArray[$value['id']])) {
                        continue;
                    }
                    $verifyConditionParams = [
                        'form_structure' => $formControlStructure,
                        'user_id' => $value['user_id'],
                        'process_id' => $processId,
                    ];
                    $verifyConditionResult = app($this->flowRunService)->verifyFlowFormOutletCondition($sunFlowIdArray[$value['id']], $flowRunDatabaseData, $verifyConditionParams);
                    if (!$verifyConditionResult) {
                        $flowNameInfo = app($this->flowTypeRepository)->getDetail($value['receive_flow_id'], false, ['flow_name']);
                        if (!empty($flowNameInfo->flow_name)) {
                            $logContent = $param["run_name"] . trans("flow.0x030100") . '：'.trans('flow.sub_flow'). '['.$flowNameInfo->flow_name.']'. trans('outsend.0x000013');
                            app($this->flowLogService)->addSystemLog($userId, $logContent, 'sunflow' , '' , '' , '' ,0, '',[] , $param["run_name"]);
                        }
                        continue;
                    }
                    //是否为选中状态
                    if ($value['create'] == true) {
                        // 创建人如果为空则直接跳过
                        if (!isset($value['user_id']) || empty($value['user_id'])) {
                            // 创建子流程失败，失败原因
                            $logContent = $param["run_name"] . trans("flow.0x030100") . '： ' . trans('outsend.0x000009');
                            app($this->flowLogService)->addSystemLog($userId, $logContent, 'sunflow' , '' , '' , '' ,0, '',[] , $param["run_name"]);
                            continue;
                        }
                        $sunFlowData = app($this->flowSunWorkflowRepository)->getDetail(['id' => $value['id']])->first();
                        if ($sunFlowData) {
                            $sunFlowData = $sunFlowData->toArray();
                        }
                        // 获取&组装数据
                        $sendData = $this->getFlowOutsendDataForSunflow($sunFlowData, $formControlStructure, $flowRunDatabaseData, $userInfo, $value['user_id']);

                        $receiveFlowId = $sunFlowData['receive_flow_id'];
                        if ($receiveFlowId) {
                            // if (!isset($value['user_id']) && empty($value['user_id'])) {
                            //     // 创建子流程失败，失败原因
                            //     $logContent = $param["run_name"] . trans("flow.0x030100") . '： ' . trans('outsend.0x000009');
                            //     $this->addSystemLog($userId, $logContent, 'sunflow');
                            //     continue;
                            // }
                            $result = $this->flowOutsendToSunWorkflow(["flow_id" => $receiveFlowId, "user_id" => $value['user_id'], "parent_run_name" => $runName, 'instancy' => ($value['instancy'] ?? false)  , 'pid' => $param["pid"] ?? 0], $sendData, $userInfo);
                            if (isset($result['run_id']) && !empty($result['run_id'])) {
                                $sub_run_id .= $sub_run_id == '' ? $result['run_id'] : (',' . $result['run_id']);
                            }
                            if (isset($result['code'])) {
                                // 节点创建子流程失败，失败原因
                                $logContent = $runName  . trans("flow.comma"). trans("flow.0x030101") ."【". $detailResult['process_name'] ."】". trans("flow.comma"). trans("flow.0x030100") . '： ';
                                $logContent .= is_array($result['code']) ? trans($result['code'][1] . '.' . $result['code'][0]) : $result['code'];

                                app($this->flowLogService)->addSystemLog($userId, $logContent, 'sunflow', '' , '' , '' ,0, '',[] , $param["run_name"]);
                            } else {
                                // 节点
                                // 创建子流程成功
                                $logContent = $runName . trans("flow.comma"). trans("flow.0x030101") ."【". $detailResult['process_name'] ."】". trans("flow.comma").trans("flow.0x030102" , ['run_name' => $result['run_name']]);
                                app($this->flowLogService)->addSystemLog($userId, $logContent, 'sunflow' , '' , '' , '' ,0, '',[] , $param["run_name"]);

                                // 子流程触发提醒
                                $remindinfo = [
                                    'to_user'   => $value['user_id'],
                                    'run_name' => $result['run_name'],
                                    'flow_id'  => $receiveFlowId,
                                    'run_id'   => $result['run_id'],
                                ];
                                app($this->flowRemindService)->sonFlowCreationRemind($remindinfo);
                            }
                        }
                    }

                }
                if ($sub_run_id) {
                    app($this->flowRunProcessRepository)->updateData(['sub_flow_run_ids' => $sub_run_id],
                        ['run_id' => [$param['run_id']], 'process_id' => [$param['process_id']]]);
                }
            } else {
                return 6;
            }
        }

        return "2";
    }

    /*
     * 组装数据外发数据
     */
    public function getFlowOutsendDataForSunflow($data, $formControlStructure, $flowRunDatabaseData, $userInfo, $sunWorkCreator)
    {
        // $runId = 1375;
        // $data['receive_flow_id'] = 3161;
        // $data['porcess_fields'] = 'DATA_1_1,DATA_1_4,DATA_6,DATA_3';
        // $data['receive_fields'] = 'DATA_2_14,DATA_2_13,DATA_1,DATA_3';
        $formControlTypeArray = [];
        if (isset($data['receive_flow_id']) && $data['receive_flow_id'] != "") {
            //子流程信息
            $receiveformInfo = $this->getFlowDefineInfoService([], $data['receive_flow_id']);
            $receiveFirstNodeInfo = app($this->flowProcessRepository)->getFlowProcessList(['search' => ['head_node_toggle' => ['1']], 'fields' => ['node_id'], 'flow_id' => $data['receive_flow_id']])->first();
            $receiveFirstNodeId = '';
            if ($receiveFirstNodeInfo) {
                $receiveFirstNodeInfo = $receiveFirstNodeInfo->toArray();
                $receiveFirstNodeId = $receiveFirstNodeInfo['node_id'];
                if (!$receiveFirstNodeId) {
                    return [];
                }
            }
            $receiveformId = $receiveformInfo['form_id'];
            //子流程字段权限相关数据
            $formControlStructureInfo = $this->flowNewPageFlowRunInfo(['flow_id' => $data['receive_flow_id'], 'user_id' => $userInfo['user_id']], $userInfo, true);
            $nodeOperation = isset($formControlStructureInfo['node_operation']) ? $formControlStructureInfo['node_operation'] : [];
            if (isset($formControlStructureInfo['flow_type']) && $formControlStructureInfo['flow_type'] == 2) {
                $receiveFirstNodeId = 1;
            }

            $param = [
                'status' => 'new',
                'flowId' => $data['receive_flow_id'],
                'formId' => $receiveformId,
                'nodeId' => $receiveFirstNodeId,
            ];
            if (Cache::has('sunwork_create_user_info_' . $sunWorkCreator)) {
                $sunWorkCreatorInfo = Cache::get('sunwork_create_user_info_' . $sunWorkCreator);
            } else {
                $hotsUserInfos = app($this->userService)->getUserAllData($sunWorkCreator)->toArray();
                $roleId = [];
                $roleName = [];
                if (isset($hotsUserInfos['user_has_many_role']) && !empty($hotsUserInfos['user_has_many_role'])) {
                    foreach ($hotsUserInfos['user_has_many_role'] as $key => $value) {
                        $roleId[] = $value['role_id'];
                        $roleName[] = $value['has_one_role']['role_name'];
                    }
                }
                $sunWorkCreatorInfo = [
                    'user_id' => $sunWorkCreator,
                    'user_name' => isset($hotsUserInfos['user_name']) ? $hotsUserInfos['user_name'] : '',
                    'user_accounts' => isset($hotsUserInfos['user_accounts']) ? $hotsUserInfos['user_accounts'] : '',
                    'dept_name' => isset($hotsUserInfos['user_has_one_system_info']['user_system_info_belongs_to_department']['dept_name']) ? $hotsUserInfos['user_has_one_system_info']['user_system_info_belongs_to_department']['dept_name'] : '',
                    'dept_id' => isset($hotsUserInfos['user_has_one_system_info']['user_system_info_belongs_to_department']['dept_id']) ? $hotsUserInfos['user_has_one_system_info']['user_system_info_belongs_to_department']['dept_id'] : '',
                    'role_name' => $roleName,
                    'role_id' => $roleId,
                    'user_job_number' => isset($hotsUserInfos['user_job_number']) ? $hotsUserInfos['user_job_number'] : '',
                    'user_position_name' => isset($hotsUserInfos['user_position_name']) ? $hotsUserInfos['user_position_name'] : '',
                    'user_area_name' => isset($hotsUserInfos['user_area_name']) ? $hotsUserInfos['user_area_name'] : '',
                    'user_city_name' => isset($hotsUserInfos['user_city_name']) ? $hotsUserInfos['user_city_name'] : '',
                    'user_workplace_name' => isset($hotsUserInfos['user_workplace_name']) ? $hotsUserInfos['user_workplace_name'] : '',
                    'user_job_category_name' => isset($hotsUserInfos['user_job_category_name']) ? $hotsUserInfos['user_job_category_name'] : '',
                    'phone_number' => isset($hotsUserInfos['user_has_one_info']['phone_number']) ? $hotsUserInfos['user_has_one_info']['phone_number'] : '',
                ];
                Cache::put('sunwork_create_user_info_' . $sunWorkCreator, $sunWorkCreatorInfo, 120);
            }
            //子流程数据
            $formControlTypeArray = $this->getFlowFormParseData($param, $sunWorkCreatorInfo);
        }

        $flowDate = [];
        if (!empty($formControlTypeArray) && isset($formControlTypeArray['parseData']) && !empty($formControlTypeArray['parseData'])) {
            $flowDate = $formControlTypeArray['parseData'];
        }
        if (empty($data['porcess_fields']) || empty($data['receive_fields'])) {
            $porcess_fields_array = [];
            $receive_fields_array = [];
        } else {
            $porcess_fields_array = explode(',', $data['porcess_fields']);
            $receive_fields_array = explode(',', $data['receive_fields']);
            if (count($porcess_fields_array) != count($receive_fields_array)) {
                return ['form_data' => $flowDate, 'form_structure' => isset($formControlTypeArray['parseFormStructure']) ? $formControlTypeArray['parseFormStructure'] : []];

            }
        }
        $deleteArr = [];
        for ($i = 0; $i < count($receive_fields_array); $i++) {
            $control_date = [];
            if (empty($porcess_fields_array[$i]) || empty($receive_fields_array[$i])) {
                continue;
            }

            $receive_field_split = explode('_', $receive_fields_array[$i]);
            $porcess_field_split = explode('_', $porcess_fields_array[$i]);
            // 自由流程不需要验证字段编辑权限 直接以父流程数据为主
            // 判断字段是否可编辑
            // if ((isset($formControlStructureInfo['flow_type']) && $formControlStructureInfo['flow_type'] == 2) || (isset($nodeOperation[$receive_fields_array[$i]]) && (in_array('edit', $nodeOperation[$receive_fields_array[$i]]) == true || in_array('attachmentUpload', $nodeOperation[$receive_fields_array[$i]]) == true))) {
                //明细子项
                if (count($receive_field_split) == 3 || count($porcess_field_split) == 3) {
                    if (count($receive_field_split) != count($porcess_field_split)) {
                        continue;
                    }
                    // 清除从子流程获取的默认存在明细的值
                    if (!isset($deleteArr[ $receive_field_split[0] . '_' . $receive_field_split[1]])) {
                        unset( $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]]);
                        unset( $formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]]);
                        $deleteArr[ $receive_field_split[0] . '_' . $receive_field_split[1]] = 1;
                    }
                    //明细子项
                    ////主流程的控件有值就用主流程控件的值 否则就用子流程控件的值
                    //子流程数据
                    //$formControlTypeArray
                    //主流程数据
                    //$flowRunDatabaseData
                    if (isset($flowRunDatabaseData[$porcess_field_split[0] . '_' . $porcess_field_split[1]][$porcess_fields_array[$i]]) && !empty($flowRunDatabaseData[$porcess_field_split[0] . '_' . $porcess_field_split[1]][$porcess_fields_array[$i]])) {
                        $control_date = $flowRunDatabaseData[$porcess_field_split[0] . '_' . $porcess_field_split[1]][$porcess_fields_array[$i]];
                        if (isset($flowRunDatabaseData[$porcess_field_split[0] . '_' . $porcess_field_split[1]][$porcess_fields_array[$i] . '_TEXT'])) {
                            $control_date_text = $flowRunDatabaseData[$porcess_field_split[0] . '_' . $porcess_field_split[1]][$porcess_fields_array[$i] . '_TEXT'];
                        }
                    } else if (isset($formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]][$receive_fields_array[$i]])) {
                        $control_date = $formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]][$receive_fields_array[$i]];
                        if (isset($formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]][$receive_fields_array[$i] . '_TEXT'])) {
                            $control_date_text = $formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]][$receive_fields_array[$i] . '_TEXT'];
                        }
                    } else {
                        $control_date = [];
                    }

                    if (!isset($flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]])) {
                        $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]] = [];
                        $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1] . '_TEXT'] = [];
                    }

                    if (!empty($control_date)) {
                        // 这里明细子项默认值只有第一行的获取的，其他行传值给子流程的时候先复制第一行的数据，再更新配对的数据
                        $firstLineDetailLayoutData = $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][0] ?? [];
                        foreach ($control_date as $key => $value) {
                            // $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key] = $firstLineDetailLayoutData;
                            if (!isset($flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key])) {
                                $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key] = $firstLineDetailLayoutData;
                                // $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key] = [];
                            }
                            $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key][$receive_fields_array[$i]] = $value;
                            if (isset($control_date_text[$key])) {
                                $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key][$receive_fields_array[$i] . '_TEXT'] = $control_date_text[$key];
                            }
                        }
                    }
                } else {
                    //非明细子项
                    //发送的控件有值就用发送控件的值 否则就用接收控件有值
                    $control_date = isset($flowRunDatabaseData[$porcess_fields_array[$i]]) ? $flowRunDatabaseData[$porcess_fields_array[$i]] : (isset($formControlTypeArray['parseData'][$receive_fields_array[$i]]) ? $formControlTypeArray['parseData'][$receive_fields_array[$i]] : '');
                    $flowDate[$receive_fields_array[$i]] = $control_date;
                    if (isset($flowRunDatabaseData[$porcess_fields_array[$i] . '_TEXT']) || isset($formControlTypeArray['parseData'][$receive_fields_array[$i] . '_TEXT'])) {
                        $control_date = (isset($flowRunDatabaseData[$porcess_fields_array[$i] . '_TEXT']) && $flowRunDatabaseData[$porcess_fields_array[$i] . '_TEXT'] !== '') ? $flowRunDatabaseData[$porcess_fields_array[$i] . '_TEXT'] : (isset($formControlTypeArray['parseData'][$receive_fields_array[$i] . '_TEXT']) ? $formControlTypeArray['parseData'][$receive_fields_array[$i] . '_TEXT'] : '');
                        $flowDate[$receive_fields_array[$i] . '_TEXT'] = $control_date;
                    }
                };
            // } else {
            //     if (count($receive_field_split) == 3 || count($porcess_field_split) == 3) {
            //         if ($receive_field_split != $porcess_field_split) {
            //             continue;
            //         }
            //         //明细子项
            //         ////接收的控件的值为空则不外发
            //         if (!isset($formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]])) {
            //             continue;
            //         }
            //         //接收的控件的值
            //         $control_date = $formControlTypeArray['parseData'][$receive_field_split[0] . '_' . $receive_field_split[1]];
            //         if (!isset($control_date[$receive_fields_array[$i]])) {
            //             continue;
            //         }
            //         if (isset($control_date[$receive_fields_array[$i]])) {
            //             $control_date = $control_date[$receive_fields_array[$i]];
            //             if (isset($control_date[$receive_fields_array[$i] . '_TEXT'])) {
            //                 $control_date_text = $control_date[$receive_fields_array[$i] . '_TEXT'];
            //             }
            //         } else {
            //             $control_date = [];
            //         }

            //         if (!isset($flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]])) {
            //             $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]] = [];
            //         }
            //         if (!empty($control_date)) {
            //             foreach ($control_date as $key => $value) {
            //                 if (!isset($flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key])) {
            //                     $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key] = [];
            //                 }
            //                 $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key][$receive_fields_array[$i]] = $value;
            //                 if (isset($control_date_text[$key])) {
            //                     $flowDate[$receive_field_split[0] . '_' . $receive_field_split[1]][$key][$receive_fields_array[$i] . '_TEXT'] = $control_date_text[$key];
            //                 }
            //             }
            //         }
            //         //$flowDate[$receive_field_split[0].'_'.$receive_field_split[1]][$receive_fields_array[$i]] = $control_date;
            //     } else {
            //         //非明细子项
            //         //接收的控件的值
            //         $control_date = isset($formControlTypeArray['parseData'][$receive_fields_array[$i]]) ? $formControlTypeArray['parseData'][$receive_fields_array[$i]] : '';
            //         $flowDate[$receive_fields_array[$i]] = $control_date;
            //         if (isset($formControlTypeArray['parseData'][$receive_fields_array[$i] . '_TEXT'])) {
            //             $control_date = $formControlTypeArray['parseData'][$receive_fields_array[$i] . '_TEXT'];
            //             $flowDate[$receive_fields_array[$i] . '_TEXT'] = $control_date;
            //         }
            //     };
            // }
        }
        return ['form_data' => $flowDate, 'form_structure' => isset($formControlTypeArray['parseFormStructure']) ? $formControlTypeArray['parseFormStructure'] : []];
        // return $flowDate;
    }

    public function getSelectKey($selectData, $controlIdToAttr)
    {
        if ($selectData === '') {
            return '';
        }
        if (empty($controlIdToAttr)) {
            return $selectData;
        }
        $attribute = json_decode($controlIdToAttr, true);
        if (isset($attribute["data-efb-options"])) { //自定义下拉框
            $dataEfbOptions = $attribute["data-efb-options"];
            $dataEfbOptions = explode(',', $dataEfbOptions);
            foreach ($dataEfbOptions as $key => $value) {
                if ($value == $selectData) {
                    return $key;
                }
            }
            return '';
        }
        if (isset($attribute["data-efb-source"]) || isset($attribute["data-efb-source-value"])) {
            if ($attribute["data-efb-source"] == "combobox") {
                $module_field = strtolower($attribute['data-efb-source-value']);
                //查找多语言数据表
                $langKey = app($this->langService)->getLangKey($selectData, 'system_combobox_field_' . $module_field);
                if (!$langKey) {
                    return '';
                }
                //查找下拉框配置key
                if ($fieldValue = app($this->systemComboboxFieldRepository)->getValueByLangKey($langKey)) {
                    return $fieldValue->field_value;
                }
            } else if ($attribute["data-efb-source"] == "systemData") {
                $systemDataSelect = [
                    'charge' => [ //module
                        "charge_type_parent" => ['charge_type', 'charge_type_id', 'charge_type_name'], //0为一级
                        "charge_type" => ['charge_type', 'charge_type_id', 'charge_type_name'],
                        "charge_undertake" => ['charge_undertake', 'charge_undertake_id', 'charge_undertake_name'],
                    ],
                    'vehicles' => [
                        "vehicles_name" => ['vehicles', 'vehicles_id', 'vehicles_name'],
                    ],
                    'meeting' => [
                        "room_name" => ['meeting_rooms', 'room_id', 'room_name'],
                    ],
                    "vacation" => [
                        "vacation_type" => ['vacation', 'id', 'vacation_name'],
                    ],
                    "customer" => [
                        "linkman_id" => ['customer_linkman', 'linkman_id', 'linkman_name'],
                        "contract_id" => ['customer_linkman_gender', 'linkman_gender_id', 'linkman_gender_name'],
                    ],
                    "book" => [
                        "book" => ['book_type', 'id', 'type_name'],
                    ],
                    "personnel_files" => [
                        "archive" => ['user_status', 'status_id', 'status_name'],
                    ],
                    "storage" => [
                        "warehouse_id" => ['storage_warehouse', 'warehouse_id', 'warehouse_name'],
                    ],
                    "archives" => [
                        "library_id" => ['archives_library', 'library_id', 'library_name'],
                        "volume_id" => ['archives_volume', 'volume_id', 'volume_name'],
                        "hold_time" => ['archives_hold_time', 'hold_time_id', 'hold_time_title'],
                    ],
                    "salary" => [
                        "field_name" => ['salary_fields', 'field_id', 'field_name'],
                    ],
                    "project" => [
                        "manager_state" => [],
                    ],
                ];
                $hasLangtable = ['archive', 'hold_time', 'charge_undertake'];
                $source = json_decode($attribute["data-efb-source-value"], true);
                //模块
                $module = $source['module'];
                $module_field = $source['field'];
                //处理不需要翻译的下拉框数据
                if (!in_array($module_field, $hasLangtable)) {
                    //项目数据源不是来自于表 特殊处理
                    if ($module == "project") {
                        $resultData = [
                            "1" => app($this->langService)->getLangMoreVlaueForKey('project', 'in_the_project'),
                            "2" => app($this->langService)->getLangMoreVlaueForKey('project', 'examination_and_approval'),
                            "3" => app($this->langService)->getLangMoreVlaueForKey('project', 'retreated'),
                            "4" => app($this->langService)->getLangMoreVlaueForKey('project', 'have_in_hand'),
                            "5" => app($this->langService)->getLangMoreVlaueForKey('project', 'finished'),
                        ];
                        foreach ($resultData as $key => $value) {
                            if (in_array($selectData, $value)) {
                                return $key;
                            }
                        }
                        return '';
                    } else {
                        if (isset($systemDataSelect[$module][$module_field]) && count($systemDataSelect[$module][$module_field]) == 3) {
                            if (Schema::hasColumn($systemDataSelect[$module][$module_field][0], 'deleted_at')) {
                                $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $selectData)->whereNull('deleted_at')->first();
                            } else {
                                $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $selectData)->first();
                            }

                            if ($idInfo) {
                                $key_id = $systemDataSelect[$module][$module_field][1];
                                return $idInfo->$key_id;
                            }
                        }
                    }
                    return '';
                } else {
                    switch ($module_field) {
                        case 'archive':
                            //查找多语言数据表
                            $langKey = app($this->langService)->getLangKey($selectData, 'user_status');
                            if (!$langKey) {
                                return '';
                            }
                            break;
                        case 'hold_time':
                            //查找多语言数据表
                            $langKey = app($this->langService)->getLangKey($selectData, 'archives_hold_time');
                            if (!$langKey) {
                                return '';
                            }
                            break;
                        case 'charge_undertake':
                            //查找多语言数据表
                            $langKey = app($this->langService)->getLangKey($selectData, 'charge_undertake');
                            if (!$langKey) {
                                return '';
                            }
                            break;

                        default:
                            # code...
                            break;
                    }
                    if (isset($systemDataSelect[$module][$module_field]) && count($systemDataSelect[$module][$module_field]) == 3) {
                        if (Schema::hasColumn($systemDataSelect[$module][$module_field][0], 'deleted_at')) {
                            $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $langKey)->whereNull('deleted_at')->first();
                        } else {
                            $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $langKey)->first();
                        }

                        if ($idInfo) {
                            $key_id = $systemDataSelect[$module][$module_field][1];
                            return $idInfo->$key_id;
                        }
                    }
                    return '';
                }
            } else {
                return $selectData;
            }
        } else {
            return $selectData;
        }
    }
//升级历史数据用的方法
    public function getSelectKeyByHoData($selectData, $controlIdToAttr)
    {
        if ($selectData === '') {
            return '';
        }
        if (empty($controlIdToAttr)) {
            return $selectData;
        }
        $attribute = json_decode($controlIdToAttr, true);
        if (isset($attribute["data-efb-options"]) && !empty($attribute["data-efb-options"])) { //自定义下拉框
            $dataEfbOptions = $attribute["data-efb-options"];
            if (isset($dataEfbOptions['parent_id']) && isset($dataEfbOptions[$dataEfbOptions['parent_id']])) {
                foreach ($dataEfbOptions[$dataEfbOptions['parent_id']] as $key => $value) {
                    if (isset($value['secondOptions']) && in_array($selectData, $value['secondOptions'])) {
                        return $key . '_' . array_search($selectData, $value['secondOptions']);
                    }
                }
            } else {
                if (!is_array($dataEfbOptions)) {
                    $dataEfbOptions = explode(',', $dataEfbOptions);
                }
                foreach ($dataEfbOptions as $key => $value) {
                    if ($value == $selectData) {
                        return $key;
                    }
                }
            }
            return $selectData;
        }
        if (isset($attribute["data-efb-source"]) || isset($attribute["data-efb-source-value"])) {
            if ($attribute["data-efb-source"] == "combobox") {
                $module_field = strtolower($attribute['data-efb-source-value']);
                //查找多语言数据表
                $langKey = app($this->langService)->getLangKey($selectData, 'system_combobox_field_' . $module_field);
                if (!$langKey) {
                    return '';
                }
                //查找下拉框配置key
                $fieldValue = app($this->systemComboboxFieldRepository)->getValueByLangKey($langKey);
                if ($fieldValue) {
                    return $fieldValue->field_value;
                }
            } else if ($attribute["data-efb-source"] == "systemData") {
                $systemDataSelect = [
                    'charge' => [ //module
                        "charge_type_parent" => ['charge_type', 'charge_type_id', 'charge_type_name'], //0为一级
                        "charge_type" => ['charge_type', 'charge_type_id', 'charge_type_name'],
                        "charge_undertake" => ['charge_undertake', 'charge_undertake_id', 'charge_undertake_name'],
                    ],
                    'vehicles' => [
                        "vehicles_name" => ['vehicles', 'vehicles_id', 'vehicles_name'],
                    ],
                    'meeting' => [
                        "room_name" => ['meeting_rooms', 'room_id', 'room_name'],
                    ],
                    "vacation" => [
                        "vacation_type" => ['vacation', 'id', 'vacation_name'],
                    ],
                    "customer" => [
                        "linkman_id" => ['customer_linkman', 'linkman_id', 'linkman_name'],
                        "contract_id" => ['customer_linkman_gender', 'linkman_gender_id', 'linkman_gender_name'],
                    ],
                    "book" => [
                        "book" => ['book_type', 'id', 'type_name'],
                    ],
                    "personnel_files" => [
                        "archive" => ['user_status', 'status_id', 'status_name'],
                    ],
                    "storage" => [
                        "warehouse_id" => ['storage_warehouse', 'warehouse_id', 'warehouse_name'],
                    ],
                    "archives" => [
                        "library_id" => ['archives_library', 'library_id', 'library_name'],
                        "volume_id" => ['archives_volume', 'volume_id', 'volume_name'],
                        "hold_time" => ['archives_hold_time', 'hold_time_id', 'hold_time_title'],
                    ],
                    "salary" => [
                        "field_name" => ['salary_fields', 'field_id', 'field_name'],
                    ],
                    "project" => [
                        "manager_state" => [],
                    ],
                ];
                $hasLangtable = ['archive', 'hold_time', 'charge_undertake'];
                $source = json_decode($attribute["data-efb-source-value"], true);
                //模块
                $module = $source['module'];
                $module_field = $source['field'];
                //处理不需要翻译的下拉框数据
                if (!in_array($module_field, $hasLangtable)) {
                    //项目数据源不是来自于表 特殊处理
                    if ($module == "project") {
                        $resultData = [
                            "1" => app($this->langService)->getLangMoreVlaueForKey('project', 'in_the_project'),
                            "2" => app($this->langService)->getLangMoreVlaueForKey('project', 'examination_and_approval'),
                            "3" => app($this->langService)->getLangMoreVlaueForKey('project', 'retreated'),
                            "4" => app($this->langService)->getLangMoreVlaueForKey('project', 'have_in_hand'),
                            "5" => app($this->langService)->getLangMoreVlaueForKey('project', 'finished'),
                        ];
                        foreach ($resultData as $key => $value) {
                            if (in_array($selectData, $value)) {
                                return $key;
                            }
                        }
                        return '';
                    } else {
                        if (isset($systemDataSelect[$module][$module_field]) && count($systemDataSelect[$module][$module_field]) == 3) {
                            if (Schema::hasColumn($systemDataSelect[$module][$module_field][0], 'deleted_at')) {
                                $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $selectData)->whereNull('deleted_at')->first();
                            } else {
                                $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $selectData)->first();
                            }

                            if ($idInfo) {
                                $key_id = $systemDataSelect[$module][$module_field][1];
                                return $idInfo->$key_id;
                            }
                        }
                    }
                    return '';
                } else {
                    switch ($module_field) {
                        case 'archive':
                            //查找多语言数据表
                            $langKey = app($this->langService)->getLangKey($selectData, 'user_status');
                            if (!$langKey) {
                                return '';
                            }
                            break;
                        case 'hold_time':
                            //查找多语言数据表
                            $langKey = app($this->langService)->getLangKey($selectData, 'archives_hold_time');
                            if (!$langKey) {
                                return '';
                            }
                            break;
                        case 'charge_undertake':
                            //查找多语言数据表
                            $langKey = app($this->langService)->getLangKey($selectData, 'charge_undertake');
                            if (!$langKey) {
                                return '';
                            }
                            break;

                        default:
                            # code...
                            break;
                    }
                    if (isset($systemDataSelect[$module][$module_field]) && count($systemDataSelect[$module][$module_field]) == 3) {
                        if (Schema::hasColumn($systemDataSelect[$module][$module_field][0], 'deleted_at')) {
                            $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $langKey)->whereNull('deleted_at')->first();
                        } else {
                            $idInfo = DB::table($systemDataSelect[$module][$module_field][0])->select($systemDataSelect[$module][$module_field][1])->where($systemDataSelect[$module][$module_field][2], $langKey)->first();
                        }

                        if ($idInfo) {
                            $key_id = $systemDataSelect[$module][$module_field][1];
                            return $idInfo->$key_id;
                        }
                    }
                    return '';
                }
            } else {
                return $selectData;
            }
        } else {
            return $selectData;
        }
    }

    /*
     * 【定义流程】 数据外发-外发至子流程
     *
     */
    public function flowOutsendToSunWorkflow($param, $formData, $userInfo)
    {
        if (!isset($param["flow_id"]) || empty($param["flow_id"])) {
            return ['code' => ['0x000001', 'outsend']];
        }
        $flowId = $param["flow_id"];
        $userId = $param["user_id"];
        $parent_run_name = $param["parent_run_name"];
        $roleAndDept = app($this->userService)->getUserDeptIdAndRoleIdByUserId($userId);
        $roleId = $roleAndDept['role_id'];
        $userName = app($this->userService)->getUserName($userId);
        $deptId = $roleAndDept['dept_id'];
        $fixedFlowTypeInfo = $this->getFixedFlowTypeInfoByUserInfo(['user_id' => $userId, 'role_id' => $roleId, 'dept_id' => $deptId]);
        if(isset($formData['form_structure'])) {
            foreach ($formData['form_structure'] as $key => $value) {
                if(isset($value['control_type']) && $value['control_type'] == 'countersign') {
                    $formData['form_data'][$key.'_COUNTERSIGN'] = [];
                    if (isset($formData['form_data'][$key]) && !empty($formData['form_data'][$key])) {

                        if (is_array($formData['form_data'][$key])) {
                            foreach ($formData['form_data'][$key] as $k => $v) {
                                if ($v['countersign_user_id'] == $userInfo['user_id']) {
                                    $formData['form_data'][$key.'_COUNTERSIGN']['countersign_content'] = isset($v['countersign_content']) ? (is_array($v['countersign_content']) ? implode(',',$v['countersign_content']) : $v['countersign_content']) : '';
                                $formData['form_data'][$key.'_COUNTERSIGN']['countersign_user_id'] = isset($v['countersign_user_id']) ? $v['countersign_user_id'] : '';
                                $formData['form_data'][$key.'_COUNTERSIGN']['countersign_user_name'] = isset($v['user_name']) ? $v['user_name'] : '';
                                }
                            }
                        }else {
                            $formData['form_data'][$key.'_COUNTERSIGN']['countersign_content'] = $formData['form_data'][$key];
                            $formData['form_data'][$key.'_COUNTERSIGN']['countersign_user_id'] = $userId;
                            $formData['form_data'][$key.'_COUNTERSIGN']['countersign_user_name'] = $userName;
                        }
                    }
                }
            }
        }
        //验证是否有新建权限
        $count = app($this->flowTypeRepository)->flowNewPermissionListTotalRepository(['flow_id' => $flowId, 'user_id' => $userId, 'role_id' => $roleId, 'dept_id' => $deptId, 'fixedFlowTypeInfo' => $fixedFlowTypeInfo]);

        if (!$count) {
            return ['code' => ['0x000002', 'outsend']];
        }

        //初始化流程信息
        $result = $this->flowNewPageFlowRunInfo(['flow_id' => $flowId, 'user_id' => $userId], $userInfo, true);
        // 这里获取结果出错时直接返回
        if (isset($result['code'])) {
            return $result;
        }

        if (empty($formData)) {
            $formControlTypeArray = [];
            //子流程信息
            $receiveformInfo = $this->getFlowDefineInfoService([], $flowId);
            $receiveformId = $receiveformInfo['form_id'];
            $receiveFirstNodeId = '';
            if ($receiveformInfo['flow_type'] == 1) {
                $receiveFirstNodeInfo = app($this->flowProcessRepository)->getFlowProcessList(['search' => ['head_node_toggle' => ['1']], 'fields' => ['node_id'], 'flow_id' => $flowId])->first();
                if ($receiveFirstNodeInfo) {
                    $receiveFirstNodeInfo = $receiveFirstNodeInfo->toArray();
                    $receiveFirstNodeId = $receiveFirstNodeInfo['node_id'];
                    if (!$receiveFirstNodeId) {
                        return ['code' => ['0x000001', 'outsend']];
                    }
                } else {
                    return ['code' => ['0x000001', 'outsend']];
                }

            }
            $param = [
                'status' => 'new',
                'flowId' => $flowId,
                'formId' => $receiveformId,
                'nodeId' => $receiveFirstNodeId,
            ];
            //子流程数据
            $formControlTypeArray = $this->getFlowFormParseData($param, $userInfo);
            $formData['form_data'] = isset($formControlTypeArray['parseData']) ? $formControlTypeArray['parseData'] : [];
            $formData['form_structure'] = isset($formControlTypeArray['parseFormStructure']) ? $formControlTypeArray['parseFormStructure'] : [];
        }
        //插入流程
        $run_name = $result['flow_run_name'] ?? "";
        //是否增加标题前缀
        $sub_show_main_title = $result['flowInfoForFlowNameRulse']['sub_show_main_process_title'] ?? 1;
        // $flow_run_name = "[子流程] ".$flow_run_name;
        if (isset($result['can_edit_flowname']) && $result['can_edit_flowname']) {
            $can_edit_flowname = 'true';
            $edit = 'contenteditable="true"';
        } else {
            $can_edit_flowname = 'false';
            $edit = 'contenteditable="false"';
        }
        // $flow_run_name = trans("flow.0x030105", ['parent_run_name' => $parent_run_name, 'flow_run_name' => $run_name]);
        // $flow_run_name_html = '<div contenteditable="' . $can_edit_flowname . '" class="title-item">' . trans("flow.0x030105", ['parent_run_name' => $parent_run_name, 'flow_run_name' => $run_name]) . '</div>';
        $instancyType = ($param['instancy'] === false) ? app($this->flowSettingService)->getDefaultSelectedInstancyId() : $param['instancy']; //获取默认选中的紧急程度选项 // 20200309,如果传递了子流程紧急程度则使用之
        if (isset($result['flow_name_rules']) && !empty($result['flow_name_rules'])) {
            $result['flow_name_rules'] = json_decode($result['flow_name_rules']);
        }
        //模拟前端按规则生成子流程标题
        if (empty($result['flow_name_rules'])) {
            // 是否显示主流程触发字样
            $flow_run_name = $sub_show_main_title ? trans("flow.0x030105", ['parent_run_name' => $parent_run_name, 'flow_run_name' => $result['flowInfoForFlowNameRulse']['flow_name']]) : $result['flowInfoForFlowNameRulse']['flow_name'];

            $flow_run_name_html = '<div data-type="txt" contenteditable="' . $can_edit_flowname . '" class="title-html">' . trans("flow.0x030105", ['parent_run_name' => $parent_run_name, 'flow_run_name' => $result['flowInfoForFlowNameRulse']['flow_name']]) . '</div>';
        } else {
            $rule_run_names = $this->getFlowRunName($result['flow_name_rules'], $formData, $result['flowInfoForFlowNameRulse']);
            $flow_run_name_html = '<div  class="title-content" contenteditable="true" data-type="txt"></div>';
            if ($sub_show_main_title == 1) { // 显示主流程触发字样
                $flow_run_name_html .= '<div  class="title-html" contenteditable="true" data-type="txt">'. trans("flow.0x030105", ['parent_run_name' => $parent_run_name, 'flow_run_name' => '']) .'</div>';
            }
            $flow_run_name_html .= '<div  class="title-content" contenteditable="true" data-type="txt"></div>';
            if (!empty($rule_run_names)) {
                $rule_run_name = $rule_run_names['result'];
                $rule_run_name_text = $rule_run_names['result_text'];
                $structFlowName = [];
                foreach ($result['flow_name_rules'] as $key => $value) {
                    switch ($value->type) {
                        case "formData":
                            $controlId = $value->control_id;
                            $flow_run_name_html .= '<div class="title-html" contenteditable="true" data-type="formData" id="' . $controlId . '" data-id="' . $controlId . '" title="' . trans("flow.value_from") . $value->title . '"></div>';
                            break;
                        case "txt":
                            $content = (isset($value->id) && isset($rule_run_name[$value->id])) ? $rule_run_name[$value->id] : $value->title;
                            $flow_run_name_html .= '<div class="title-html" contenteditable="true" data-type="txt">'.$content.'</div>';
                            break;
                        case "date":
                            $flow_run_name_html .= '<div class="title-html" contenteditable="true" data-type="date">'.$rule_run_name[$value->id].'</div>';
                            break;
                        case "flowInfo":
                            $flow_run_name_html .= '<div class="title-html" contenteditable="true" data-type="flowInfo">'.$rule_run_name[$value->id].'</div>';
                            break;
                        default:
                            break;
                    }
                };
                $flow_run_name_html .= '<div  class="title-content" contenteditable="true" data-type="txt"></div>';
                // 是否显示主流程触发字样
                $flow_run_name = $sub_show_main_title ? trans("flow.0x030105", ['parent_run_name' => $parent_run_name, 'flow_run_name' => $rule_run_name_text]) : $rule_run_name_text;
            }

        }
        $run_id = $this->newPageSaveFlowInfo(['flow_id' => $flowId, 'flow_run_name' => $flow_run_name, 'run_name_html' => $flow_run_name_html, 'creator' => $userId, 'instancy_type' => $instancyType, 'form_data' => isset($formData['form_data']) ? $formData['form_data'] : [], 'form_structure' => isset($formData['form_structure']) ? $formData['form_structure'] : [], 'create_type' => "sonFlow", 'is_create_sun_flow' => true , 'parent_id'=> $param['pid']?? 0], $userInfo);

        return $run_id;
    }
    public function getFlowRunName($rules, $currentFormData, $flowInfo)
    {
        if (empty($rules)) {
            return [];
        }
        $result = [];
        $result_text = '';
        foreach ($rules as $_condtionArrTemp) {
            $_type = $_condtionArrTemp->type;
            $index = isset($_condtionArrTemp->id) ? $_condtionArrTemp->id : 'other';
            switch ($_type) {
                case "date":
                    if ($_condtionArrTemp->attribute->format == "Y-m-d H:i:s") {
                        $result[$index] = date("Y-m-d H:i:s");
                        $result_text .= date("Y-m-d H:i:s");
                    }
                    if ($_condtionArrTemp->attribute->format == "Y/m/d H/i/s") {
                        $result[$index] = date("Y/m/d H/i/s");
                        $result_text .= date("Y/m/d H/i/s");
                    }
                    if ($_condtionArrTemp->attribute->format == "Y年m月d日") {
                        $result[$index] = date("Y年m月d日");
                        $result_text .= date("Y年m月d日");
                    }
                    if ($_condtionArrTemp->attribute->format == "Y-m-d") {
                        $result[$index] = date('Y-m-d');
                        $result_text .= date('Y-m-d');
                    }
                    if ($_condtionArrTemp->attribute->format == "Y/m/d") {
                        $result[$index] = date('Y/m/d');
                        $result_text .= date('Y/m/d');
                    }
                    if ($_condtionArrTemp->attribute->format == "H:i:s") {
                        $result[$index] = date('H:i:s');
                        $result_text .= date('H:i:s');
                    }
                    if ($_condtionArrTemp->attribute->format == "H/i/s") {
                        $result[$index] = date('H/i/s');
                        $result_text .= date('H/i/s');
                    }
                    if ($_condtionArrTemp->attribute->format == "Y") {
                        $result[$index] = date('Y');
                        $result_text .= date('Y');
                    }
                    if ($_condtionArrTemp->attribute->format == "m") {
                        $result[$index] = date('m');
                        $result_text .= date('m');
                    }
                    if ($_condtionArrTemp->attribute->format == "d") {
                        $result[$index] = date('d');
                        $result_text .= date('d');
                    }

                    break;
                case "flowInfo":
                    if ($_condtionArrTemp->control_id == 'flowDefineName') {
                        $result[$index] = $flowInfo['flow_name'] ? $flowInfo['flow_name'] : $_condtionArrTemp->title;
                        $result_text .= $flowInfo['flow_name'] ? $flowInfo['flow_name'] : $_condtionArrTemp->title;
                    }
                    if ($_condtionArrTemp->control_id == 'flowDefineId') {
                        $result[$index] = $flowInfo['flow_id'] ? $flowInfo['flow_id'] : $_condtionArrTemp->title;
                        $result_text .= $flowInfo['flow_id'] ? $flowInfo['flow_id'] : $_condtionArrTemp->title;
                    }
                    if ($_condtionArrTemp->control_id == 'formName') {
                        $result[$index] = $flowInfo['form_name'] ? $flowInfo['form_name'] : $_condtionArrTemp->title;
                        $result_text .= $flowInfo['form_name'] ? $flowInfo['form_name'] : $_condtionArrTemp->title;
                    }
                    if ($_condtionArrTemp->control_id == 'formId') {
                        $result[$index] = $flowInfo['form_id'] ? $flowInfo['form_id'] : $_condtionArrTemp->title;
                        $result_text .= $flowInfo['form_id'] ? $flowInfo['form_id'] : $_condtionArrTemp->title;
                    }
                    if ($_condtionArrTemp->control_id == 'flowCreator') {
                        $result[$index] = $flowInfo['user_name'];
                        $result_text .= $flowInfo['user_name'];
                    }
                    if ($_condtionArrTemp->control_id == 'flowCreateTime') {
                        $result[$index] = date('Y-m-d H:i:s');
                        $result_text .= date('Y-m-d H:i:s');
                    }
                    if ($_condtionArrTemp->control_id == 'flowSortName') {
                        $result[$index] = $flowInfo['flow_type_name'] ? $flowInfo['flow_type_name'] : $_condtionArrTemp->title;
                        $result_text .= $flowInfo['flow_type_name'] ? $flowInfo['flow_type_name'] : $_condtionArrTemp->title;
                    }
                    break;
                case "formData":
                    $controlId = $_condtionArrTemp->control_id;
                    $controlText = $_condtionArrTemp->control_id . "_TEXT";
                    //控件存在时 解析控件值
                    if (isset($currentFormData['form_data']) && isset($currentFormData['form_data'][$controlId])) {
                        if (isset($currentFormData['form_data'][$controlText])) {
                            if (is_array($currentFormData['form_data'][$controlText])) {
                                $result_text .= implode(',', $currentFormData['form_data'][$controlText]);
                            }else {
                                $result_text .= $currentFormData['form_data'][$controlText];
                            }
                        }else {
                            if (is_array($currentFormData['form_data'][$controlId])) {
                                // 会签控件匹配非会签控件 发送过来的多维数组
                                if (isset($currentFormData['form_data'][$controlId][0]['countersign_id'])) {
                                    $currentFormData['form_data'][$controlId] = [];
                                }
                                $result_text .= implode(',', $currentFormData['form_data'][$controlId]);
                            }else {
                                $result_text .= $currentFormData['form_data'][$controlId];
                            }
                        }
                    }
                    break;
                case "txt":
                    $result_text .= $_condtionArrTemp->title;
                    break;
                default:
                    break;
            }
        }
        return ['result' => $result, 'result_text' => $result_text];
    }

    /*
     * 【定义流程】 编辑流水号规则
     *
     */
    public function updateFlowSequenceRule($data, $flowId, $own = [])
    {
        // 判断流程编辑权限
        if (isset($flowId) && !app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        if (isset($flowId) && (isset($data['length']) && $data['length'] !== "") && (isset($data['begin']) && $data['begin'] !== "")) {
            app($this->flowTypeRepository)->updateData(['flow_sequence_length' => $data['length'], 'flow_sequence_start' => $data['begin']], ['flow_id' => $flowId]);
        } else {
            return ['code' => ['0x000003', 'common']];
        }

    }

    /*
     * 【定义流程】 获取流出节点列表
     *
     */
    public function getFlowOutNodeList($nodeId, $own = [])
    {
        if ($nodeId == "undefined" || $nodeId == "null" || !$nodeId) {
            return [];
        }
        // 判断节点编辑权限
        if (!app($this->flowPermissionService)->verifyFlowNodePermission($nodeId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $resultData = [];
        if (isset($nodeId)) {
            $nodeInfo = app($this->flowProcessRepository)->getDetail(['node_id' => $nodeId])->toArray();
            if (!empty($nodeInfo[0]['process_to'])) {
                $nodelist = explode(',', $nodeInfo[0]['process_to']);
                $key = 0;
                foreach ($nodelist as $value) {
                    if ($value) {
                        $outnodeInfo = app($this->flowProcessRepository)->getDetail(['node_id' => $value])->toArray();
                        $conditions = app($this->flowTermRepository)->getOneNodeCondition($nodeId, $value)->toArray();
                        $resultData[$key]['condition'] = '';
                        if (isset($conditions[0]['condition'])) {
                            $resultData[$key]['condition'] = $conditions[0]['condition'];
                        }
                        $resultData[$key]['node_id'] = $value;
                        $out_list[$key]['sort'] = $outnodeInfo[0]['sort'];
                        $resultData[$key]['node_name'] = $outnodeInfo[0]['process_name'];
                        $resultData[$key]['sort'] = $outnodeInfo[0]['sort'];
                        $key++;
                    }
                }
            }
            return $resultData;
        } else {
            return ['code' => ['0x000003', 'common']];
        }

    }
    /*
     * 【定义流程】 获取当前流程的所有有流出节点的列表
     *
     */
    public function getFlowCurrentNodeList($flowId, $own = [])
    {
        if (isset($flowId)) {
            // 判断流程编辑权限
            if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
                return ['code' => ['0x000006', 'common']];
            }
            $nodeInfo = app($this->flowProcessRepository)->getAllNodeDetail(['flow_id' => $flowId])->toArray();
            return $nodeInfo;
        } else {
            return ['code' => ['0x000003', 'common']];
        }
    }

    /*
     * 【定义流程】 获取流出节点列表
     *
     */
    public function getFlowOutNodeListForList($nodeId, $own = [])
    {
        // 判断节点编辑权限
        if (isset($nodeId) && !app($this->flowPermissionService)->verifyFlowNodePermission($nodeId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $out_list = [];
        $node_list = [];
        $search = [];
        if (isset($nodeId)) {
            $search[] = $nodeId;
            $nodeInfo = app($this->flowProcessRepository)->getDetail(['node_id' => $nodeId])->toArray();
            if ($nodeInfo) {
                $flowId = $nodeInfo[0]['flow_id'];
                if (!empty($nodeInfo[0]['process_to'])) {
                    $outNodelist = explode(',', $nodeInfo[0]['process_to']);
                    $key = 0;
                    foreach ($outNodelist as $value) {
                        if ($value) {
                            $outnodeInfo = app($this->flowProcessRepository)->getDetail(['node_id' => $value])->toArray();
                            $out_list[$key]['node_id'] = $value;
                            $out_list[$key]['sort'] = $outnodeInfo[0]['sort'];
                            $out_list[$key]['node_name'] = $outnodeInfo[0]['process_name'];
                            $search[] = $value;
                            $key++;
                        }
                    }
                }
                $node_list = app($this->flowProcessRepository)->getFlowProcessListOutSelf($flowId, $search);
            }
            return [$node_list, $out_list];
        } else {
            return ['code' => ['0x000003', 'common']];
        }

    }

    /*
     * 【表单设计器】 返回导入的表单内容
     *
     */
    public function getImportFlowForm($data, $formId=0, $own = [])
    {
        if (empty($data['attachment_id']) && empty($data['print_model'])) {
            return ['code' => ['0x000003', 'common']];
        }
        // 判断表单操作权限
        if ($formId > 0 && !app($this->flowPermissionService)->verifyFormSettingPermission($formId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        $fileContent = '';
        $attachmentName = '';
        if (!empty($data['attachment_id'])) {
            $attachmentFile = app($this->attachmentService)->getOneAttachmentById($data['attachment_id']);
            $attachmentName = $attachmentFile['attachment_name'] ?? '';
            $fileContent = '';
            if (isset($attachmentFile['temp_src_file'])) {
                $fileContent = file_get_contents($attachmentFile['temp_src_file']);
            }
        } else {
            $fileContent = $data['print_model'];
        }

        if (empty($fileContent)) {
            return $fileContent;
        }
        $fileContent = convert_to_utf8($fileContent);
        $formType = '';
        if($formId > 0){
            $flowFormTypeInfo = app($this->flowFormTypeRepository)->getDetail($formId);
            $formType = $flowFormTypeInfo->form_type ?? '';
        }else{
            // 默认标准表单
            $formType = $data['form_type'] ?? 'complex';
        }
        $updateFormParams = [
            'print_model' => $fileContent,
            'form_type'   => $formType,
            'form_name'   => $attachmentName // 传入附件名称用于返回导入错误提示
        ];
        // 这里升级一下表单，兼容10.0的表单导入文件
        $updateFromHtmlResult = app($this->flowFormService)->updateFormHtml($updateFormParams);
        if (isset($updateFromHtmlResult['code'])) {
            return $updateFromHtmlResult;
        }
        return $updateFromHtmlResult['print_model'] ?? '';
    }

    /*
     * 【定义流程】 获取流程办理人离职人员信息
     *
     */
    public function getFlowQuitUserList($flowId, $own = [])
    {
        if (empty($flowId)) {
            return ['code' => ['0x000003', 'common']];
        }
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        //流程运行中的离职人员
        $runProcessResult = app($this->flowRunProcessRepository)->getFlowRunQuitUserList($flowId);
        //流程节点办理人设置中的离职人员
        $defineResult = app($this->flowProcessUserRepository)->getFlowQuitUserList($flowId);
        //流程节点抄送设置中的离职人员
        $copyResult = app($this->flowProcessCopyUserRepository)->getFlowQuitUserList($flowId);
        //流程节点默认办理人设置中的离职人员
        $defaultResult = app($this->flowProcessDefaultUserRepository)->getFlowQuitUserList($flowId);
        //流程设置默认主办人的离职人员
        $defaultManageResult = app($this->flowProcessRepository)->getFlowQuitUserList($flowId);
        //流程监控人员设置中的离职人员
        $manageuserResult = app($this->flowTypeManageUserRepository)->getFlowQuitUserList($flowId);
        //流程监控人员被监控人员中的离职人员
        $manageScopeUserResult = app($this->flowTypeManageScopeUserRepository)->getFlowQuitUserList($flowId);

        $nodeDefineResult = array_merge($defineResult, $copyResult, $defaultResult, $defaultManageResult);
        $resultInfo = [];
        foreach ($nodeDefineResult as $key => $value) {
            if (!isset($resultInfo[$value['user_id']])) {
                $resultInfo[$value['user_id']] = $value;
                $resultInfo[$value['user_id']]['node_id'] = [$value['node_id']];
                $resultInfo[$value['user_id']]['node_name'] = '';
                $nodeDetail = app($this->flowProcessRepository)->getDetail($value['node_id']);
                if ($nodeDetail) {
                    $resultInfo[$value['user_id']]['node_name'] .= $nodeDetail->process_name;
                }
            } else {
                if (!in_array($value['node_id'], $resultInfo[$value['user_id']]['node_id'])) {
                    array_push($resultInfo[$value['user_id']]['node_id'], $value['node_id']);
                    $nodeDetail = app($this->flowProcessRepository)->getDetail($value['node_id']);
                    if ($nodeDetail) {
                        $resultInfo[$value['user_id']]['node_name'] .= ',' . $nodeDetail->process_name;
                    }
                }
            }
            $resultInfo[$value['user_id']]['node_count'] = count($resultInfo[$value['user_id']]['node_id']);
        }
        $resultInfo = array_values($resultInfo);

        $result = array_merge($manageuserResult, $manageScopeUserResult, $resultInfo, $runProcessResult);
        $list = [];
        foreach ($result as $key => $value) {
            if (!isset($list[$value['user_id']])) {
                $list[$value['user_id']] = $value;
            } else {
                if (isset($value['count_run_process'])) {
                    $list[$value['user_id']]['count_run_process'] = $value['count_run_process'];
                    $list[$value['user_id']]['count_run_process_all'] = $value['count_run_process_all'];
                }
                if (isset($value['count_manage_user'])) {
                    $list[$value['user_id']]['count_manage_user'] = $value['count_manage_user'];
                    // $list[$value['user_id']]['flow_name'] = $value['count_manage_user_all'];
                }
                if (isset($value['node_count'])) {
                    $list[$value['user_id']]['node_count'] = $value['node_count'];
                    $list[$value['user_id']]['node_name'] = $value['node_name'];
                }
            }
        }
        // 自由节点预设人员以及自由节点步骤中的主办人
        $freeProcessSetUser = app($this->flowProcessFreeStepRepository)->getFreeProcessQuitUser(['flow_id' => $flowId]);
        $freePresetUser = app($this->flowProcessFreePresetRepository)->getFreeProcessQuitUser(['flow_id' => $flowId]);
        $freeUserInfo = array_merge($freeProcessSetUser, $freePresetUser);
        foreach ($freeUserInfo as $freeUser) {
            if (!isset($list[$freeUser['user_id']])) {
                $list[$freeUser['user_id']] = $freeUser;
                $list[$freeUser['user_id']]['node_array'][] = $freeUser['node_id'];
                $list[$freeUser['user_id']]['node_count'] = $list[$freeUser['user_id']]['node_count'] ?? 0;
                $list[$freeUser['user_id']]['node_count'] ++;
            } else {
                if (!isset($list[$freeUser['user_id']]['node_array'])) {
                    $list[$freeUser['user_id']]['node_array'] = [];
                }
                if (!in_array($freeUser['node_id'],$list[$freeUser['user_id']]['node_array'])) {
                    $list[$freeUser['user_id']]['node_array'][] = $freeUser['node_id'];
                    $list[$freeUser['user_id']]['node_count'] = $list[$freeUser['user_id']]['node_count'] ?? 0;
                    $list[$freeUser['user_id']]['node_count'] ++;
                }
            }
            $list[$freeUser['user_id']]['free_process_count'] = count($list[$freeUser['user_id']]['node_array']);
        }
        return array_values($list);
    }

    /*
     * 【定义流程】 替换流程设置办理人离职人员
     *
     */
    public function replaceHandleInfo($data, $flowId, $userInfo)
    {
        $currentUserId = isset($userInfo['user_id']) ? $userInfo['user_id'] : '';
        if (empty($flowId) || empty($currentUserId)) {
            return ['code' => ['0x000003', 'common']];
        }
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $userInfo)) {
            return ['code' => ['0x000006', 'common']];
        }
        $flownodesparam["flow_id"] = $flowId;
        $flownodesparam['fields'][] = "node_id";
        $flownodesparam['returntype'] = "object";
        $flowNodes = app($this->flowProcessRepository)->getFlowDefineProcessList($flownodesparam)->pluck('node_id')->toArray();
        // 清空节点信息redis缓存
        if (!empty($flowNodes)) {
            foreach ($flowNodes as $value) {
                if (Redis::exists('flow_process_info_' . $value)) {
                    Redis::del('flow_process_info_' . $value);
                }
            }
        }
        $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
        if ($flowTypeInfo) {
            $flowName = $flowTypeInfo->flow_name;
        } else {
            return ['code' => ['0x000003', 'common']];
        }

        if ($flowNodes && !empty($flowNodes)) {
            //流程设置办理人员替换
            if (isset($data['handleUser']) && !empty($data['handleUser'])) {
                foreach ($data['handleUser'] as $key => $value) {
                    //替换流程节点办理人
                    app($this->flowProcessUserRepository)->updateData(['user_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'user_id' => [$value['user']]]);
                    //替换流程节点抄送人员
                    $copyResult = app($this->flowProcessCopyUserRepository)->updateData(['user_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'user_id' => [$value['user']]]);
                    //替换流程节点默认办理人
                    $defaultResult = app($this->flowProcessDefaultUserRepository)->updateData(['user_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'user_id' => [$value['user']]]);
                    //替换流程节点默认主办人
                    $defaultManageResult = app($this->flowProcessRepository)->updateData(['process_default_manage' => $value['replaceUser']], ['node_id' => [$flowNodes, 'in'], 'process_default_manage' => [$value['user']]]);
                    //替换流程监控人员和被监控的人员
                    $typeManageResult = app($this->flowTypeManageUserRepository)->updateData(['user_id' => $value['replaceUser']], ['flow_id' => [$flowId], 'user_id' => [$value['user']]]);
                    $typeManageScopeUserResult = app($this->flowTypeManageScopeUserRepository)->updateData(['user_id' => $value['replaceUser']], ['flow_id' => [$flowId], 'user_id' => [$value['user']]]);
                    // 替换自由节点预设设置人员
                    app($this->flowProcessFreePresetRepository)->updateData(['handle_user' => $value['replaceUser']], ['node_id' => [$flowNodes, 'in'], 'handle_user' => [$value['user']]]);
                    // 替换自由节点步骤人员
                    app($this->flowProcessFreeStepRepository)->replaceUser(['replace_user' => $value['replaceUser'],'node_id' =>$flowNodes, 'user' => $value['user']]);
                    $userName = app($this->userService)->getUserName($value['user']);
                    $replaceUserName = app($this->userService)->getUserName($value['replaceUser']);
                    $logContent = trans("flow.0x030108", ['flow_name' => $flowName, 'flow_id' => $flowId, 'user_name' => $userName, 'user_replace_name' => $replaceUserName]); // '流程：'.$flowName.' flow_id: '.$flowId.'的人员: '.$userName.'替换为：'.$replaceUserName;1
                    app($this->flowLogService)->addSystemLog($currentUserId, $logContent, 'UserReplace', 'flow_type', $flowId, '' , 0 , '' , [],$userName);
                }
            }
            //流程设置办理角色替换
            if (isset($data['handleRole']) && !empty($data['handleRole'])) {
                foreach ($data['handleRole'] as $key => $value) {
                    //办理角色替换
                    app($this->flowProcessRoleRepository)->updateData(['role_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'role_id' => [$value['user']]]);
                    //抄送角色替换

                    app($this->flowProcessCopyRoleRepository)->updateData(['role_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'role_id' => [$value['user']]]);
                    // 监控角色替换
                    app($this->flowTypeManageRoleRepository )->updateData(['role_id' => $value['replaceUser']], ['flow_id' => [$flowId], 'role_id' => [$value['user']]]);

                    $roleName = app($this->roleRepository)->getDetail($value['user']);
                    $roleName = $roleName->role_name;
                    $roleReplaceName = app($this->roleRepository)->getDetail($value['replaceUser']);
                    $roleReplaceName = $roleReplaceName->role_name;
                    $logContent = trans("flow.0x030106", ['flow_name' => $flowName, 'flow_id' => $flowId, 'role_name' => $roleName, 'role_replace_name' => $roleReplaceName]); // '流程：'.$flowName.' flow_id: '.$flowId.'的角色: '.$roleName.'替换为：'.$roleReplaceName;
                    app($this->flowLogService)->addSystemLog($currentUserId, $logContent, 'UserReplace', 'flow_type', $flowId, '' , 0 , '' , [],$roleName);
                }
            }
            ////流程设置办理部门替换
            if (isset($data['handleDept']) && !empty($data['handleDept'])) {
                foreach ($data['handleDept'] as $key => $value) {
                    //办理部门
                    app($this->flowProcessDepartmentRepository)->updateData(['dept_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'dept_id' => [$value['user']]]);
                    //抄送部门

                    app($this->flowProcessCopyDepartmentRepository)->updateData(['dept_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'dept_id' => [$value['user']]]);

                    $deptName = app($this->departmentRepository)->getDetail($value['user']);
                    $deptName = $deptName->dept_name;
                    $deptReplaceName = app($this->departmentRepository)->getDetail($value['replaceUser']);
                    $deptReplaceName = $deptReplaceName->dept_name;
                    $logContent = trans("flow.0x030107", ['flow_name' => $flowName, 'flow_id' => $flowId, 'dept_name' => $deptName, 'dept_replace_name' => $deptReplaceName]); // '流程：'.$flowName.' flow_id: '.$flowId.'的部门: '.$deptName.'替换为：'.$deptReplaceName;
                    app($this->flowLogService)->addSystemLog($currentUserId, $logContent, 'UserReplace', 'flow_type', $flowId, '' , 0 , '' , [],$deptName);
                }
            }
            //流程设置办理人、运行流程参与人的离职人员替换
            if (isset($data['quitUser']) && !empty($data['quitUser'])) {
                foreach ($data['quitUser'] as $key => $value) {
                    $result = app($this->flowRunProcessRepository)->getTodoDataByUserId($flowId, $value['user'], false);
                    foreach ($result as $k => $v) {
                        app($this->flowWorkHandOverService)->replaceUserWhenFlowProcessIsRun($value['replaceUser'], $value['user'], $flowId, $v['flow_run_process_id'], $v['run_id']);
                    }
                    $flowRunDoneUserInfo = app($this->flowRunProcessRepository)->getFlowRunDoneUserList([$flowId],[$value['user']]);
                    if($flowRunDoneUserInfo) {
                        $flowRunDoneUserInfo = $flowRunDoneUserInfo->toArray();
                        foreach ($flowRunDoneUserInfo as $_v) {
                            app($this->flowWorkHandOverService)->addRunInfo($_v['run_id'],$value['user'],$value['replaceUser'],$userInfo, $_v['flow_run_process_id']);
                        }
                    }
                    //替换流程节点办理人设置中的离职人员
                    app($this->flowProcessUserRepository)->updateData(['user_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'user_id' => [$value['user']]]);
                    //替换流程节点抄送设置中的离职人员
                    $copyResult = app($this->flowProcessCopyUserRepository)->updateData(['user_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'user_id' => [$value['user']]]);
                    //替换流程节点默认办理人设置中的离职人员
                    $defaultResult = app($this->flowProcessDefaultUserRepository)->updateData(['user_id' => $value['replaceUser']], ['id' => [$flowNodes, 'in'], 'user_id' => [$value['user']]]);
                    //替换流程节点默认主办人
                    $defaultManageResult = app($this->flowProcessRepository)->updateData(['process_default_manage' => $value['replaceUser']], ['node_id' => [$flowNodes, 'in'], 'process_default_manage' => [$value['user']]]);
                    //替换流程监控人员设置中的离职人员
                    $defaultResult = app($this->flowTypeManageUserRepository)->updateData(['user_id' => $value['replaceUser']], ['flow_id' => [$flowId], 'user_id' => [$value['user']]]);

                    // 替换自由节点预设设置人员
                    app($this->flowProcessFreePresetRepository)->updateData(['handle_user' => $value['replaceUser']], ['node_id' => [$flowNodes, 'in'], 'handle_user' => [$value['user']]]);
                    // 替换自由节点步骤人员
                    app($this->flowProcessFreeStepRepository)->replaceUser(['replace_user' => $value['replaceUser'],'node_id' =>$flowNodes, 'user' => $value['user']]);
                    $userName = app($this->userService)->getUserName($value['user']);
                    $replaceUserName = app($this->userService)->getUserName($value['replaceUser']);
                    $logContent = trans("flow.0x030108", ['flow_name' => $flowName, 'flow_id' => $flowId, 'user_name' => $userName, 'user_replace_name' => $replaceUserName]); // '流程：'.$flowName.' flow_id: '.$flowId.'的人员: '.$userName.'替换为：'.$replaceUserName;
                    app($this->flowLogService)->addSystemLog($currentUserId, $logContent, 'quitUserReplace', 'flow_type', $flowId , '' , 0 , '' , [],$userName);
                }
            }
            return 1;
        }

        return ['code' => ['0x000003', 'common']];
    }

    /*
     * 【定义流程】 【表单模板】 取定义流程的各种表单模板  没找到调用的地方 应该是废弃了
     * 取运行模板参数： node_id,flow_id,template_type
     * 取打印、归档模板参数： flow_id,template_type
     *
     */
    public function getFlowNodeTemplate($param)
    {
        return [];
        $templateTpye = isset($param["template_type"]) ? $param["template_type"] : "";
        $operation = isset($param["operation"]) ? $param["operation"] : "";
        if ($operation == "reset") {
            // 重置表单模板为流程表单
            $flowId = isset($param["flow_id"]) ? $param["flow_id"] : "";
            $templateId = isset($param["template_id"]) ? $param["template_id"] : "";
            $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
            $formId = $flowTypeInfo->form_id;
            $formInfo = app($this->flowFormTypeRepository)->getDetail($formId);
            // 返回表单表单对象，前端手动保存（为了保存的时候，解析出控件）。
            return $formInfo;
            // $printModel   = $formInfo["print_model"];
            // app($this->flowFormTemplateRepository)->updateData(["print_model" => $printModel], ['template_id' => [$templateId]]);
            // return app($this->flowFormTemplateRepository)->getDetail($templateId);
        } else {
            if ($templateTpye == "run") {
                // 流程运行模板
                if (!isset($param["node_id"])) {
                    return [];
                }
                $nodeId = $param["node_id"];
                $flowId = isset($param["flow_id"]) ? $param["flow_id"] : "";
                $getParam = [
                    "returntype" => "first",
                    "search" => ["node_id" => [$nodeId], "template_type" => [$templateTpye]],
                ];
                $templateInfo = app($this->flowFormTemplateRepository)->getFlowFormTemplate($getParam);
                if ($templateInfo) {
                    return $templateInfo;
                } else {
                    $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
                    $formId = $flowTypeInfo->form_id;
                    $formInfo = app($this->flowFormTypeRepository)->getDetail($formId);
                    $printModel = $formInfo["print_model"];
                    // 插入原始表单
                    $flowFormTemplateData = [
                        "node_id" => $nodeId,
                        "flow_id" => $flowId,
                        "template_type" => $templateTpye,
                        "print_model" => $printModel,
                    ];
                    return app($this->flowFormTemplateRepository)->insertData($flowFormTemplateData);
                }
            } else if ($templateTpye == "print" || $templateTpye == "filing") {
                // 流程运行模板
                if (!isset($param["flow_id"])) {
                    return [];
                }
                $flowId = isset($param["flow_id"]) ? $param["flow_id"] : "";
                $getParam = [
                    "returntype" => "first",
                    "search" => ["flow_id" => [$flowId], "template_type" => [$templateTpye]],
                ];
                $templateInfo = app($this->flowFormTemplateRepository)->getFlowFormTemplate($getParam);
                if ($templateInfo) {
                    return $templateInfo;
                } else {
                    $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
                    $formId = $flowTypeInfo->form_id;
                    $formInfo = app($this->flowFormTypeRepository)->getDetail($formId);
                    $printModel = $formInfo["print_model"];
                    // 插入原始表单
                    $flowFormTemplateData = [
                        "flow_id" => $flowId,
                        "template_type" => $templateTpye,
                        "print_model" => $printModel,
                    ];
                    return app($this->flowFormTemplateRepository)->insertData($flowFormTemplateData);
                }
            }
        }
    }
    /*
     * 【定义流程】 【表单模板】 保存定义流程的各种表单模板--废弃
     *
     */
    public function saveFlowNodeTemplate($param)
    {
        // 更新模板表数据
        app($this->flowFormTemplateRepository)->updateData(["print_model" => $param["print_model"]], ['template_id' => [$param["template_id"]]]);
        // 更新模板控件结构表
        app($this->flowRunService)->disposeFlowFormTemplateControlStructure($param);
        return "1";
    }

    /*
     * 【定义流程】 【表单模板】 定义流程，获取各种表单模板规则的列表
     * 取模板规则list的参数： node_id,flow_id,template_type
     * 取打印、归档模板参数： flow_id,template_type
     *
     */
    public function getFlowTemplateRuleList($param)
    {
        $templateTpye = isset($param["template_type"]) ? $param["template_type"] : "";
        $flowId = isset($param["flow_id"]) ? $param["flow_id"] : "";
        // 排除其他规则的标识，传1的时候表示排除，查运行模板才会传这个
        $excludeOtherRule = isset($param["excludeOtherRule"]) ? $param["excludeOtherRule"] : "";
        $templateRuleList = [];
        if ($templateTpye == "run") {
            // 流程运行模板
            if (!isset($param["node_id"])) {
                return [];
            }
            $nodeId = $param["node_id"];
            $getParam = [
                "returntype" => "object",
                "search" => ["node_id" => [$nodeId], "template_type" => [$templateTpye]],
            ];
            if ($excludeOtherRule == "1") {
                $getParam["search"]["other_rule_flag"] = "1";
            }
            $templateRuleList = app($this->flowFormTemplateRuleRepository)->getFlowFormTemplateRule($getParam);
        } else if ($templateTpye == "print" || $templateTpye == "filing") {
            // 流程运行模板
            if (!isset($param["flow_id"])) {
                return [];
            }
            $getParam = [
                "returntype" => "object",
                "search" => ["flow_id" => [$flowId], "template_type" => [$templateTpye]],
            ];
            $templateRuleList = app($this->flowFormTemplateRuleRepository)->getFlowFormTemplateRule($getParam);
        }
        // 加工返回
        if (!empty($templateRuleList)) {
            foreach ($templateRuleList as $key => $value) {
                $userId = ($value->ruleListHasManyUser && $value->ruleListHasManyUser->count()) ? $value->ruleListHasManyUser->pluck("user_id")->toArray() : [];
                // $value->user_id = (isset($value->rule_user) && $value->rule_user == "all") ? "all" : $userId;
                $roleId = ($value->ruleListHasManyRole && $value->ruleListHasManyRole->count()) ? $value->ruleListHasManyRole->pluck("role_id")->toArray() : [];
                // $value->role_id = (isset($value->rule_role) && $value->rule_role == "all") ? "all" : $roleId;
                $deptId = ($value->ruleListHasManyDept && $value->ruleListHasManyDept->count()) ? $value->ruleListHasManyDept->pluck("dept_id")->toArray() : [];
                // $value->dept_id = (isset($value->rule_dept) && $value->rule_dept == "all") ? "all" : $deptId;
                if (!empty($userId)) {
                    $all_quit_user_list = app($this->flowWorkHandOverService)->getAllOutUserList();
                    foreach ($all_quit_user_list as $v) {
                        if (in_array($v['user_id'], $userId)) {
                            $userId = array_values(array_diff($userId, [$v['user_id']]));
                        }
                    }
                }
                $value->userScope = [
                    "user_id" => $userId,
                    "role_id" => $roleId,
                    "dept_id" => $deptId,
                ];
            }
        }

        // 获取打印模板列表
        if (($templateTpye == "print") && $templateRuleList && isset($param['limit']) && isset($param['rule_id'])) {
            $ruleIdArr = explode(',', $param['rule_id']);
            $templateRuleListArr = $templateRuleList->toArray();

            // 获取表单及子表单ID和名称
            $formBasicInfo = app($this->flowFormService)->getChildFormListByFlowId($flowId, ['no_pre_main_title' => 1]);
            $formBasicInfoList = $formBasicInfo['list'];

            $tmpArr = [];
            // 筛选出要返回的模板规则
            foreach ($templateRuleList as $value) {
                $tmpVal = is_object($value) ? json_decode(json_encode($value), true) : $value;
                if (in_array($tmpVal['rule_id'], $ruleIdArr)) {

                    // 补充表单名称
                    foreach ($formBasicInfoList as $formValue) {
                        if ($formValue['form_id'] == $tmpVal['template_id']) {
                            $tmpVal['template_name'] = $formValue['form_name'];
                            break;
                        }
                    }

                    $tmpArr[] = $tmpVal;
                }
            }

            $arrayChunked = array_chunk($tmpArr, $param['limit']);
            return ['total' => count($tmpArr), 'list' => isset($arrayChunked[$param['page'] - 1]) ? $arrayChunked[$param['page'] - 1] : array_pop($arrayChunked)]; // 切换每页显示数量的时候最后一页可能没有数据
        }

        return $templateRuleList;
    }

    /**
     * 根据模板规则详情，获取模板规则关联的流程子表单详情
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getFlowFormTemplateRuleInfo($param)
    {
        $ruleId = isset($param["rule_id"]) ? $param["rule_id"] : "";
        $templateInfo = [
            "html" => "",
            "structure" => "",
        ];
        if ($ruleId) {
            $ruleInfo = app($this->flowFormTemplateRuleRepository)->getDetail($ruleId , false , ['template_id' , 'flow_id']);
            // 子表单id
            $templateId = (isset($ruleInfo["template_id"]) && $ruleInfo["template_id"]) ? $ruleInfo["template_id"] : "";
            if ($templateId) {
                if ($templateId > 0) {
                    // 取html
                    $templateInfo["html"] = app($this->flowChildFormTypeRepository)->getDetail($templateId);
                    // 取结构
                    $templateInfo["structure"] = app($this->flowChildFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$templateId]]]);
                } else {
                    $flowId = (isset($ruleInfo["flow_id"]) && $ruleInfo["flow_id"]) ? $ruleInfo["flow_id"] : "";
                    if ($flowId) {
                        $flowTypeInfo = app($this->flowTypeRepository)->getDetail($flowId);
                        $formId = $flowTypeInfo->form_id;
                        if ($formId) {
                            $templateInfo["html"] = app($this->flowFormTypeRepository)->getDetail($formId);
                            $templateInfo["structure"] = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search' => ["form_id" => [$formId]]]);
                        }
                    }
                }
            }
        }
        return $templateInfo;
    }
    /*
     * 【定义流程】 【表单模板】 定义流程，保存各种表单模板规则
     *
     */
    public function saveFlowTemplateRule($param, $own = [], $from = "")
    {
        if (isset($param["pageFrom"]) && $param["pageFrom"] == "batchNode") {
            $batchNode = isset($param["batchNode"]) ? $param["batchNode"] : [];
            if (empty($batchNode)) {
                // 保存失败，未获取到流程节点ID
                return ['code' => ['0x030155', 'flow']];
            } else {
                unset($param["pageFrom"]);
                unset($param["batchNode"]);
                $saveResult = "";
                foreach ($batchNode as $key => $nodeId) {
                    $param["node_id"] = $nodeId;
                    $saveResult = $this->saveFlowTemplateRule($param, $own, "batchNode");
                }
                return $saveResult;
            }
        }
        if ($from == "batchNode") {
            $nodeId = isset($param["node_id"]) ? $param["node_id"] : "";
        }
        $list = (isset($param["common"]) && !empty($param["common"])) ? $param["common"] : [];
        if (!empty($param["other"])) {
            array_push($list, $param["other"][0]);
        }
        if (!empty($list)) {
            foreach ($list as $key => $value) {
                // 判断流程编辑权限
                if (isset($value['flow_id']) && !app($this->flowPermissionService)->verifyFlowSettingPermission($value['flow_id'], $own)) {
                    return ['code' => ['0x000006', 'common']];
                }
                if ($from == "batchNode") {
                    $value["node_id"] = $nodeId;
                }
                $paramDeptId = "";
                $paramRoleId = "";
                $paramUserId = "";
                if (isset($value["userScope"]) && count($value["userScope"])) {
                    $paramDeptId = isset($value["userScope"]["dept_id"]) ? $value["userScope"]["dept_id"] : [];
                    $paramRoleId = isset($value["userScope"]["role_id"]) ? $value["userScope"]["role_id"] : [];
                    $paramUserId = isset($value["userScope"]["user_id"]) ? $value["userScope"]["user_id"] : [];
                }
                $ruleId = "";
                if (isset($value["rule_id"]) && $value["rule_id"]) {
                    // 编辑
                    $ruleId = $value["rule_id"];
                    // 如果是自定义模板规则，保存order
                    if (isset($value["other_rule_flag"]) && $value["other_rule_flag"] == 1) {
                        app($this->flowFormTemplateRuleRepository)->updateData(["rule_order" => $key + 1], ["rule_id" => [$ruleId]]);
                    }
                    // 更新template_id
                    $updateRuleInfo = [
                        "template_id" => $value["template_id"],
                        "rule_department" => ($paramDeptId && $paramDeptId == 'all') ? 'all' : "",
                        "rule_role" => ($paramRoleId && $paramRoleId == 'all') ? 'all' : "",
                        "rule_user" => ($paramUserId && $paramUserId == 'all') ? 'all' : "",
                        "other_person_template_toggle" => $value["other_person_template_toggle"],
                    ];
                    app($this->flowFormTemplateRuleRepository)->updateData($updateRuleInfo, ["rule_id" => [$ruleId]]);
                } else {
                    $otherRuleRepeatFlag = false;
                    $otherRuleRepeatRuleId = "";
                    // 判断重复
                    if (isset($value["other_rule_flag"]) && $value["other_rule_flag"] == "2") {
                        $getParam = [
                            "returntype" => "array",
                            "search" => ["flow_id" => [$value["flow_id"]], "template_type" => [$value["template_type"]], "other_rule_flag" => [$value["other_rule_flag"]]],
                        ];
                        if ($value["node_id"] > 0) {
                            $getParam["search"]["node_id"] = [$value["node_id"]];
                        }
                        $templateRuleList = app($this->flowFormTemplateRuleRepository)->getFlowFormTemplateRule($getParam);
                        if (!empty($templateRuleList)) {
                            $otherRuleRepeatFlag = true;
                            $otherRuleRepeatRuleId = (isset($templateRuleList[0]) && isset($templateRuleList[0]["rule_id"])) ? $templateRuleList[0]["rule_id"] : "";
                        }
                    }
                    if ($otherRuleRepeatFlag === false) {
                        // 插入
                        $ruleInfo = [
                            "node_id" => $value["node_id"],
                            "flow_id" => $value["flow_id"],
                            "template_id" => $value["template_id"],
                            "template_type" => $value["template_type"],
                            "other_rule_flag" => $value["other_rule_flag"] ?? 1,
                            "other_person_template_toggle" => isset($value["other_person_template_toggle"]) ? $value["other_person_template_toggle"] : 0,
                            "rule_order" => $key + 1,
                            "rule_department" => ($paramDeptId && $paramDeptId == 'all') ? 'all' : "",
                            "rule_role" => ($paramRoleId && $paramRoleId == 'all') ? 'all' : "",
                            "rule_user" => ($paramUserId && $paramUserId == 'all') ? 'all' : "",
                        ];
                        $ruleObject = app($this->flowFormTemplateRuleRepository)->insertData($ruleInfo);
                        $ruleId = $ruleObject->rule_id;
                    } else {
                        // 更新 other_person_template_toggle
                        if ($otherRuleRepeatRuleId) {
                            $updateOtherRuleRepeatInfo = [
                                "other_person_template_toggle" => isset($value["other_person_template_toggle"]) ? $value["other_person_template_toggle"] : 0,
                            ];
                            app($this->flowFormTemplateRuleRepository)->updateData($updateOtherRuleRepeatInfo, ["rule_id" => [$otherRuleRepeatRuleId]]);
                        }
                    }
                }
                if ($ruleId) {
                    // 更新 user role dept
                    $where = ['rule_id' => [$ruleId]];
                    app($this->flowFormTemplateRuleUserRepository)->deleteByWhere($where);
                    app($this->flowFormTemplateRuleRoleRepository)->deleteByWhere($where);
                    app($this->flowFormTemplateRuleDepartmentRepository)->deleteByWhere($where);
                    $userId = ($paramUserId && $paramUserId != "all") ? $paramUserId : [];
                    $roleId = ($paramRoleId && $paramRoleId != "all") ? $paramRoleId : [];
                    $deptId = ($paramDeptId && $paramDeptId != "all") ? $paramDeptId : [];
                    if (!empty($userId)) {
                        $userData = [];
                        foreach (array_filter($userId) as $v) {
                            $userData[] = ['rule_id' => $ruleId, 'user_id' => $v];
                        }
                        app($this->flowFormTemplateRuleUserRepository)->insertMultipleData($userData);
                    }
                    if (!empty($roleId)) {
                        $roleData = [];
                        foreach (array_filter($roleId) as $v) {
                            $roleData[] = ['rule_id' => $ruleId, 'role_id' => $v];
                        }
                        app($this->flowFormTemplateRuleRoleRepository)->insertMultipleData($roleData);
                    }
                    if (!empty($deptId)) {
                        $deptData = [];
                        foreach (array_filter($deptId) as $v) {
                            $deptData[] = ['rule_id' => $ruleId, 'dept_id' => $v];
                        }
                        app($this->flowFormTemplateRuleDepartmentRepository)->insertMultipleData($deptData);
                    }
                }
            }
        }
        // 删除记录下来的规则行
        if (isset($param["deleted_rule"]) && !empty($param["deleted_rule"])) {
            $deletedRuleId = $param["deleted_rule"];
            $where = ['rule_id' => [$deletedRuleId, 'in']];
            app($this->flowFormTemplateRuleRepository)->deleteByWhere($where);
            app($this->flowFormTemplateRuleUserRepository)->deleteByWhere($where);
            app($this->flowFormTemplateRuleRoleRepository)->deleteByWhere($where);
            app($this->flowFormTemplateRuleDepartmentRepository)->deleteByWhere($where);
        }
        return "1";
    }
    /*
     * 【定义流程】 【表单模板】 获取流程表单模板的list，用在设置表单模板规则的时候，选择表单模板
     *
     */
    public function getFlowTemplateList($param)
    {
        $param = $this->parseParams($param);
        // 假数据，要改！！！
        $param["page"] = "0";
        $param["returntype"] = "array";
        return app($this->flowFormTypeRepository)->getFlowForm($param);
    }
    /*
     * 【定义流程】 获取流程所有节点设置办理人列表
     *
     */
    public function getFlowHandleUserList($flowId, $own = [])
    {
        if (empty($flowId)) {
            return ['code' => ['0x000003', 'common']];
        }
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        //节点办理人
        $processResult = app($this->flowProcessUserRepository)->getFlowHandleUserList($flowId);
        //流程节点抄送人员
        $copyResult = app($this->flowProcessCopyUserRepository)->getFlowHandleUserList($flowId);
        //流程节点默认办理人
        $defaultResult = app($this->flowProcessDefaultUserRepository)->getFlowHandleUserList($flowId);
        //流程默认主办人
        $defaultManageResult = app($this->flowProcessRepository)->getFlowHandleUserList($flowId);

        //流程监控人员
        $manageuserResult = app($this->flowTypeManageUserRepository)->getFlowHandleUserList($flowId);
        $nodeDefineResult = array_merge($processResult, $copyResult, $defaultResult, $defaultManageResult);

        $resultInfo = [];
        foreach ($nodeDefineResult as $key => $value) {
            if (!isset($resultInfo[$value['user_id']])) {
                $resultInfo[$value['user_id']] = $value;
                $resultInfo[$value['user_id']]['node_id'] = [$value['node_id']];

            } else {
                if (!in_array($value['node_id'], $resultInfo[$value['user_id']]['node_id'])) {
                    array_push($resultInfo[$value['user_id']]['node_id'], $value['node_id']);
                }
            }
            $resultInfo[$value['user_id']]['node_count'] = count($resultInfo[$value['user_id']]['node_id']);
        }
        $resultInfo = array_values($resultInfo);

        $result = array_merge($manageuserResult, $resultInfo);
        $list = [];
        foreach ($result as $key => $value) {
            if (!isset($list[$value['user_id']])) {
                $list[$value['user_id']] = $value;
            } else {
                if (isset($value['count_manage_user'])) {
                    $list[$value['user_id']]['count_manage_user'] = $value['count_manage_user'];
                }
                if (isset($value['node_count'])) {
                    $list[$value['user_id']]['node_count'] = $value['node_count'];
                }
            }
        }
        // 自由节点预设人员以及自由节点步骤中的主办人
        $freeProcessSetUser = app($this->flowProcessFreeStepRepository)->getFreeProcessUser(['flow_id' => $flowId]);
        $freePresetUser = app($this->flowProcessFreePresetRepository)->getFreeProcessUser(['flow_id' => $flowId]);
        $freeUserInfo = array_merge($freeProcessSetUser, $freePresetUser);
        foreach ($freeUserInfo as $freeUser) {
            if (!isset($list[$freeUser['user_id']])) {
                $list[$freeUser['user_id']] = $freeUser;
                $list[$freeUser['user_id']]['node_array'][] = $freeUser['node_id'];
                $list[$freeUser['user_id']]['node_count'] = $list[$freeUser['user_id']]['node_count'] ?? 0;
                $list[$freeUser['user_id']]['node_count'] ++;
            } else {
                if (!isset($list[$freeUser['user_id']]['node_array'])) {
                    $list[$freeUser['user_id']]['node_array'] = [];
                }
                if (!in_array($freeUser['node_id'],$list[$freeUser['user_id']]['node_array'])) {
                    $list[$freeUser['user_id']]['node_array'][] = $freeUser['node_id'];
                    $list[$freeUser['user_id']]['node_count'] = $list[$freeUser['user_id']]['node_count'] ?? 0;
                    $list[$freeUser['user_id']]['node_count'] ++;
                }
            }
            $list[$freeUser['user_id']]['free_process_count'] = count($list[$freeUser['user_id']]['node_array']);
        }
        return array_values($list);
    }

    /*
     * 【定义流程】 获取流程所有节点设置办理角色列表
     *
     */
    public function getFlowHandleRoleList($flowId, $own = [])
    {
        if (empty($flowId)) {
            return ['code' => ['0x000003', 'common']];
        }
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        //流程设置角色
        $processResult = app($this->flowProcessRoleRepository)->getFlowHandleRoleList($flowId);
        //流程节点抄送角色
        $copyResult = app($this->flowProcessCopyRoleRepository)->getFlowHandleRoleList($flowId);
        //流程监控角色
        $manageResult = app($this->flowTypeManageRoleRepository)->getFlowHandleRoleList($flowId);
        $nodeDefineResult = array_merge($processResult, $copyResult, $manageResult);
        $resultInfo = [];
        foreach ($nodeDefineResult as $key => $value) {
            if (!isset($resultInfo[$value['role_id']])) {
                $resultInfo[$value['role_id']] = $value;
                $resultInfo[$value['role_id']]['node_id'] = isset($value['node_id']) ? [$value['node_id']] : [];
                $resultInfo[$value['role_id']]['flow_id'] = isset($value['flow_id'])? [$value['flow_id']] : [];

            } else {
                if ((!isset($value['flow_id']) || empty($value['flow_id']) ) && !in_array($value['node_id'], $resultInfo[$value['role_id']]['node_id'])) {
                    array_push($resultInfo[$value['role_id']]['node_id'], $value['node_id']);
                }
                if ((isset($value['flow_id']) && !empty($value['flow_id']) ) && !in_array($value['flow_id'], $resultInfo[$value['role_id']]['flow_id'])) {
                    array_push($resultInfo[$value['role_id']]['flow_id'], $value['flow_id']);
                }
            }
            $resultInfo[$value['role_id']]['node_count'] = count($resultInfo[$value['role_id']]['node_id']);
            $resultInfo[$value['role_id']]['flow_count'] = count($resultInfo[$value['role_id']]['flow_id']);
        }
        $resultInfo = array_values($resultInfo);
        return array_values($resultInfo);
    }

    /*
     * 【定义流程】 获取流程所有节点设置办理部门列表
     *
     */
    public function getFlowHandleDeptList($flowId, $own = [])
    {
        if (empty($flowId)) {
            return ['code' => ['0x000003', 'common']];
        }
        // 判断流程编辑权限
        if (!app($this->flowPermissionService)->verifyFlowSettingPermission($flowId, $own)) {
            return ['code' => ['0x000006', 'common']];
        }
        //流程设置部门
        $processResult = app($this->flowProcessDepartmentRepository)->getFlowHandleDeptList($flowId);
        //流程节点抄送部门
        $copyResult = app($this->flowProcessCopyDepartmentRepository)->getFlowHandleDeptList($flowId);

        $nodeDefineResult = array_merge($processResult, $copyResult);
        $resultInfo = [];
        foreach ($nodeDefineResult as $key => $value) {
            if (!isset($resultInfo[$value['dept_id']])) {
                $resultInfo[$value['dept_id']] = $value;
                $resultInfo[$value['dept_id']]['node_id'] = [$value['node_id']];

            } else {
                if (!in_array($value['node_id'], $resultInfo[$value['dept_id']]['node_id'])) {
                    array_push($resultInfo[$value['dept_id']]['node_id'], $value['node_id']);
                }
            }
            $resultInfo[$value['dept_id']]['node_count'] = count($resultInfo[$value['dept_id']]['node_id']);
        }
        $resultInfo = array_values($resultInfo);
        return array_values($resultInfo);
    }

    /**
     * 【流程表单】 表单--下拉框动态数据源--获取流程经办人列表
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getSelectSourceProcessUserList($param)
    {
        $flowId = isset($param["flowId"]) ? $param["flowId"] : "";
        $runId = isset($param["runId"]) ? $param["runId"] : "";
        $userName = [];
        if ($flowId) {
            $flowProcessData = [
                "flow_id" => $flowId,
            ];
            if ($flowProcessInfoObject = app($this->flowProcessRepository)->getFlowProcessList($flowProcessData)) {
                if ($flowProcessInfoObject->count()) {
                    $userScope = [];
                    // 循环所有节点
                    foreach ($flowProcessInfoObject as $key => $value) {
                        // 旧处理方式，只处理了user
                        // if ($value->process_user == "ALL") {
                        //     $userScope = "ALL";
                        //     break;
                        // } else {
                        //     if ($value->flowProcessHasManyUser->count()) {
                        //         $userScope = array_unique(array_merge($userScope, $value->flowProcessHasManyUser->pluck("user_id")->toArray()));
                        //     }
                        // }

                        // 新处理方式，用固定套路获取某节点的所有范围内办理人
                        // 这函数，智能获值的时候的返回值改掉了，返回信息里有message，注意--20171017
                        $nodeId = isset($value->node_id) ? $value->node_id : "";
                        $userInfo = app($this->flowRunService)->autoGetProcessUser(["flow_id" => $flowId, "process_id" => $nodeId, "run_id" => $runId], $value);
                        if (isset($userInfo["autoGetUserInfo"])) {
                            $userInfo = $userInfo["autoGetUserInfo"];
                        }
                        // 人员范围
                        $scopeUserCountFlag = "";
                        if ($userInfo == "ALL") {
                            $userScope = "ALL";
                            break;
                        } else {
                            $scopeUserCountFlag = count($userInfo);
                            if ($scopeUserCountFlag) {
                                $userScope = array_unique(array_merge($userScope, $userInfo->pluck("user_id")->toArray()));
                            }
                        }
                    }
                    // 获取符合范围的人员
                    $getUserParam = [
                        "fields" => ["user_id", "user_name"],
                        "page" => "0",
                        "returntype" => "object",
                        "getDataType" => "",
                    ];
                    if ($userScope == "ALL") {
                    } else {
                        if (count($userScope)) {
                            $getUserParam["search"] = [
                                "user_id" => $userScope,
                            ];
                        }
                    }
                    $userInfo = app($this->userRepository)->getConformScopeUserList($getUserParam);
                    // $userName = $userInfo->pluck("user_name")->toArray();
                    return $userInfo;
                }
            }
        }
        return $userName;
    }

    /**
     * 【流程表单】 表单--下拉框动态数据源--获取流程本步骤经办人列表
     * @param  [type] $param [description]
     * @return [type]        [description]
     */
    public function getSelectSourceCurrentProcessUserList($param)
    {
        $nodeId = isset($param["nodeId"]) ? $param["nodeId"] : "";
        $flowId = isset($param["flowId"]) ? $param["flowId"] : "";
        $runId = isset($param["runId"]) ? $param["runId"] : "";
        $userName = [];
        if ($nodeId) {
            if ($nodeInfo = app($this->flowRunService)->getFlowNodeDetail($nodeId)) {
                $userScope = [];
                // 旧的处理方式
                // if ($nodeInfo->process_user == "ALL") {
                //     $userScope = "ALL";
                // } else {
                //     if ($nodeInfo->flowProcessHasManyUser->count()) {
                //         $userScope = $nodeInfo->flowProcessHasManyUser->pluck("user_id")->toArray();
                //     }
                // }
                // 新处理方式，用固定套路获取某节点的所有范围内办理人
                // 这函数，智能获值的时候的返回值改掉了，返回信息里有message，注意--20171017
                $userInfo = app($this->flowRunService)->autoGetProcessUser(["flow_id" => $flowId, "process_id" => $nodeId, "run_id" => $runId], $nodeInfo);
                if (isset($userInfo["autoGetUserInfo"])) {
                    $userInfo = $userInfo["autoGetUserInfo"];
                }
                // 人员范围
                $scopeUserCountFlag = "";
                if ($userInfo == "ALL") {
                    $userScope = "ALL";
                } else {
                    $scopeUserCountFlag = count($userInfo);
                    if ($scopeUserCountFlag) {
                        $userScope = $userInfo->pluck("user_id")->toArray();
                    }
                }
                // 获取符合范围的人员
                $getUserParam = [
                    "fields" => ["user_id", "user_name"],
                    "page" => "0",
                    "returntype" => "object",
                    "getDataType" => "",
                ];
                if ($userScope == "ALL") {
                } else {
                    if (count($userScope)) {
                        $getUserParam["search"] = [
                            "user_id" => $userScope,
                        ];
                    }
                }
                $userInfo = app($this->userRepository)->getConformScopeUserList($getUserParam);
                // $userName = $userInfo->pluck("user_name")->toArray();
                return $userInfo;
            }
        }
        return $userName;
    }


    /**
     * 获取自由流程必填设置
     *
	 */
    public function getFreeFlowRequired($flowId, $type = '')
    {
        if (empty($flowId)) {
            return [];
        }
        $result = [];
        //获取流程信息
        if ($defineFlowInfo = app($this->flowTypeRepository)->getDetail($flowId, false, ['form_id'])) {
            $formId = $defineFlowInfo->form_id;
            //获取表单结构
            $formControlStructure = app($this->flowFormService)->getParseForm($formId);
            //获取必填设置
            $requiredInfo = app($this->flowRequiredForFreeFlowRepository)->getList($flowId);
            if ($requiredInfo) {
                $requiredInfo = $requiredInfo->pluck('control_id')->toArray();
            } else {
                $requiredInfo = [];
            }
            if (!isset($result['feedback'])) {
                $result['feedback'] = [
                    'title' => trans("flow.0x030096"), // 签办反馈
                    'control_id' => 'feedback',
                    'required' => false,
                ];
            }
            if (!isset($result['attachment'])) {
                $result['attachment'] = [
                    'title' => trans("flow.0x030095"), // 相关附件
                    'control_id' => 'attachment',
                    'required' => false,
                ];
            }
            // if(!isset($result['document'])) {
            //     $result['document']= [
            //         'title' => '相关文档',
            //         'control_id' => 'document',
            //         'required' => false
            //     ];
            // }
            if (in_array('feedback', $requiredInfo)) {
                $result['feedback']['required'] = true;
            }
            if (in_array('attachment', $requiredInfo)) {
                $result['attachment']['required'] = true;
            }
            // if(in_array('document',$requiredInfo)) {
            //     $result['document']['required'] = true;
            // }
            foreach ($formControlStructure as $key => $value) {
                $controlAttribute = isset($value['control_attribute']) ? $value['control_attribute'] : [];
                $dataEfbHide = isset($controlAttribute['data-efb-hide']) ? $controlAttribute['data-efb-hide'] : "";
                if ($value['control_type'] != 'dynamic-info' && $value['control_type'] != 'barcode' && $dataEfbHide != "true") {
                    $result[$value['control_id']] = [
                        'title' => $value['control_title'],
                        'control_id' => $value['control_id'],
                        'required' => false,
                    ];
                    if (in_array($value['control_id'], $requiredInfo)) {
                        $result[$value['control_id']]['required'] = true;
                    }
                }
            }
        }
        if ($type && $type == 'info') {
            return $requiredInfo;
        }
        return $result;

    }


    /**
     * 编辑自由流程必填设置
     */
    public function editFreeFlowRequired($flowId, $data, $own = [])
    {
        if (empty($flowId)) {
            return ['code' => ['0x000003', 'common']];
        }
        if (!empty($data)) {
            // 历史数据
            $historyInfo = $this->getFreeFlowRequired($flowId);
            app($this->flowRequiredForFreeFlowRepository)->deleteByWhere(['flow_id' => [$flowId]]);
            foreach ($data as $value) {
                $insertData = [];
                if ($value['required'] == true) {
                    $insertData = ['flow_id' => $flowId, 'control_id' => $value['control_id']];
                    app($this->flowRequiredForFreeFlowRepository)->insertData($insertData);
                }
            }
            // 调用日志函数
            $logParam = [];
            $logParam["new_info"] = $this->getFreeFlowRequired($flowId);
            $logParam["history_info"] = $historyInfo;
            app($this->flowLogService)->logFlowDefinedModify($logParam, "flow_others&flow_id", $flowId, "editOtherRequired", $own, "flow");
        }
        return true;
    }

    /**
     * 获取流程名称规则设置元素列表
     */
    public function getFlowNameRulesField($formId)
    {
        $result = [
            // [
            //     'control_id'=>'increase',
            //     'control_title'=>'递增数字',
            //     'control_type'=>'increase',
            //     'attribute'=>[
            //         'start'=>0,//自增起始值
            //         'length'=>4,//自增数字长度
            //         'completion'=>true,//是否补全 0000 和0的区别
            //         'reset'=>false,//是否根据某个字段值重置自增数字
            //         'resetby'=>''//自增依据 其他控件id
            //     ]
            // ],
            [
                'control_id' => 'date',
                'control_title' => trans('flow.datetime'),
                'control_type' => 'date',
                'format' => 'Y-m-d H:i:s',
            ],
            [
                'control_id'=>'flowSortName',
                'control_title'=> trans('flow.flow_type_name'),
                'control_type'=>'flowInfo',
            ],
            [
                'control_id' => 'flowDefineName',
                'control_title' => trans('flow.flow_define_name'),
                'control_type' => 'flowInfo',
            ],
            [
                'control_id' => 'flowDefineId',
                'control_title' => trans('flow.flow_id'),
                'control_type' => 'flowInfo',
            ],
            [
                'control_id' => 'formName',
                'control_title' => trans('flow.form_name'),
                'control_type' => 'flowInfo',
            ],
            [
                'control_id' => 'formId',
                'control_title' => trans('flow.form_id'),
                'control_type' => 'flowInfo',
            ],
            [
                'control_id' => 'flowCreator',
                'control_title' => trans('flow.flow_creator'),
                'control_type' => 'flowInfo',
            ],
            [
                'control_id' => 'flowCreateTime',
                'control_title' => trans('flow.flow_create_time'),
                'control_type' => 'flowInfo',
            ]
        ];

        //获取流程表单控件
        if (!$formId) {
            return $result;
        }
        $serach = [
            'fields' => ['control_id', 'control_title', 'control_type', 'control_attribute'],
            'search' => [
                "form_id" => [$formId],
                'control_parent_id' => [''],
                'control_type' => [
                    // 暂先排除明细、签名图片、会签、附件、编辑器、复选框、水平垂直布局、电子签章、描述控件
                    ['detail-layout', 'signature-picture', 'countersign', 'upload', 'editor', 'checkbox', 'dynamic-info', 'horizontal-layout', 'vertical-layout', 'electronic-signature', 'label', 'barcode'],
                    'not_in',
                ],
            ],
        ];
        $formControlTypeArray = array_reverse(app($this->flowFormControlStructureRepository)->getFlowFormControlStructure($serach));
        $flowFormControl = [];
        foreach ($formControlTypeArray as $key => $value) {
            if (isset($value['control_attribute']) && !empty($value['control_attribute'])) {
                $controlAttribute = json_decode($value['control_attribute'], true);
                if ($value['control_type'] == 'text') {
                    // 排除当前数据当前流水号
                    if (isset($controlAttribute['data-efb-source']) && isset($controlAttribute['data-efb-source-value'])) {
                        if ($controlAttribute['data-efb-source'] == 'currentData' && $controlAttribute['data-efb-source-value'] == 'flow_serialNumber') {
                            continue;
                        }
                    }
                }
                // 排除隐藏控件
                // if (isset($controlAttribute['data-efb-hide']) && $controlAttribute['data-efb-hide'] == 'true') {
                //     continue;
                // }
            }

            $flowFormControl['control_id'] = $value['control_id'];
            $flowFormControl['control_title'] = $value['control_title'];
            $flowFormControl['control_type'] = 'formData';
            array_push($result, $flowFormControl);
        }
        return array_reverse($result);
    }

    /**
     * 【流程表单】 表单简易版标准版切换
     */
    public function formTypeConversion($param)
    {
        foreach ($param as $data) {
            if (!isset($data['form_id']) || empty($data['form_id'])) {
                continue;
            }
            $updateData = [];
            if (isset($data['print_model']) && !empty($data['print_model'])) {
                $updateData['print_model'] = $data['print_model'];
            } else {
                $updateData['print_model'] = '';
            }
            if (isset($data['form_type']) && !empty($data['form_type'])) {
                $updateData['form_type'] = $data['form_type'];
            }
            if ($data['is_child'] == 1) {
                app($this->flowChildFormTypeRepository)->updateData($updateData, ['form_id' => $data['form_id']]);
            } else {
                app($this->flowFormTypeRepository)->updateData($updateData, ['form_id' => $data['form_id']]);
            }
        }
        return true;
    }

    /**
     * 【流程表单】 标准版转换为极速版 按照标准版表单控件控件保存方法（flow_form_control_structrue表），子表单获取flow_child_form_control_structrue表
     */
    public function formTypeConversionGetControl($formId)
    {
        if (empty($formId)) {
            return ['code' => ['0x000003', 'common']];
        }
        //获取子表单id
        $childIds = app($this->flowChildFormTypeRepository)->getFlowForm(['search' => ['parent_id' => [$formId]], 'fields' => ['form_id'], 'returntype' => 'object']);
        if ($childIds) {
            $childIds = $childIds->pluck('form_id')->toArray();
        } else {
            $childIds = [];
        }
        //主表单详情
        $controlInfo = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(["search" => ["form_id" => [$formId], 'control_parent_id' => ['']]]);
        $controlInfos = [];
        if ($controlInfo) {
            $controlInfos['form_id'] = $formId;
            $controlInfos['is_child'] = 0;
            $controlInfos['info'] = $controlInfo;
        } else {
            $controlInfos['form_id'] = $formId;
            $controlInfos['is_child'] = 0;
            $controlInfos['info'] = [];
        }
        //子表单列表
        $chidlControlInfos = [];
        if ($childIds) {
            foreach ($childIds as $key => $childFormId) {
                $chidlControlInfo = app($this->flowChildFormControlStructureRepository)->getFlowFormControlStructure(["search" => ["form_id" => [$childFormId], 'control_parent_id' => ['']]]);
                if ($chidlControlInfo) {
                    $chidlControlInfos[$key]['info'] = $chidlControlInfo;
                    $chidlControlInfos[$key]['form_id'] = $childFormId;
                    $chidlControlInfos[$key]['is_child'] = 1;
                } else {
                    $chidlControlInfos[$key]['info'] = [];
                    $chidlControlInfos[$key]['form_id'] = $childFormId;
                    $chidlControlInfos[$key]['is_child'] = 1;
                }
            }
        }
        array_push($chidlControlInfos, $controlInfos);

        return $chidlControlInfos;
    }
    /**
     * 【流程表单】 极速版转换为标准版 按照极速版表单控件控件保存方法（flow_form_type表print_model）获取控件列表
     */
    public function formTypeConversionGetControlForComplex($formId)
    {
        if (empty($formId)) {
            return ['code' => ['0x000003', 'common']];
        }
        $flowFormDetail = app($this->flowFormTypeRepository)->getDetail($formId);
        $flowFormDetail = $flowFormDetail ? $flowFormDetail->toArray() : [];
        $flowChildFormDetail = app($this->flowChildFormTypeRepository)->getFlowForm(['search' => ['parent_id' => [$formId]]]);
        array_push($flowChildFormDetail, $flowFormDetail);
        return $flowChildFormDetail;
    }

    /**
     * 获取表单列表
     *
     */
    public function getFlowFormSortListService($param, $userInfo)
    {
        $param = $this->parseParams($param);
        // 默认是返回给list使用的数据，如果要返回grid使用的数据，要传额外参数。
        if (isset($param["getDataType"]) && $param["getDataType"] == "grid") {
            return $this->response(app($this->flowFormSortRepository), 'getFlowFormSortListTotal', 'getFlowFormSortList', $param);
        } else if (isset($param["getDataType"]) && $param["getDataType"] == "selector") {
            if ($flowObject = app($this->flowFormSortRepository)->getFlowFormSortList($param)) {
                $flowArray = $flowObject->toArray();
                return $flowArray;
            } else {
                return [];
            }
        } else if (isset($param["getDataType"]) && $param["getDataType"] == "power") {
            $unSort = app($this->flowFormTypeRepository)->getFlowFormTotal(['search' => ['form_sort' => [0]]]);
            $unSortArray = [];
            // if (!isset($param['fields']) && $unSort > 0) {
                $unSortArray = [
                    [
                        'unSort' => $unSort,
                        'id' => 0,
                        'title' => trans("flow.unclassified"),
                    ],
                ];
            // }
            //获取有权限的表单分类列表
            $powerList = $this->getPermissionFlowFormSortList($userInfo);
            if ($powerList && count($powerList) > 0) {
                $powerList = $powerList->pluck('id');
                $param['search'] = ['id' => [$powerList, 'in']];
                if ($flowObject = app($this->flowFormSortRepository)->getFlowFormSortList($param)) {
                    $flowArray = $flowObject->toArray();
                    if (isset($param["title"])) {
                        return $flowArray;
                    }
                    return array_merge($unSortArray, $flowArray);
                } else {
                    return $unSortArray;
                }
            } else {
                return $unSortArray;
            }
        } else {
            if ($flowObject = app($this->flowFormSortRepository)->getFlowFormSortList($param)) {
                $flowArray = $flowObject->toArray();
                if (isset($param["title"])) {
                    return $flowArray;
                }
                $unSort = app($this->flowFormTypeRepository)->getFlowFormTotal(['search' => ['form_sort' => [0]]]);
                $unSortArray = [];
                if ($unSort > 0) {
                    $unSortArray = [
                        [
                            'unSort' => $unSort,
                            'id' => 0,
                            'title' => trans("flow.unclassified"),
                        ],
                    ];
                }
                return array_merge($unSortArray, $flowArray);
            } else {
                return [];
            }
        }
    }

    /**
     * 新建表单分类
     *
     */
    public function createFlowFormSort($data)
    {
        $updateData = $data;
        $updateData["noorder"] = isset($data["noorder"]) ? $data["noorder"] : 0;

        $sortData = array_intersect_key($updateData, array_flip(app($this->flowFormSortRepository)->getTableColumns()));
        $flowFormSortObject = app($this->flowFormSortRepository)->insertData($sortData);
        // 清空表单分类信息redis缓存
        if(!empty(Redis::keys('flow_form_type_power_list_*'))) {
            Redis::del(Redis::keys('flow_form_type_power_list_*'));
        }
        $sortId = $flowFormSortObject->id;
        $priv_scope = $flowFormSortObject->priv_scope;
        if (!$priv_scope) {
            $manage_user = isset($data["manage_user"]) ? $data["manage_user"] : "";
            $manage_role = isset($data["manage_role"]) ? $data["manage_role"] : "";
            $manage_dept = isset($data["manage_dept"]) ? $data["manage_dept"] : "";

            // 插入分类权限数据
            if (!empty($manage_user)) {
                $userData = [];
                foreach ($manage_user as $v) {
                    $userData[] = ['type_id' => $sortId, 'user_id' => $v];
                }
                app($this->flowFormSortUserRepository)->insertMultipleData($userData);
            }
            if (!empty($manage_role)) {
                $roleData = [];
                foreach ($manage_role as $v) {
                    $roleData[] = ['type_id' => $sortId, 'role_id' => $v];
                }
                app($this->flowFormSortRoleRepository)->insertMultipleData($roleData);
            }
            if (!empty($manage_dept)) {
                $deptData = [];
                foreach ($manage_dept as $v) {
                    $deptData[] = ['type_id' => $sortId, 'dept_id' => $v];
                }
                app($this->flowFormSortDepartmentRepository)->insertMultipleData($deptData);
            }
        }
        return $sortId;
    }

    /**
     * 编辑表单分类
     *
     */
    public function editFlowFormSort($data, $sortId)
    {
        $updateData = $data;
        $updateData["noorder"] = isset($data["noorder"]) ? $data["noorder"] : 0;

        $sortData = array_intersect_key($updateData, array_flip(app($this->flowFormSortRepository)->getTableColumns()));
        $flowFormSortObject = app($this->flowFormSortRepository)->updateData($sortData, ['id' => $sortId]);
        // 清空表单分类信息redis缓存
        if (!empty(Redis::keys('flow_form_type_power_list_*'))) {
            Redis::del(Redis::keys('flow_form_type_power_list_*'));
        }
        $manage_user = isset($data["manage_user"]) ? $data["manage_user"] : "";
        $manage_role = isset($data["manage_role"]) ? $data["manage_role"] : "";
        $manage_dept = isset($data["manage_dept"]) ? $data["manage_dept"] : "";
        // 清空分类权限数据
        $where = ['type_id' => [$sortId]];
        app($this->flowFormSortUserRepository)->deleteByWhere($where);
        app($this->flowFormSortRoleRepository)->deleteByWhere($where);
        app($this->flowFormSortDepartmentRepository)->deleteByWhere($where);
        if (!$data['priv_scope']) {
            // 插入分类权限数据
            if (!empty($manage_user)) {
                $userData = [];
                foreach ($manage_user as $v) {
                    $userData[] = ['type_id' => $sortId, 'user_id' => $v];
                }
                app($this->flowFormSortUserRepository)->insertMultipleData($userData);
            }
            if (!empty($manage_role)) {
                $roleData = [];
                foreach ($manage_role as $v) {
                    $roleData[] = ['type_id' => $sortId, 'role_id' => $v];
                }
                app($this->flowFormSortRoleRepository)->insertMultipleData($roleData);
            }
            if (!empty($manage_dept)) {
                $deptData = [];
                foreach ($manage_dept as $v) {
                    $deptData[] = ['type_id' => $sortId, 'dept_id' => $v];
                }
                app($this->flowFormSortDepartmentRepository)->insertMultipleData($deptData);
            }
        }

        return $sortId;
    }

    /**
     * 删除表单分类
     */
    public function deleteFlowFormSort($sortIdString)
    {
        foreach (explode(',', trim($sortIdString, ",")) as $key => $sortId) {
            if ($sortDataArray = $this->getFlowFormSortDetail($sortId)) {
                app($this->flowFormSortRepository)->deleteById($sortId);
                // 清空表单分类信息redis缓存
                if (!empty(Redis::keys('flow_form_type_power_list_*'))) {
                    Redis::del(Redis::keys('flow_form_type_power_list_*'));
                }
                //将此分类下的表单归为未分类
                // if (app($this->flowFormTypeRepository)->getFlowFormTotal(['search' => ['form_sort' => [0]]]) > 0) {
                app($this->flowFormTypeRepository)->updateData(['form_sort' => 0], ['form_sort' => $sortId]);
                // }
                // 清空分类权限数据
                $where = ['type_id' => [$sortId]];
                app($this->flowFormSortUserRepository)->deleteByWhere($where);
                app($this->flowFormSortRoleRepository)->deleteByWhere($where);
                app($this->flowFormSortDepartmentRepository)->deleteByWhere($where);
            }
        }
        return "1";
    }

    /**
     * 获取某条表单分类详情
     *
     */
    public function getFlowFormSortDetail($sortId)
    {
        $detail = app($this->flowFormSortRepository)->getFlowFormSortDetail($sortId);

        if ($detail->priv_scope == 0) {
            $userList = $detail->flowFormSortHasManyMnamgeUser->pluck('user_id')->toArray();
            if (!empty($userList)) {
                $all_quit_user_lists = [];
                $all_quit_user_list = app($this->flowWorkHandOverService)->getAllOutUserList();
                foreach ($all_quit_user_list as $key => $value) {
                    if (in_array($value['user_id'], $userList)) {
                        $userList = array_diff($userList, [$value['user_id']]);
                    }

                }
            }
            $detail->manage_user = array_values($userList);
            $detail->manage_role = $detail->flowFormSortHasManyMnamgeRole->pluck('role_id');
            $detail->manage_dept = $detail->flowFormSortHasManyMnamgeDeptarment->pluck('dept_id');
        } else {
            $detail->manage_user = [];
            $detail->manage_role = [];
            $detail->manage_dept = [];
        }
        return $detail;
    }

    /**
     * 获取表单类别最大序号
     *
     */
    public function getMaxFlowFormSort()
    {
        return app($this->flowFormSortRepository)->getMaxFlowFormSort();
    }

    /**
     * 获取流程分类最大排序值
     *
     */
    public function getMaxFlowSort()
    {
        return app($this->flowSortRepository)->getMaxFlowSort();
    }

    /**
     *  获取有权限的流程分类列表
     */
    public function getPermissionFlowFormSortList($param)
    {
        return app($this->flowFormSortRepository)->getPermissionFlowFormSortList($param);
    }

    /**
     *  获取有权限的表单类别列表
     */
    public function getPermissionFlowSortList($param)
    {
        return app($this->flowSortRepository)->getPermissionFlowSortList($param);
    }

    /**
     * 【定义流程】 【节点设置】 获取自由节点详情
     *
     *
     * @param  [type]          $nodeId [description]
     *
     * @return [type]                  [description]
     */
    function getFlowFreeNodeInfo($nodeId)
    {
        $detailInfo = app($this->flowProcessFreeRepository)->getFlowNodeDetail($nodeId);
        if ($detailInfo) {
            $detailInfo = $detailInfo->toArray();
            $detailInfo['free_preset_info'] = [];
            if ($detailInfo['flow_process_free_has_many_preset']) {
                //$editControl = $this->getFreeProcessFieldControl(['node_id' => $nodeId]);
                foreach ($detailInfo['flow_process_free_has_many_preset'] as $key => $value) {
                    // 过滤无效必填字段
                    // if ($editControl && $value['required_control_id']) {
                    //     $required_control_id = explode(',',$value['required_control_id']);
                    //     $_control_id = '';
                    //     foreach ($required_control_id as $_value) {
                    //         if (in_array($_value,$editControl)) {
                    //             $_control_id .= ($_control_id ? ',' : '' ).$_value;
                    //         }
                    //     }
                    //     $value['required_control_id'] = $_control_id;
                    // }else {
                    //     $value['required_control_id'] = '';
                    // }
                    $detailInfo['free_preset_info'][$key]['node_name'] = $value['node_name'];
                    $detailInfo['free_preset_info'][$key]['handle_user'] = $value['handle_user'];
                    $detailInfo['free_preset_info'][$key]['required_control_id'] = $value['required_control_id'];
                    $detailInfo['free_preset_info'][$key]['required_scope_config'] = '';
                }
            }
        }else {
            $detailInfo['back_to_type'] = 1;
            $detailInfo['back_type'] = 1;
            // $detailInfo['can_back'] = 1;
            $detailInfo['can_set_required'] = 1;
            $detailInfo['circular_superior'] = 0;
            $detailInfo['circular_superior_degree'] = 1;
            $detailInfo['circular_superior_dept'] = '';
            $detailInfo['circular_superior_role'] = '';
            $detailInfo['circular_superior_type'] = 1;
            $detailInfo['entrust_get_superior_rule'] = 1;
            $detailInfo['circular_superior_user'] = '';
            $detailInfo['flow_process_free_has_many_preset'] = [];
            $detailInfo['free_preset_info'] = [];
            $detailInfo['preset_id'] = '';
            $detailInfo['preset_process'] = 1;
            $detailInfo['quit_type'] = 1;
            $detailInfo['required_control_id'] = '';
            $detailInfo['run_type'] = 1;
            $detailInfo['set_required_type'] = 1;
        }
        $detailInfo['editField'] = $this->getFreeProcessFieldControl(['node_id' => $nodeId]);
        return $detailInfo;
    }
     /**
     * 【定义流程】 【节点设置】 获取已设置自由节点详情
     *
     * @param  [type]          $nodeId [description]
     *
     * @return [type]                  [description]
     */
    function getFlowFreeNodeRunInfo($nodeId, $runId)
    {
        $detailInfo = app($this->flowProcessFreeStepRepository)->getFreeNodeStepList($runId, $nodeId);
        if ($detailInfo) {
            $detailInfo = $detailInfo->toArray();
            $max_process_id = 0;
            //$editControl = $this->getFreeProcessFieldControl(['node_id' => $nodeId]);
            foreach ($detailInfo as $key => &$value) {
                if ($value['step_id'] >$max_process_id) {
                    $max_process_id = $value['step_id'];
                }
                // 过滤无效必填字段
                // if ($editControl && $value['required_control_id']) {
                //     $required_control_id = explode(',',$value['required_control_id']);

                //     $_control_id = '';
                //     foreach ($required_control_id as $_value) {
                //         if (in_array($_value,$editControl)) {
                //             $_control_id .= ($_control_id ? ',' : '' ).$_value;
                //         }
                //     }
                //     $value['required_control_id'] = $_control_id;
                // }else {
                //     $value['required_control_id'] = '';
                // }
                $value['handle_user'] = $value['user_id'];
                $value['node_name'] = $value['process_name'];
                $value['required_control_id'] = $value['required_control_id'];
                $value['required_scope_config'] = '';
            }
        }else {
            $detailInfo = [];
        }
        return ['list'=> $detailInfo,'max_process_id'=>$max_process_id];
    }

    /**
     * 自由节点设置获取已设置编辑权限的字段列表
     * 自由节点可设置必填字段需在【字段控制设置】中设置的可编辑字段范围之内
     */
    public function getFreeProcessFieldControl($param)
    {
        $nodeId = $param['node_id'] ?? '';
        if (!$nodeId) {
            return [];
        }
        $searchInfo = [
            'node_id' => [$nodeId]
        ];
        $processControl = app($this->flowProcessControlOperationRepository)->getList(['search' => $searchInfo,'searchEdit' => true]);
        $editInfo = [];
        if ($processControl) {
            foreach ($processControl as $value) {
                if (count($value->controlOperationDetail)) {
                    array_push($editInfo, $value->control_id);
                }
            }
        }
        return $editInfo;
    }

    /**
     * 【定义流程】 【节点设置】 编辑自由节点详情
     *
     *
     * @param  [type]          $nodeId [description]
     *
     * @return [type]                  [description]
     */
    function editFlowFreeNode($nodeId, $data)
    {
        if (!$nodeId) {
            return ['code' => ['0x000006', 'common']];
        }
        if (isset($data['circular_superior']) && $data['circular_superior'] == 1) {
            if ($data['circular_superior_type'] == 2) {
                if ($data['circular_superior_degree'] < 1) {
                    return ['code' => ['0x000006', 'common']];
                    // '请设置正确的循环级数'
                }
            }
            if ($data['circular_superior_type'] == 3) {
                if ($data['circular_superior_user'] == '' && $data['circular_superior_role'] == '' && $data['circular_superior_dept'] == '') {
                    return ['code' => ['0x000006', 'common']];
                    // '请设置正确的结束目标'
                }
            }
        }
        if (isset($data['can_set_required']) && $data['can_set_required'] == 2) {
            if ($data['set_required_type'] == 2) {
                if ($data['required_control_id'] == '' || count($data['required_control_id']) == 0) {
                    return ['code' => ['0x000006', 'common']];
                    // '请设置必填字段'
                }
            }
        }
        // if ($data['quit_type'] == 2) {
        //     if ($data['quit_condition'] == '') {
        //         return ['code' => ['0x000006', 'common']];
        //         // '请设置正确的跳出条件'
        //     }
        // }
        if (isset($data['preset_process']) && $data['preset_process'] == 2) {
            if ($data['free_preset_info'] == '' || count($data['free_preset_info']) == 0) {
                return ['code' => ['0x000006', 'common']];
                // '请配置预设节点'
            }
        }

        $freeNodeInfo = [
            'circular_superior' => $data['circular_superior'],
            'circular_superior_type' => $data['circular_superior_type'],
            'entrust_get_superior_rule' => $data['entrust_get_superior_rule'],
            'circular_superior_degree' => $data['circular_superior_degree'],
            'circular_superior_user' => ($data['circular_superior_type'] == 3) ? $data['circular_superior_user'] : '',
            'circular_superior_role' => ($data['circular_superior_type'] == 3) ? $data['circular_superior_role'] : '',
            'circular_superior_dept' => ($data['circular_superior_type'] == 3) ? $data['circular_superior_dept'] : '',
            'quit_type' => $data['quit_type'],
            //'quit_condition' => ($data['quit_type'] == 2) ? $data['quit_condition'] : '',
            //'can_back' => $data['can_back'],
            'back_type' => $data['back_type'],
            'can_set_required' => $data['can_set_required'],
            'back_to_type' => $data['back_to_type'],
            'set_required_type' => $data['set_required_type'],
            'required_control_id' => is_array($data['required_control_id']) ? implode(',' ,$data['required_control_id']) : $data['required_control_id'],
            'run_type' => $data['run_type'],
            'preset_process' => $data['preset_process']
        ];
        if (app($this->flowProcessFreeRepository)->getFlowNodeDetail($nodeId)) {
            $result = app($this->flowProcessFreeRepository)->updateData($freeNodeInfo,['node_id'=>$nodeId]);
        }else {
            $freeNodeInfo['node_id'] = $nodeId;
            $result = app($this->flowProcessFreeRepository)->insertData($freeNodeInfo);
        }

        $setInfo = $this->getFlowFreeNodeInfo($nodeId);
        if ($result && $freeNodeInfo['preset_process'] == 2) {
            app($this->flowProcessFreePresetRepository)->deleteByWhere(['node_id'=>[$nodeId]]);
            // 插入预设节点信息
            foreach ($data['free_preset_info'] as $key => $value) {
                // 不许前段设置必填时，清空必填设置，改为前段不展示 后端不清空
                // if ($setInfo['can_set_required'] == 1) {
                //     $value['required_control_id'] = '';
                // }
                $presetProcessInfo = [
                    'node_id' => $nodeId,
                    'node_name' => $value['node_name'],
                    'handle_user' => $value['handle_user'],
                    'required_control_id' => is_array($value['required_control_id']) ? implode(',' ,$value['required_control_id']) : $value['required_control_id']
                ];
                app($this->flowProcessFreePresetRepository)->insertData($presetProcessInfo);
            }
        } else {
            app($this->flowProcessFreePresetRepository)->deleteByWhere(['node_id'=> [$nodeId]]);
        }
        return $result;
    }

    /*
     * 后端获取流程标题所需各种格式的日期时间数据
     */
    public function getFlowNameRulesDateDatas()
    {
        return [
            // 'Y-m-d H:i:s'
            'format1'=> date('Y-m-d H:i:s'),
            // 'Y/m/d H/i/s'
            'format2'=> date('Y/m/d H/i/s'),
            // 'Y年m月d日'
            'format3'=> date('Y年m月d日'),
            // 'Y-m-d'
            'format4'=> date('Y-m-d'),
            // 'Y/m/d'
            'format5'=> date('Y/m/d'),
            // 'H:i:s'
            'format6'=> date('H:i:s'),
            // 'H/i/s'
            'format7'=> date('H/i/s'),
            // 'Y'
            'format8'=> date('Y'),
            // 'm'
            'format9'=> date('m'),
            // 'd'
            'format10'=> date('d'),
        ];
    }
    /*
     * 定时任务超时提醒及超时处理
     */
    public function urgeRemind()
    {
        ini_set('memory_limit', '800M');
        $timeStamp  = time();
        $time = date('Y-m-d H:i:s' ,$timeStamp);
        //超时处理，如果是固定流程流转到下一节点或下一节点是结束节点直接结束
        $searchParam['whereRaw'] = ["
                        (
                           deliver_time  IS   NULL
                        )
                        AND
                        (limit_date IS NOT NULL AND limit_date <> '0000-00-00 00:00:00' and limit_date<'".$time."')
                        and
                        press_add_hour_turn=1
                        "];

        //按照limit_data进行排序
        $searchParam['order_by']  = ['host_flag'=>'desc' , 'limit_date' => 'asc' ] ;
        $searchParam['fields']    = ['flow_run_process.run_id' ,'limit_date', 'flow_run_process.flow_id','flow_run_process_id' , 'user_id' ,'flow_process','host_flag','process_id' , 'press_add_hour_turn' , 'flow_run_process.free_process_step' ,'flow_serial', 'branch_serial'  , 'origin_process_id' , 'is_back' , 'send_back_process' , 'send_back_user' , 'send_back_free_step'  , 'process_type'] ;
        $searchParam['relationFlowRunInfo']   = 1;
        $searchParam['relationNodeInfo']   = 1;
        $oldoverprocess = app($this->flowRunProcessRepository)->getFlowRunProcessList($searchParam);
        $oldoverprocess = $oldoverprocess->toArray();
        //$overprocess重新组装数据
        $newoverprocess = [];
        foreach ($oldoverprocess as $oldprocessKey => $oldprocessValue) {
            $flow_serial_id = $oldprocessValue['run_id'].'|'.$oldprocessValue['flow_serial']."|".$oldprocessValue['branch_serial'];
            $newoverprocess[$flow_serial_id] = isset($newoverprocess[$flow_serial_id]) ? $newoverprocess[$flow_serial_id]:[];
            array_push($newoverprocess[$flow_serial_id], $oldprocessValue) ;
        }
        unset($oldoverprocess);

        if (!empty($newoverprocess)) {
             foreach ($newoverprocess as $newprocessKey => $newprocessValue) {
                $userMsgArr = [$newprocessValue[0]['user_id']];
                $processValue = $newprocessValue[0];
                $param['flowType'] = $processValue['flow_run_process_belongs_to_flow_type']['flow_type'];
                //查看是否满足不选人直接提交下一节点的条件
                //组装数据
                $param['submitWithoutDialog'] = 1;
                $param['flowSubmitStatus']    = 'host';
                $param['flowProcess']         = $processValue['flow_process'];
                $param['runId']               = $processValue['run_id'];
                $param['currentUser']         = $processValue['user_id'];
                $param['processId']           = $processValue['process_id'];
                $param['flowId']              = $processValue['flow_id'];
                $param['overtime']            = 1;
                // $param['free_process_next_step'] = $processValue['free_process_step'] + 1;
                $param['free_process_step'] = $processValue['free_process_step'];
                $param['handleWay'] = $processValue['flow_run_process_has_one_flow_process']['process_transact_type'];
                $param['submit_type'] = 'turn';
                $needRrequired = $processValue['flow_run_process_has_one_flow_process']['overtime_handle_required'];
                // 判断子流程是否办理完毕，进而判断父流程是否可以流转
                if ($processValue['process_id'] > 1) {
                    $sonFlowEndParam = [
                        "run_id" => $processValue['run_id'],
                        "process_id" => $processValue['process_id']- 1,
                    ];
                    $sonFlowUnfinished = app($this->flowRunService)->getUnfinishedSunflowList($sonFlowEndParam);
                    if (!empty( $sonFlowUnfinished)) {
                        app($this->flowRunProcessRepository)->updateData(["press_add_hour_turn" => 3], ['run_id' => $processValue['run_id'] , 'process_id' => $processValue['process_id'] ]); // 如果父流程此时不可流转，则直接超时无法提交，将press_add_hour_turn更新为3状态
                        continue;
                    }
                }
                $userInfo = $this->getHostUserInfo($param['currentUser']);
                // 查不到user_id 时，中断
                if (!isset($userInfo['user_id']) || empty($userInfo['user_id'])) {
                    app($this->flowRunProcessRepository)->updateData(["press_add_hour_turn" => 3], ['run_id' => $processValue['run_id'] , 'process_id' => $processValue['process_id'] ]);
                    continue;
                }
                // 验证不选人提交
                $verifySubmit = $this->verifySubmitWithoutDialog($param, $userInfo);
                $turnType = 'turn';
                // 如果没有通过。再验证一下是否满足不选人直接提交
                if (!$verifySubmit['turn']['flag']) {
                    // 如果无法提交还需要去判断下是否是退回按原路径提交
                    $flowOthers =  app($this->flowOthersRepository)->entity->where('flow_id' ,  $param['flowId'])->whereNull('deleted_at')->first();
                    // 退回直接按原路提交,不选人时
                    if ($processValue['is_back'] == 1 &&  $flowOthers && $flowOthers->flow_send_back_submit_method == 1 && $flowOthers->alow_select_handle == 0) {
                        $turnType = 'send_back_submit';
                        $verifySubmit['turn']['flag'] = true;
                        $verifySubmit['turn']['submitInfo'] = [];
                        $verifySubmit['turn']['submitInfo']['flowTurnWithoutDialogFlag'] = true;
                        $verifySubmit['turn']['submitInfo']['flow_process'] = $param['flowProcess'];
                        $verifySubmit['turn']['submitInfo']['next_flow_process'] = $processValue['send_back_process'];
                        $verifySubmit['turn']['submitInfo']['process_host_user'] = $processValue['send_back_user'];
                        $verifySubmit['turn']['submitInfo']['free_process_next_step'] = $processValue['send_back_free_step'];
                        $verifySubmit['turn']['submitInfo']['process_id'] = $processValue['process_id'];
                        $verifySubmit['turn']['submitInfo']['run_id'] = $processValue['run_id'];
                        $verifySubmit['turn']['submitInfo']['free_process_step'] = $processValue['free_process_step'];
                        $verifySubmit['turn']['submitInfo']['free_process_current_step'] = $processValue['free_process_step'];
                        $verifySubmit['turn']['submitInfo']['processType'] = $processValue['process_type'];
                    }
                }
                if ($verifySubmit['turn']['flag'] && isset($verifySubmit['turn']['submitInfo'])) {
                        $verifySubmit['turn']['submitInfo']['user_id'] = $param['currentUser'];
                        $verifySubmit['turn']['submitInfo']['overhandleTime'] = $time;
                        $verifySubmit['turn']['submitInfo']['isWithoutRequired'] = !$needRrequired;
                        $verifySubmit['turn']['submitInfo']['flowTurnType'] =  $turnType;

                        $res = app($this->flowParseService)->postBranchTurning($verifySubmit['turn']['submitInfo'] ,  $userInfo);
                        $verifySubmit['res'] =  $res;
                        if ($res == 1 && $newprocessValue[0]['host_flag'] == 0) {
                            //且将第一个人默认更新为主办人
                            $updateFlowRunProcessdata['wheres'] = ["flow_run_process_id" => [$newprocessValue[0]['flow_run_process_id']]];
                            $updateFlowRunProcessdata['data'] =  ['saveform_time' =>$time, 'transact_time' =>$time ,'overhandle_time' =>$time , 'host_flag' =>1 , 'user_run_type' =>2 , 'deliver_time' =>$time ];
                            app($this->flowRunProcessRepository)->updateFlowRunProcessData($updateFlowRunProcessdata);
                            //更新flow_run_step表的办理状态
                            //app($this->flowRunService)->rebuildFlowRunStepDataServiceRealize(["run_id" => $param['runId'] ]);
                        } else if ($res == 1 && $newprocessValue[0]['host_flag'] == 1) {
                            //将此人未办理的全部更新为超时自动提交
                            $updateFlowRunProcessdata['wheres'] = ["run_id" => [$param['runId'] ],"user_id" => [$newprocessValue[0]['user_id']] , 'process_id' => [$newprocessValue[0]['process_id']]];
                            $updateFlowRunProcessdata['data'] = ['deliver_time' =>$time ,'overhandle_time' =>$time ,'saveform_time' =>$time, 'transact_time' =>$time];
                            app($this->flowRunProcessRepository)->updateFlowRunProcessData($updateFlowRunProcessdata);
                        } else {
                            app($this->flowRunProcessRepository)->updateData(["press_add_hour_turn" => 3], ['run_id' => $processValue['run_id'] , 'process_id' => $processValue['process_id'] ]);
                        }
                    if ($res == 1) {
                        //消息提醒该节点已被处理，系统提交到下一个节点
                            if($verifySubmit['turn']['submitInfo']['next_flow_process'] != 0) {
                                  $overTimeRemindContent = trans('flow.flow_overtime_to_next');
                            } elseif($verifySubmit['turn']['submitInfo']['next_flow_process'] == 0){
                                  $overTimeRemindContent = trans('flow.flow_overtime_to_end');
                            }
                            $sendData['remindMark']   = 'flow-overtimeSubmit';
                            $sendData['toUser']       =array_unique($userMsgArr);
                            $run =   app($this->flowRunRepository)->getDetail($param['runId']  ,false ,['run_name']);
                            $sendData['contentParam'] = ['overTimeRemindContent' =>$overTimeRemindContent  , 'flowTitle'=> $run->run_name];
                            $sendData['stateParams'] = ["flow_id" =>  intval($param['flowId']), "run_id" => intval($param['runId']) ];
                            $sendData['module_type'] = app($this->flowTypeRepository)->getFlowSortByFlowId($param['flowId']);
                            $result = Eoffice::sendMessage($sendData);

                    }
                } else {
                     app($this->flowRunProcessRepository)->updateData(["press_add_hour_turn" => 3], ['run_id' => $processValue['run_id'] , 'process_id' => $processValue['process_id'] ]); // 如果此时不满足不选人提交状态，将press_add_hour_turn更新为3状态
                }
            }
        }
        //超时提醒
        $this->handleFlowRunTime();

    }

    /*
     * 定时任务超时提醒部分处理
     */
    public function handleFlowRunTime()
    {
        $timeStamp  = time();
        $time = date('Y-m-d H:i:s' ,$timeStamp);
         //超时提醒;查找部分提醒和未提醒的数据
        $param['whereRaw'] = [" has_remind < 2
                                AND
                                (remind_time <> '0000-00-00 00:00:00' and remind_time<'".$time."')
                            "];
        //remind_time
        $param['order_by']  = ['remind_time' => 'asc'] ;
        $limitObj = app($this->flowRunOverTimeRepository)->getFlowRunOvertimeList($param);
        $limitDatas = $limitObj->toArray();
        $runs = [];
        $ids = [];
        $flows = [];
        //已经提醒过保存，防止重复提醒
        $runreminds = [];
        if (!empty($limitDatas)) {
            if (strtotime($limitDatas[0]['remind_time']) > $timeStamp ) {
                return false;
            }

            //获取用户待排班信息=>放置到缓存中用户的排班，当重新设置排班时会清除缓存
            $date = date('Y-m-d' , time());
            foreach ($limitDatas as $k => $v) {
                //将limitdata和当前时间进行对比,如果大于或等于该催促时间则发出提醒
                if ( $timeStamp >= strtotime($v['remind_time']) && $v['has_remind'] <2 ) {
                    //判断提醒类型overtime_ways 超时前0， 超时时2 ， 超时后1
                    $run_name = $v['flow_run_over_time_belongs_to_flow_run']['run_name'] ?? '';
                    $run_name = preg_replace("/(\s|\&nbsp\;|　|\xc2\xa0)/",' ',$run_name);
                    $run_name = preg_replace("/(\xc2\xa0)/",' ',$run_name);
                    $is_effect = $v['flow_run_over_time_belongs_to_flow_run']['is_effect'] ?? '';
                    if (  $is_effect != 1) {
                        continue;
                    }
                    $process = isset($v['flow_run_over_time_has_many_flow_run_process']) ? $v['flow_run_over_time_has_many_flow_run_process']:[];
                    $type = $v['flow_run_over_time_belongs_to_flow_type']??[];
                    if (empty( $type)) {
                         continue;
                    }
                    if (isset($type['flow_type']) && $type['flow_type']==1) {
                        $skip = $v['flow_run_over_time_has_one_flow_process']['limit_skip_holiday_toggle'];
                    } else {
                         $skip = $type['limit_skip_holiday_toggle'];
                    }
                    $not_remind  = [];
                    $remind  = [];
                    $unProcessUser = [];
                    $userToProcessId = [];
                    foreach ($process as $pk => $pv) {
                        if ($pv['process_id'] != $v['process_id'] || in_array($pv['user_id'], $unProcessUser)) {
                            continue;
                        }
                        if ($v['overtime_ways'] == 0 && $timeStamp> strtotime($pv['limit_date'])) {
                            continue;
                        }
                        array_push($unProcessUser, $pv['user_id']);
                        $userToProcessId[$pv['user_id']] = $pv['flow_run_process_id'];
                    }
                    //如果提醒方式是超时时提交，则直接提交，不判断非工作时间
                    if ($v['overtime_ways'] == 2) {
                            $remind = $unProcessUser;
                    } else {
                             //第一次到提醒时间
                            if ($v['has_remind'] == 0 ) {
                                if ($skip == 0) {
                                    $remind = $unProcessUser;
                                } else {
                                    $newuser = $this->getSchedulingDate(['users' =>$unProcessUser] , 'handleFlowRunTime');
                                    foreach ($newuser as $uk => $vk) {
                                        if ($vk == 0) {
                                            array_push($not_remind,$uk) ;
                                        } else {
                                            array_push($remind, $uk) ;
                                        }
                                    }
                                }

                            } else if ($v['has_remind'] == 1 ) {
                                    //已有部分提醒
                                    if (!empty($v['remind_info'])) {
                                        $user = explode(',', $v['remind_info']);
                                        //此时可能修改设置
                                        if ($skip == 0) {
                                            $remind =array_intersect($unProcessUser ,  $user) ;
                                        } else {
                                            $newuser = $this->getSchedulingDate(['users' =>$user] , 'handleFlowRunTime');
                                            foreach ($newuser as $uk2 => $uv2) {
                                               if ( in_array($uk2, $unProcessUser) ) {
                                                        if ($uv2 == 0) {
                                                            array_push($not_remind,$uk2) ;
                                                        } else {
                                                            array_push($remind, $uk2) ;
                                                        }
                                                }
                                            }
                                        }
                                    }
                            }
                    }
                    //延迟提醒可能造成同时重复提醒，此时需要过滤依据：run_id，userid,overtime_ways
                    if (!empty( $remind)) {
                            $remind = array_unique($remind);
                            foreach ($remind as $userremindKey => $userremindValue) {
                                if (in_array($v['run_id'].$userremindValue.$v['overtime_ways'],$runreminds)) {
                                    unset($remind[$userremindKey]);
                                } else {
                                    array_push($runreminds , $v['run_id'].$userremindValue.$v['overtime_ways']);
                                }
                            }
                            if ($v['overtime_ways'] == 0) {
                                $overTimeRemindContent = trans('flow.flow_will_overtime');
                            } else if ($v['overtime_ways'] == 1 || $v['overtime_ways'] == 2) {
                                $overTimeRemindContent = trans('flow.flow_overtimed');
                            }
                            $sendData['remindMark']   = 'flow-overtime';
                            $sendData['contentParam'] = ['overTimeRemindContent' =>$overTimeRemindContent  , 'flowTitle'=> $run_name];
                            $sendData['stateParams'] = ["flow_id" => intval($v['flow_id']), "run_id" => intval($v['run_id'])];
                            $sendData['module_type'] = app($this->flowTypeRepository)->getFlowSortByFlowId($v['flow_id']);
                            if (!empty($v['send_method'])) {
                                $send_method = json_decode($v['send_method'] ,true);
                                $sms = [];
                                foreach ($send_method as $ks => $vs) {
                                    if ($vs == 1) {
                                        array_push($sms , $ks);
                                    }
                                }
                            }
                            if (isset($sms) && !empty($sms)) {
                                $sendData['sendMethod']  = $sms;
                            }
                            // 新增flow_run_process_id参数
                            foreach ($remind as $key => $value) {
                                $sendData['toUser'] = $value;
                                if (isset($userToProcessId[$value])) {
                                    $sendData['stateParams']['flow_run_process_id'] = intval($userToProcessId[$value]);
                                }
                                Eoffice::sendMessage($sendData);
                            }
                    }
                    if ( !empty($not_remind) ) {
                        $has_remind = 1;
                        $remind_info = implode(',', $not_remind);
                    } else {
                         $has_remind = 2;
                    }
                    $remind_info  =$remind_info ?? '';
                    app($this->flowRunOverTimeRepository)->updateData(["has_remind" => $has_remind , 'remind_info'=>$remind_info ], ['id' => $v['id']]);

                }
            }
        }
    }

    /**
     * 比较指定时间和筛选条件的时间大小
     *
     * @param  $time1 string 筛选条件时间1
     * @param  $time2 string 筛选条件时间2
     * @param  $target_time string 指定的时间
     * @param  $type string 两种方式，Ymd仅比较Ymd日期，YmdHis比较YmdHis年月日时分秒
     *
     * @return int 在范围内返回true,不在范围内返回false
     *
     * @author  zyx
     *
     */
    public function compareTargetTimeWithConditionTime($time1, $time2, $target_time, $type = 'Ymd')
    {
        if (!in_array($type, ['Ymd', 'YmdHis'])) {
            $type = 'Ymd';
        }

        // 时间1
        if (!empty($time1)) {
            $condition_time1 = date($type, strtotime($time1));
        } else {
            $condition_time1 = 1;
        }
        // 时间2
        if (!empty($time2)) {
            $condition_time2 = date($type, strtotime($time2));
        } else {
            $condition_time2 = 1;
        }
        //筛选条件都为空，认为在范围内
        if (($condition_time1 == 1) && ($condition_time2 == 1)) {
            return TRUE;
        }

        //指定时间为空，认为当前数据不符合筛选条件
        if (empty($target_time)) {
            return FALSE;
        }
        //指定时间
        $target_time = date($type, strtotime($target_time));

        $res = FALSE;
        if (($condition_time1 > 1) && ($condition_time2 == 1)) {//只有左边时间
            $res = $target_time >= $condition_time1 ? TRUE : FALSE;
        } else if (($condition_time2 > 1) && ($condition_time1 == 1)) {//只有右边时间
            $res = $target_time <= $condition_time2 ? TRUE : FALSE;
        } else if (($condition_time1 > 1) && ($condition_time2 > 1)) {//两边时间都有
            $res = (($target_time >= $condition_time1) && ($target_time <= $condition_time2)) ? TRUE : FALSE;
        }

        return $res;
    }

    // 20190926,zyx,处理流水号规则，将必要参数读取出来
    public function getParamsFromFlowSequence($flowSequence)
    {
        $result = [];
        $result['flow_sequence_length'] = 4;
        $result['flow_sequence_start'] = 0;
        $result['flow_sequence_reset_rules'] = '';

        // 定义了流水号规则才去处理
        if ($flowSequence != '') {
            // 读取run_seq内容
            preg_match_all('/\[RUN_SEQ.*?\]/', $flowSequence, $sequenceArr);
            if ($sequenceArr[0]) {
                foreach ($sequenceArr[0] as $k => $v) {
                    if (strpos($v, 'RUN_SEQ') != -1) {
                        $ruleArr = explode('|', trim($v, '[,]'));
                        foreach ($ruleArr as $ruleKey => $ruleValue) {
                            if ($ruleKey == 0) { // 长度
                                $result['flow_sequence_length'] = substr($ruleValue, strpos($ruleValue, 'RUN_SEQ')+7);
                                continue;
                            }
                            if ($ruleKey == 1) { // 起始值
                                $result['flow_sequence_start'] = (int)$ruleValue;
                                continue;
                            }
                            if (in_array($ruleValue, ['Y', 'M', 'D'])) { // 重置周期
                                $result['flow_sequence_reset_rules'] = $ruleValue;
                            }
                        }
                        break;
                    }
                }
            }
        }

        return $result;
    }
    /**
     * 根据办理人员排班信息来根据超时设置来更新超时时间
    * @param  string $limit_date     [description]
     * @param  string $users        [description]
     */
    public function getOvertimeBySelectedUser($param=[])
    {
        $time = time();
        $press_add_second = $param['press_add_hour'] *3600;
        if (empty($param['users'])) {
            return ['limit_date' => date('Y-m-d H:i:s' , $time+$press_add_second)];
        } else {
            if (!is_array($param['users'])) {
                $param['users'] = explode(',', $param['users']);
            }
        }
        $newuser = $this->getSchedulingDate($param);
        $nowlimit = $time +$press_add_second ;
        $limit_date = date('Y-m-d H:i:s' , $nowlimit);
        foreach ($newuser as $userkey => $uservalue) {
                 $init_press_add_second = $press_add_second;
                 $init_time = $time;
                //如果未设置排班
                if (empty($uservalue) ) {
                   continue;
                }
                //判断当前时间是否在工作时间内
                foreach ($uservalue as $k1 => $v1) {
                        if ($init_press_add_second  == 0 ) {
                            break;
                        }
                        if ($v1[1] < $init_time) {
                            continue;
                        }
                        //如果当前时间办理时间
                        if ($init_time > $v1[0]) {
                            $basic = $init_time;
                        } else {
                             $basic = $v1[0];
                        }
                        $chazhi = $v1[1] -($basic +$init_press_add_second);
                        if ( $chazhi >= 0 ) {
                            $maxtime = $basic +$init_press_add_second;
                            $init_press_add_second = 0;
                            break;
                        } else {
                            $init_time    = $v1[1];
                            $init_press_add_second = $init_press_add_second - ($v1[1] - $basic);
                            //此时说明时间不够,继续往后找
                        }
                }
                if ($init_press_add_second > 0) {
                    //说明后面未找到排班,则 不考虑延迟
                     $maxtime = $init_time+$init_press_add_second;
                }
                if ($maxtime >  $nowlimit ) {
                    $nowlimit  = $maxtime;
                }
        }
       $limit_date = date('Y-m-d H:i:s' , $nowlimit);
       return ['limit_date' =>$limit_date ];
    }
    /**
     * 获取用户排班信息
    * @param  string $limit_date     [description]
     * @param  string $users        [description]
    */
    public function getSchedulingDate ($param , $type =''){
        $timeStamp = time();
        $beforetwoday =  $timeStamp-2*24*3600;
        if ($type == 'handleFlowRunTime') {
            $aftertwoday =  $timeStamp+1*24*3600;
            $raw = 'UNIX_TIMESTAMP(attend_scheduling_date.scheduling_date) > '.$beforetwoday.' and UNIX_TIMESTAMP(attend_scheduling_date.scheduling_date) <'. $aftertwoday;
        } else {
            $raw = 'UNIX_TIMESTAMP(attend_scheduling_date.scheduling_date) > '.$beforetwoday;
        }
        //从前两天排班开始查起
        $userschArr  = DB::table('attend_scheduling_user')
                         ->select(['scheduling_date' , 'user_id' , 'sign_in_time' , 'sign_out_time'])
                        ->join( 'attend_scheduling_date' , 'attend_scheduling_date.scheduling_id' , 'attend_scheduling_user.scheduling_id')
                        ->join( 'attend_shifts_sign_time' , 'attend_shifts_sign_time.shift_id' , 'attend_scheduling_date.shift_id')
                        ->whereIn('user_id' , $param['users'])
                        ->whereRaw($raw)
                        ->orderBy('scheduling_date' , 'asc')
                        ->orderBy('sign_in_time' , 'asc')
                        ->get()
                        ->toArray();
        //重新组装每个用户的数据
        $newuser = [];
        foreach ($userschArr as $k1 => $v1) {
            if (!isset($newuser[$v1->user_id])) {
                $newuser[$v1->user_id] = [];
            }
            $start = strtotime($v1->scheduling_date." " . $v1->sign_in_time);
            $end = strtotime($v1->scheduling_date." " . $v1->sign_out_time);
            if ( $start > $end ) {
                $end = $end+3600*24;
            }
            if (!isset($newuser[$v1->user_id][$v1->scheduling_date])) {
                $newuser[$v1->user_id][$v1->scheduling_date] = [];
                array_push($newuser[$v1->user_id][$v1->scheduling_date],  $start );
                array_push($newuser[$v1->user_id][$v1->scheduling_date],  $end );
            } else {
                //说明是多时段班次
                $newuser[$v1->user_id][$v1->scheduling_date.$start] = [];
                array_push($newuser[$v1->user_id][$v1->scheduling_date.$start],  $start );
                array_push($newuser[$v1->user_id][$v1->scheduling_date.$start],  $end );
            }

        }
        //如果是定时任务查询
        if ($type == 'handleFlowRunTime') {
            $returnarr= [];
            foreach ($newuser as $userkey => $uservalue) {
                //判断当前时间是否在工作时间内
                foreach ($uservalue as $k => $vk) {
                        if ($vk[1] < $timeStamp) {
                            continue;
                        }
                        if ($timeStamp < $vk[0]) {
                            $returnarr[$userkey]  = 0;
                            break;
                        }
                        //如果当前时间办理时间
                        if ($timeStamp >= $vk[0] && $timeStamp <= $vk[1]) {
                             $returnarr[$userkey]  = 1;
                             break;
                        }
                }
            }
            // 1 在工作时间内。0不在工作时间内
            return $returnarr;
        }

        return $newuser;
    }




    /**
     * 获取每个节点流程超时时间
     * @param  string $run_id      [description]
     * @param  string $flow_id        [description]
     * @param  string $flow_process      [description]
     * @param  string $user_id        [description]
     * @param  string $selectusers      [description]
     * @param  string $next_flow_process        [description]
     * @return [type]             [description]
     */
    public function getOvertimeByFlowProcess($param = [], $userInfo = []){
        // $param['run_id'] =  1061;     //运行流程id,若无run_id则表示新建
        // $param['flow_id'] =  1061;     //
        // $param['flow_process'] = 257; //当前节点id
        // $param['user_id'] = 'admin'; //当前用户
        // $param['selectusers'] = 'WV00000001'; //下一节点的人
        // //$next_flow_process = $param['next_flow_process']; // 下一节点,若无则默认取第一个
        $param["processId"] = isset($param["processId"]) ? $param["processId"] :1;
        //获取可流出节点
        $process = $this->getFlowTransactProcess($param, $userInfo);
        if ( isset($process['turn'])  && is_array($process['turn']) && !empty( $process['turn'])) {
            //判断是否是唯一节点
            $currentProcessInfo = $process['turn'][0];
            $targetVerifyResult = $this->targetProcessVerifyWithoutSelectUser(["flowProcess" => $param["flow_process"], "runId" => $param["run_id"], "flowId" => $param["flow_id"], "node_id" => $currentProcessInfo["node_id"], "nodeInfo" => $currentProcessInfo, "userId" => $param["user_id"], "processId" => $param["processId"]]);
            if ($currentProcessInfo['overtime_except_nonwork'] == 1 && !empty($targetVerifyResult['submitInfo'])) {
                        $param['turnselectusers'] = !empty($targetVerifyResult['submitInfo']['process_host_user']) ? $targetVerifyResult['submitInfo']['process_host_user']:$targetVerifyResult['submitInfo']['process_transact_user'];
            }
            //前进节点，判断有无下一节点，若无则直接默认返回第一个
            if (!isset($next_flow_process)) {
                $turnnode = $process['turn'][0];
            } else {
                foreach ( $process['turn'] as $turnKey => $turnValue) {
                    if ($turnValue['node_id'] == $next_flow_process) {
                        $turnnode = $turnValue;
                        break;
                    }
                }
            }
        }
        if ( isset($process['back']) && is_array($process['back']) && !empty( $process['back'])) {
            $currentProcessInfo = $process['back'][0];
            $targetVerifyResult = $this->targetProcessVerifyWithoutSelectUser(["flowProcess" => $param["flow_process"], "runId" => $param["run_id"], "flowId" => $param["flow_id"], "node_id" => $currentProcessInfo["node_id"], "nodeInfo" => $currentProcessInfo, "userId" => $param["user_id"], "processId" => $param["processId"]]);
            if ($currentProcessInfo['overtime_except_nonwork'] == 1  && !empty($targetVerifyResult['submitInfo'])) {
                $param['backselectusers'] = !empty($targetVerifyResult['submitInfo']['process_host_user']) ? $targetVerifyResult['submitInfo']['process_host_user']:$targetVerifyResult['submitInfo']['process_transact_user'];
            }
            //前进节点，判断有无下一节点，若无则直接默认返回第一个
            if (!isset($next_flow_process)) {
                $backnode = $process['back'][0];
            } else {
                foreach ( $process['back'] as $turnKey => $turnValue) {
                    if ($turnValue['node_id'] == $next_flow_process) {
                        $backnode = $turnValue;
                        break;
                    }
                }
            }
        }
        if (isset($turnnode) && !empty($turnnode['press_add_hour']) ) {
             $turn_limit_date = date('Y-m-d H:i:s' , floatval($turnnode['press_add_hour'])*3600+time() ) ;
             if (isset( $param['turnselectusers'])) {
                //判断是否开启不统计节假日
               $result =  $this->getOvertimeBySelectedUser(['press_add_hour' => $turnnode['press_add_hour'] , 'users'=>  $param['turnselectusers'] ]);
               $turn_limit_date =  $result['limit_date'];
             }

        }

        if (isset($backnode) &&  !empty($backnode['press_add_hour']) ) {
             $back_limit_date = date('Y-m-d H:i:s' , floatval($backnode['press_add_hour'])*3600+time() ) ;
             if (isset( $param['backselectusers'])) {
                //判断是否开启不统计节假日
               $result =  $this->getOvertimeBySelectedUser(['press_add_hour' => $backnode['press_add_hour'] , 'users'=>  $param['backselectusers'] ]);
               $back_limit_date =  $result['limit_date'];
             }

        }
        $turn_limit_date = isset($turn_limit_date) ? $turn_limit_date:'';
        $back_limit_date = isset($back_limit_date) ? $back_limit_date:'';
        return ['turn_limit_date' =>$turn_limit_date , 'back_limit_date' =>$back_limit_date];

    }


    /**
     * 获取节点字段控制信息
     * @param $nodeId
     * @return array
     *
     * @author zyx,20191111修改
     */
    public function getFlowNodeControlOperation($nodeId)
    {
        if ($controlHasManyOperation = app($this->flowProcessRepository)->getFlowNodeControlOperations($nodeId)) {
            $controlOperationInfo = [];
            // 处理新添加控件没有字段控制信息问题
            $formId = app($this->flowRunService)->getFormIdByNodeId($nodeId);
            // 表单字段控制信息，先查Redis
            if (Redis::hexists('fixed_flow_form_control_operation', $formId)) {
                $controlInfo = unserialize(Redis::hget('fixed_flow_node_field_control_operation', $formId));
            } else {
                $controlInfo = app($this->flowFormControlStructureRepository)->getFlowFormControlStructure(['search'=>['form_id'=>[$formId]],'fields'=>['control_id']]);
                Redis::hset('fixed_flow_form_control_operation', $formId, serialize($controlInfo));
            }
            if($controlInfo) {
                foreach ($controlInfo as $key => $value) {
                    $controlOperationInfo[$value['control_id']] = [];
                }
            }
            if (count($controlHasManyOperation)) {
                foreach ($controlHasManyOperation as $key => $value) {
                    $controlId = $value['control_id'] ?? "";
                    if ($controlId) {
                        foreach ($value['control_operation_detail'] as $detailValue) {
                            $controlOperationInfo[$controlId][] = $detailValue['operation_type'];
                        }
                    }
                }
            }
            return $controlOperationInfo;
        }
    }
}
